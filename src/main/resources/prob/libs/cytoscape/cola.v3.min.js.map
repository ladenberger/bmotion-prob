



<!DOCTYPE html>
<html lang="en" class="">
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="Content-Language" content="en">
    
    
    <title>WebCola/cola.v3.min.js.map at master · simontegg/WebCola · GitHub</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png">
    <meta property="fb:app_id" content="1401488693436528">

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="simontegg/WebCola" name="twitter:title" /><meta content="WebCola - Javascript constraint-based graph layout" name="twitter:description" /><meta content="https://avatars2.githubusercontent.com/u/1574732?v=3&amp;s=400" name="twitter:image:src" />
<meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://avatars2.githubusercontent.com/u/1574732?v=3&amp;s=400" property="og:image" /><meta content="simontegg/WebCola" property="og:title" /><meta content="https://github.com/simontegg/WebCola" property="og:url" /><meta content="WebCola - Javascript constraint-based graph layout" property="og:description" />

      <meta name="browser-stats-url" content="/_stats">
    <link rel="assets" href="https://assets-cdn.github.com/">
    <link rel="conduit-xhr" href="https://ghconduit.com:25035">
    
    <meta name="pjax-timeout" content="1000">
    

    <meta name="msapplication-TileImage" content="/windows-tile.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="selected-link" value="repo_source" data-pjax-transient>
      <meta name="google-analytics" content="UA-3769691-2">

    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="86637042:72C8:123CC878:54D33EF4" name="octolytics-dimension-request_id" />
    
    <meta content="Rails, view, blob#show" name="analytics-event" />

    
    
    <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico">


    <meta content="authenticity_token" name="csrf-param" />
<meta content="CYcCzB4wXJImXmraIBwx8ROJBSdBwIk+7hMxsD+FtbXiJR0fzr2Zkb7pZNd/q+l2eKnBHt4ZcPf1VkBuPKo7jQ==" name="csrf-token" />

    <link href="https://assets-cdn.github.com/assets/github-d4c82cdf29d116c0e3fc8d832c10ced6c486134ed6dd6a41a237f301c258795f.css" media="all" rel="stylesheet" type="text/css" />
    <link href="https://assets-cdn.github.com/assets/github2-01ab4379ac7e65832a27b84517b46126d671f0dc3c2dce94c00e53866a617e26.css" media="all" rel="stylesheet" type="text/css" />
    
    


    <meta http-equiv="x-pjax-version" content="ce2010b592efa5c69b87ff72544a66dd">

      
  <meta name="description" content="WebCola - Javascript constraint-based graph layout">
  <meta name="go-import" content="github.com/simontegg/WebCola git https://github.com/simontegg/WebCola.git">

  <meta content="1574732" name="octolytics-dimension-user_id" /><meta content="simontegg" name="octolytics-dimension-user_login" /><meta content="27524663" name="octolytics-dimension-repository_id" /><meta content="simontegg/WebCola" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="true" name="octolytics-dimension-repository_is_fork" /><meta content="11303445" name="octolytics-dimension-repository_parent_id" /><meta content="tgdwyer/WebCola" name="octolytics-dimension-repository_parent_nwo" /><meta content="11303445" name="octolytics-dimension-repository_network_root_id" /><meta content="tgdwyer/WebCola" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/simontegg/WebCola/commits/master.atom" rel="alternate" title="Recent Commits to WebCola:master" type="application/atom+xml">

  </head>


  <body class="logged_out  env-production  vis-public fork page-blob">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>
    <div class="wrapper">
      
      
      
      


      
      <div class="header header-logged-out" role="banner">
  <div class="container clearfix">

    <a class="header-logo-wordmark" href="https://github.com/" ga-data-click="(Logged out) Header, go to homepage, icon:logo-wordmark">
      <span class="mega-octicon octicon-logo-github"></span>
    </a>

    <div class="header-actions" role="navigation">
        <a class="button primary" href="/join" data-ga-click="(Logged out) Header, clicked Sign up, text:sign-up">Sign up</a>
      <a class="button" href="/login?return_to=%2Fsimontegg%2FWebCola%2Fblob%2Fmaster%2FWebCola%2Fcola.v3.min.js.map" data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in">Sign in</a>
    </div>

    <div class="site-search repo-scope js-site-search" role="search">
      <form accept-charset="UTF-8" action="/simontegg/WebCola/search" class="js-site-search-form" data-global-search-url="/search" data-repo-search-url="/simontegg/WebCola/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
  <input type="text"
    class="js-site-search-field is-clearable"
    data-hotkey="s"
    name="q"
    placeholder="Search"
    data-global-scope-placeholder="Search GitHub"
    data-repo-scope-placeholder="Search"
    tabindex="1"
    autocapitalize="off">
  <div class="scope-badge">This repository</div>
</form>
    </div>

      <ul class="header-nav left" role="navigation">
          <li class="header-nav-item">
            <a class="header-nav-link" href="/explore" data-ga-click="(Logged out) Header, go to explore, text:explore">Explore</a>
          </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="/features" data-ga-click="(Logged out) Header, go to features, text:features">Features</a>
          </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="https://enterprise.github.com/" data-ga-click="(Logged out) Header, go to enterprise, text:enterprise">Enterprise</a>
          </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="/blog" data-ga-click="(Logged out) Header, go to blog, text:blog">Blog</a>
          </li>
      </ul>

  </div>
</div>



      <div id="start-of-content" class="accessibility-aid"></div>
          <div class="site" itemscope itemtype="http://schema.org/WebPage">
    <div id="js-flash-container">
      
    </div>
    <div class="pagehead repohead instapaper_ignore readability-menu">
      <div class="container">
        
<ul class="pagehead-actions">


  <li>
      <a href="/login?return_to=%2Fsimontegg%2FWebCola"
    class="minibutton with-count star-button tooltipped tooltipped-n"
    aria-label="You must be signed in to star a repository" rel="nofollow">
    <span class="octicon octicon-star"></span>
    Star
  </a>

    <a class="social-count js-social-count" href="/simontegg/WebCola/stargazers">
      0
    </a>

  </li>

    <li>
      <a href="/login?return_to=%2Fsimontegg%2FWebCola"
        class="minibutton with-count js-toggler-target fork-button tooltipped tooltipped-n"
        aria-label="You must be signed in to fork a repository" rel="nofollow">
        <span class="octicon octicon-repo-forked"></span>
        Fork
      </a>
      <a href="/simontegg/WebCola/network" class="social-count">
        37
      </a>
    </li>
</ul>

        <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
          <span class="mega-octicon octicon-repo-forked"></span>
          <span class="author"><a href="/simontegg" class="url fn" itemprop="url" rel="author"><span itemprop="title">simontegg</span></a></span><!--
       --><span class="path-divider">/</span><!--
       --><strong><a href="/simontegg/WebCola" class="js-current-repository" data-pjax="#js-repo-pjax-container">WebCola</a></strong>

          <span class="page-context-loader">
            <img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
          </span>

            <span class="fork-flag">
              <span class="text">forked from <a href="/tgdwyer/WebCola">tgdwyer/WebCola</a></span>
            </span>
        </h1>
      </div><!-- /.container -->
    </div><!-- /.repohead -->

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline  ">
        <div class="repository-sidebar clearfix">
            
<nav class="sunken-menu repo-nav js-repo-nav js-sidenav-container-pjax js-octicon-loaders"
     role="navigation"
     data-pjax="#js-repo-pjax-container"
     data-issue-count-url="/simontegg/WebCola/issues/counts">
  <ul class="sunken-menu-group">
    <li class="tooltipped tooltipped-w" aria-label="Code">
      <a href="/simontegg/WebCola" aria-label="Code" class="selected js-selected-navigation-item sunken-menu-item" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /simontegg/WebCola">
        <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>


    <li class="tooltipped tooltipped-w" aria-label="Pull Requests">
      <a href="/simontegg/WebCola/pulls" aria-label="Pull Requests" class="js-selected-navigation-item sunken-menu-item" data-hotkey="g p" data-selected-links="repo_pulls /simontegg/WebCola/pulls">
          <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull Requests</span>
          <span class="js-pull-replace-counter"></span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>


  </ul>
  <div class="sunken-menu-separator"></div>
  <ul class="sunken-menu-group">

    <li class="tooltipped tooltipped-w" aria-label="Pulse">
      <a href="/simontegg/WebCola/pulse" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-selected-links="pulse /simontegg/WebCola/pulse">
        <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

    <li class="tooltipped tooltipped-w" aria-label="Graphs">
      <a href="/simontegg/WebCola/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-selected-links="repo_graphs repo_contributors /simontegg/WebCola/graphs">
        <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>
  </ul>


</nav>

              <div class="only-with-full-nav">
                  
<div class="clone-url open"
  data-protocol-type="http"
  data-url="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone">
  <h3><span class="text-emphasized">HTTPS</span> clone URL</h3>
  <div class="input-group js-zeroclipboard-container">
    <input type="text" class="input-mini input-monospace js-url-field js-zeroclipboard-target"
           value="https://github.com/simontegg/WebCola.git" readonly="readonly">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  
<div class="clone-url "
  data-protocol-type="subversion"
  data-url="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone">
  <h3><span class="text-emphasized">Subversion</span> checkout URL</h3>
  <div class="input-group js-zeroclipboard-container">
    <input type="text" class="input-mini input-monospace js-url-field js-zeroclipboard-target"
           value="https://github.com/simontegg/WebCola" readonly="readonly">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>



<p class="clone-options">You can clone with
  <a href="#" class="js-clone-selector" data-protocol="http">HTTPS</a> or <a href="#" class="js-clone-selector" data-protocol="subversion">Subversion</a>.
  <a href="https://help.github.com/articles/which-remote-url-should-i-use" class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
    <span class="octicon octicon-question"></span>
  </a>
</p>



                <a href="/simontegg/WebCola/archive/master.zip"
                   class="minibutton sidebar-button"
                   aria-label="Download the contents of simontegg/WebCola as a zip file"
                   title="Download the contents of simontegg/WebCola as a zip file"
                   rel="nofollow">
                  <span class="octicon octicon-cloud-download"></span>
                  Download ZIP
                </a>
              </div>
        </div><!-- /.repository-sidebar -->

        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>
          

<a href="/simontegg/WebCola/blob/6714b0ecbb16b72c55d8e7d45972fe90974cf63e/WebCola/cola.v3.min.js.map" class="hidden js-permalink-shortcut" data-hotkey="y">Permalink</a>

<!-- blob contrib key: blob_contributors:v21:18b3630f636efc7ebd86d86ea5f9c7c1 -->

<div class="file-navigation js-zeroclipboard-container">
  
<div class="select-menu js-menu-container js-select-menu left">
  <span class="minibutton select-menu-button js-menu-target css-truncate" data-hotkey="w"
    data-master-branch="master"
    data-ref="master"
    title="master"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <span class="octicon octicon-git-branch"></span>
    <i>branch:</i>
    <span class="js-select-button css-truncate-target">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" class="js-select-menu-tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" class="js-select-menu-tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item selected">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/simontegg/WebCola/blob/master/WebCola/cola.v3.min.js.map"
                 data-name="master"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="master">master</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/simontegg/WebCola/blob/movieexperiment/WebCola/cola.v3.min.js.map"
                 data-name="movieexperiment"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="movieexperiment">movieexperiment</a>
            </div>
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/simontegg/WebCola/tree/v3.0.1/WebCola/cola.v3.min.js.map"
                 data-name="v3.0.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="v3.0.1">v3.0.1</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/simontegg/WebCola/tree/v3.0.0/WebCola/cola.v3.min.js.map"
                 data-name="v3.0.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="v3.0.0">v3.0.0</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/simontegg/WebCola/tree/v3/WebCola/cola.v3.min.js.map"
                 data-name="v3"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="v3">v3</a>
            </div>
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>

  <div class="button-group right">
    <a href="/simontegg/WebCola/find/master"
          class="js-show-file-finder minibutton empty-icon tooltipped tooltipped-s"
          data-pjax
          data-hotkey="t"
          aria-label="Quickly jump between files">
      <span class="octicon octicon-list-unordered"></span>
    </a>
    <button aria-label="Copy file path to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
  </div>

  <div class="breadcrumb js-zeroclipboard-target">
    <span class='repo-root js-repo-root'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/simontegg/WebCola" class="" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">WebCola</span></a></span></span><span class="separator">/</span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/simontegg/WebCola/tree/master/WebCola" class="" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">WebCola</span></a></span><span class="separator">/</span><strong class="final-path">cola.v3.min.js.map</strong>
  </div>
</div>


  <div class="commit file-history-tease">
    <div class="file-history-tease-header">
        <img alt="" class="avatar" height="24" src="https://1.gravatar.com/avatar/a913d27038c0b14795c70075c4db7a90?d=https%3A%2F%2Fassets-cdn.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png&amp;r=x&amp;s=140" width="24" />
        <span class="author"><span>simontegg</span></span>
        <time datetime="2015-01-27T21:27:25Z" is="relative-time">Jan 28, 2015</time>
        <div class="commit-title">
            <a href="/simontegg/WebCola/commit/3fb2bb686cb57f79a4725924db1afb6ffd103a73" class="message" data-pjax="true" title="wip gulp examples">wip gulp examples</a>
        </div>
    </div>

    <div class="participation">
      <p class="quickstat">
        <a href="#blob_contributors_box" rel="facebox">
          <strong>0</strong>
           contributors
        </a>
      </p>
      
    </div>
    <div id="blob_contributors_box" style="display:none">
      <h2 class="facebox-header">Users who have contributed to this file</h2>
      <ul class="facebox-user-list">
      </ul>
    </div>
  </div>

<div class="file-box">
  <div class="file">
    <div class="meta clearfix">
      <div class="info file-name">
          <span>1 lines (1 sloc)</span>
          <span class="meta-divider"></span>
        <span>581.991 kb</span>
      </div>
      <div class="actions">
        <div class="button-group">
          <a href="/simontegg/WebCola/raw/master/WebCola/cola.v3.min.js.map" class="minibutton " id="raw-url">Raw</a>
            <a href="/simontegg/WebCola/blame/master/WebCola/cola.v3.min.js.map" class="minibutton js-update-url-with-hash">Blame</a>
          <a href="/simontegg/WebCola/commits/master/WebCola/cola.v3.min.js.map" class="minibutton " rel="nofollow">History</a>
        </div><!-- /.button-group -->


            <a class="octicon-button disabled tooltipped tooltipped-w" href="#"
               aria-label="You must be signed in to make or propose changes"><span class="octicon octicon-pencil"></span></a>

          <a class="octicon-button danger disabled tooltipped tooltipped-w" href="#"
             aria-label="You must be signed in to make or propose changes">
          <span class="octicon octicon-trashcan"></span>
        </a>
      </div><!-- /.actions -->
    </div>
    

  <div class="blob-wrapper data type-text">
      <table class="highlight tab-size-8 js-file-line-container">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code js-file-line">{&quot;version&quot;:3,&quot;sources&quot;:[&quot;node_modules/browserify/node_modules/browser-pack/_prelude.js&quot;,&quot;browser.js&quot;,&quot;index.js&quot;,&quot;lib/adaptor.js&quot;,&quot;lib/d3Adaptor.js&quot;,&quot;lib/descent.js&quot;,&quot;lib/drag.js&quot;,&quot;lib/geom.js&quot;,&quot;lib/gridrouter.js&quot;,&quot;lib/handle_disconnected.js&quot;,&quot;lib/linklengths.js&quot;,&quot;lib/locks.js&quot;,&quot;lib/longest-common-subsequence.js&quot;,&quot;lib/node-accessor.js&quot;,&quot;lib/node-wrapper.js&quot;,&quot;lib/pairing-heap.js&quot;,&quot;lib/powergraph.js&quot;,&quot;lib/pqueue.js&quot;,&quot;lib/pseudo-random.js&quot;,&quot;lib/rectangle.js&quot;,&quot;lib/shortestpaths.js&quot;,&quot;lib/vert.js&quot;,&quot;lib/vpsc.js&quot;,&quot;node_modules/bintrees/lib/rbtree.js&quot;,&quot;node_modules/bintrees/lib/treebase.js&quot;,&quot;node_modules/d3/d3.js&quot;,&quot;node_modules/xtend/immutable.js&quot;],&quot;names&quot;:[],&quot;mappings&quot;:&quot;AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpriBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChcjcrhhRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtlerJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbcvvSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA&quot;,&quot;file&quot;:&quot;cola.v3.min.js&quot;,&quot;sourceRoot&quot;:&quot;/source/&quot;,&quot;sourcesContent&quot;:[&quot;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\&quot;function\&quot;&amp;&amp;require;if(!u&amp;&amp;a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\&quot;Cannot find module &#39;\&quot;+o+\&quot;&#39;\&quot;);throw f.code=\&quot;MODULE_NOT_FOUND\&quot;,f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\&quot;function\&quot;&amp;&amp;require;for(var o=0;o&lt;r.length;o++)s(r[o]);return s})&quot;,&quot;\nvar cola  = require(&#39;./index&#39;);\n\ncola.d3adaptor = require(&#39;./lib/d3Adaptor&#39;);\n\nwindow.cola = cola\nwindow.PriorityQueue = require(&#39;./lib/pqueue&#39;).PriorityQueue;\nwindow.RBTree = require(&#39;bintrees/lib/rbtree&#39;);&quot;,&quot;var extend \t\t\t\t\t\t\t= require(&#39;xtend&#39;);\nvar linklengths \t\t\t\t= require(&#39;./lib/linklengths&#39;);\nvar handleDisconnected \t= require(&#39;./lib/handle_disconnected&#39;);\nvar rectangle \t\t\t\t\t= require(&#39;./lib/rectangle&#39;);\nvar vpsc \t\t\t\t\t\t\t\t= require(&#39;./lib/vpsc&#39;);\n\nvar cola = {\n\tLocks: require(&#39;./lib/locks&#39;).Locks,\n\tDescent: require(&#39;./lib/descent&#39;).Descent,\n\tgeom: require(&#39;./lib/geom&#39;),\n\tGridRouter: require(&#39;./lib/gridrouter&#39;).GridRouter,\n\tLongestCommonSubsequence: require(&#39;./lib/longest-common-subsequence&#39;).LongestCommonSubsequence,\n\tpowergraph: require(&#39;./lib/powergraph&#39;),\n\tPseudoRandom: require(&#39;./lib/pseudo-random&#39;).PseudoRandom,\n\tvpsc: extend(vpsc, rectangle),\n\tshortestpaths: require(&#39;./lib/shortestpaths&#39;)\n}\n\ncola = module.exports = extend(cola, linklengths, handleDisconnected);\n\n&quot;,&quot;var powergraph = require(&#39;./powergraph&#39;);\nvar symmetricDiffLinkLengths = require(&#39;./linklengths&#39;).symmetricDiffLinkLengths;\nvar jaccardLinkLengths = require(&#39;./linklengths&#39;).jaccardLinkLengths;\nvar generateDirectedEdgeConstraints = require(&#39;./linklengths&#39;).generateDirectedEdgeConstraints;\nvar vpsc = require(&#39;./vpsc&#39;);\nvar Rectangle = require(&#39;./rectangle&#39;);\nvar Projection = Rectangle.Projection;\nvar shortestpaths = require(&#39;./shortestpaths&#39;);\nvar Descent = require(&#39;./descent&#39;).Descent;\nvar handleDisconnected = require(&#39;./handle_disconnected&#39;);\nvar applyPacking = handleDisconnected.applyPacking;\nvar separateGraphs = handleDisconnected.separateGraphs;\nvar geom = require(&#39;./geom&#39;);\nvar dragHelper = require(&#39;./drag&#39;);\n\n\n\n/**\n* @class adaptor\n*/\n\nfunction adaptor (options) {   \n    var adaptor = {},\n        trigger = options.trigger, // a function that is notified of events like \&quot;tick\&quot;\n        kick = options.kick, // a function that kicks off the simulation tick loop\n        size = [1, 1],\n        linkDistance = 20,\n        linkType = null,\n        avoidOverlaps = false,\n        handleDisconnected = true,\n        drag,\n        alpha,\n        lastStress,\n        running = false,\n        nodes = [],\n        groups = [],\n        variables = [],\n        rootGroup = null,\n        links = [],\n        constraints = [],\n        distanceMatrix = null,\n        descent = null,\n        directedLinkConstraints = null,\n        threshold = 0.01,\n        defaultNodeSize = 10,\n        visibilityGraph = null;\n\n    adaptor.on = options.on; // a function for binding to events on the adapter\n    adaptor.drag = options.drag; // a function to allow for dragging of nodes\n\n    // give external access to drag-related helper functions\n    adaptor.dragstart = dragHelper.dragstart;\n\n    adaptor.dragend = dragHelper.dragend;\n\n\n\n\n\n\n\n    adaptor.mouseover = colaMouseover;\n    adaptor.mouseout = colaMouseout;\n\n    adaptor.tick = function () {\n        if (alpha &lt; threshold) {\n            trigger({ type: \&quot;end\&quot;, alpha: alpha = 0 });\n            delete lastStress;\n            running = false;\n            return true;\n        }\n\n        var n = nodes.length,\n            m = links.length,\n            o;\n\n        descent.locks.clear();\n        for (i = 0; i &lt; n; ++i) {\n            o = nodes[i];\n            if (o.fixed) {\n                if (typeof o.px === &#39;undefined&#39; || typeof o.py === &#39;undefined&#39;) {\n                    o.px = o.x;\n                    o.py = o.y;\n                }\n                var p = [o.px, o.py];\n                descent.locks.add(i, p);\n            }\n        }\n\n        var s1 = descent.rungeKutta();\n        //var s1 = descent.reduceStress();\n        if (s1 === 0) {\n            alpha = 0;\n        } else if (typeof lastStress !== &#39;undefined&#39;) {\n            alpha = Math.abs(Math.abs(lastStress / s1) - 1);\n        }\n        lastStress = s1;\n\n        for (i = 0; i &lt; n; ++i) {\n            o = nodes[i];\n            if (o.fixed) {\n                o.x = o.px;\n                o.y = o.py;\n            } else {\n                o.x = descent.x[0][i];\n                o.y = descent.x[1][i];\n            }\n        }\n\n        trigger({ type: \&quot;tick\&quot;, alpha: alpha });\n    };\n\n    /**\n     * the list of nodes.\n     * If nodes has not been set, but links has, then we instantiate a nodes list here, of the correct size,\n     * before returning it.\n     * @property nodes {Array}\n     * @default empty list\n     */\n    adaptor.nodes = function (v) {\n        if (!arguments.length) {\n            if (nodes.length === 0 &amp;&amp; links.length &gt; 0) {\n                var n = 0;\n                links.forEach(function (l) {\n                    n = Math.max(n, l.source, l.target);\n                });\n                nodes = new Array(++n);\n                for (var i = 0; i &lt; n; ++i) {\n                    nodes[i] = {};\n                }\n            }\n            return nodes;\n        }\n        nodes = v;\n        return adaptor;\n    };\n\n    /**\n     * a list of hierarchical groups defined over nodes\n     * @property groups {Array}\n     * @default empty list\n     */\n    adaptor.groups = function (x) {\n        if (!arguments.length) return groups;\n        groups = x;\n        rootGroup = {};\n        groups.forEach(function (g) {\n            if (typeof g.padding === \&quot;undefined\&quot;)\n                g.padding = 1;\n            if (typeof g.leaves !== \&quot;undefined\&quot;)\n                g.leaves.forEach(function (v, i) { (g.leaves[i] = nodes[v]).parent = g });\n            if (typeof g.groups !== \&quot;undefined\&quot;)\n                g.groups.forEach(function (gi, i) { (g.groups[i] = groups[gi]).parent = g });\n        });\n        rootGroup.leaves = nodes.filter(function (v) { return typeof v.parent === &#39;undefined&#39;; });\n        rootGroup.groups = groups.filter(function (g) { return typeof g.parent === &#39;undefined&#39;; });\n        return adaptor;\n    };\n\n    adaptor.powerGraphGroups = function (f) {\n        var g = powergraph.getGroups(nodes, links, linkAccessor);\n        this.groups(g.groups);\n        f(g);\n        return adaptor;\n    }\n\n    /**\n     * if true, the layout will not permit overlaps of the node bounding boxes (defined by the width and height properties on nodes)\n     * @property avoidOverlaps\n     * @type bool\n     * @default false\n     */\n    adaptor.avoidOverlaps = function (v) {\n        if (!arguments.length) return avoidOverlaps;\n        avoidOverlaps = v;\n        return adaptor;\n    }\n\n    /**\n     * if true, the layout will not permit overlaps of the node bounding boxes (defined by the width and height properties on nodes)\n     * @property avoidOverlaps\n     * @type bool\n     * @default false\n     */\n    adaptor.handleDisconnected = function (v) {\n        if (!arguments.length) return handleDisconnected;\n        handleDisconnected = v;\n        return adaptor;\n    }\n\n\n    /**\n     * causes constraints to be generated such that directed graphs are laid out either from left-to-right or top-to-bottom.\n     * a separation constraint is generated in the selected axis for each edge that is not involved in a cycle (part of a strongly connected component)\n     * @param axis {string} &#39;x&#39; for left-to-right, &#39;y&#39; for top-to-bottom\n     * @param minSeparation {number|link=&gt;number} either a number specifying a minimum spacing required across all links or a function to return the minimum spacing for each link\n     */\n    adaptor.flowLayout = function (axis, minSeparation) {\n        if (!arguments.length) axis = &#39;y&#39;;\n        directedLinkConstraints = {\n            axis: axis,\n            getMinSeparation: typeof minSeparation === &#39;number&#39; ?  function () { return minSeparation } : minSeparation\n        };\n        return adaptor;\n    }\n\n    /**\n     * links defined as source, target pairs over nodes\n     * @property links {array}\n     * @default empty list\n     */\n    adaptor.links = function (x) {\n        if (!arguments.length) return links;\n        links = x;\n        return adaptor;\n    };\n\n    /**\n     * list of constraints of various types\n     * @property constraints\n     * @type {array} \n     * @default empty list\n     */\n    adaptor.constraints = function (c) {\n        if (!arguments.length) return constraints;\n        constraints = c;\n        return adaptor;\n    }\n\n    /**\n     * Matrix of ideal distances between all pairs of nodes.\n     * If unspecified, the ideal distances for pairs of nodes will be based on the shortest path distance between them.\n     * @property distanceMatrix\n     * @type {Array of Array of Number}\n     * @default null\n     */\n    adaptor.distanceMatrix = function (d) {\n        if (!arguments.length) return distanceMatrix;\n        distanceMatrix = d;\n        return adaptor;\n    }\n\n    /**\n     * Size of the layout canvas dimensions [x,y]. Currently only used to determine the midpoint which is taken as the starting position\n     * for nodes with no preassigned x and y.\n     * @property size\n     * @type {Array of Number}\n     */\n    adaptor.size = function (x) {\n        if (!arguments.length) return size;\n        size = x;\n        return adaptor;\n    };\n\n    /**\n     * Default size (assume nodes are square so both width and height) to use in packing if node width/height are not specified.\n     * @property defaultNodeSize\n     * @type {Number}\n     */\n    adaptor.defaultNodeSize = function (x) {\n        if (!arguments.length) return defaultNodeSize;\n        defaultNodeSize = x;\n        return adaptor;\n    };\n\n    adaptor.linkDistance = function (x) {\n        if (!arguments.length) \n            return typeof linkDistance === \&quot;function\&quot; ? linkDistance() : linkDistance;\n        linkDistance = typeof x === \&quot;function\&quot; ? x : +x;\n        return adaptor;\n    };\n\n    adaptor.linkType = function (f) {\n        linkType = f;\n        return adaptor;\n    }\n\n    adaptor.convergenceThreshold = function (x) {\n        if (!arguments.length) return threshold;\n        threshold = typeof x === \&quot;function\&quot; ? x : +x;\n        return adaptor;\n    };\n\n    adaptor.alpha = function (x) {\n        if (!arguments.length) return alpha;\n\n        x = +x;\n        if (alpha) { // if we&#39;re already running\n            if (x &gt; 0) alpha = x; // we might keep it hot\n            else alpha = 0; // or, next tick will dispatch \&quot;end\&quot;\n        } else if (x &gt; 0) { // otherwise, fire it up!\n            if (!running) {\n                running = true;\n                trigger({ type: \&quot;start\&quot;, alpha: alpha = x });\n                kick( adaptor.tick );\n            }\n        }\n        return adaptor;\n    };\n\n    function getLinkLength(link) {\n        return typeof linkDistance === \&quot;function\&quot; ? +linkDistance.call(null, link) : linkDistance;\n    }\n\n    function setLinkLength(link, length) {\n        link.length = length;\n    }\n\n    function getLinkType(link) {\n        return typeof linkType === \&quot;function\&quot; ? linkType(link) : 0;\n    }\n\n    var linkAccessor = { getSourceIndex: getSourceIndex, getTargetIndex: getTargetIndex, setLength: setLinkLength, getType: getLinkType };\n\n    adaptor.symmetricDiffLinkLengths = function (idealLength, w) {\n        symmetricDiffLinkLengths(links, linkAccessor, w);\n        this.linkDistance(function (l) { return idealLength * l.length });\n        return adaptor;\n    }\n\n    adaptor.jaccardLinkLengths = function (idealLength, w) {\n        jaccardLinkLengths(links, linkAccessor, w);\n        this.linkDistance(function (l) { return idealLength * l.length });\n        return adaptor;\n    }\n\n    /**\n     * start the layout process\n     * @method start\n     * @param {number} [initialUnconstrainedIterations=0] unconstrained initial layout iterations \n     * @param {number} [initialUserConstraintIterations=0] initial layout iterations with user-specified constraints\n     * @param {number} [initialAllConstraintsIterations=0] initial layout iterations with all constraints including non-overlap\n     */\n    adaptor.start = function () {\n        var i,\n            j,\n            n = this.nodes().length,\n            N = n + 2 * groups.length,\n            m = links.length,\n            w = size[0],\n            h = size[1];\n\n        var x = new Array(N), y = new Array(N);\n        variables = new Array(N);\n\n        var makeVariable = function (i, w) {\n            var v = variables[i] = new vpsc.Variable(0, w);\n            v.index = i;\n            return v;\n        }\n\n        var G = null;\n\n        var ao = this.avoidOverlaps();\n\n        nodes.forEach(function (v, i) {\n            v.index = i;\n            if (typeof v.x === &#39;undefined&#39;) {\n                v.x = w / 2, v.y = h / 2;\n            }\n            x[i] = v.x, y[i] = v.y;\n        });\n\n        var distances;\n        if (distanceMatrix) {\n            // use the user specified distanceMatrix\n            distances = distanceMatrix;\n        } else {\n            // construct an n X n distance matrix based on shortest paths through graph (with respect to edge.length).\n            distances = (new shortestpaths.Calculator(N, links, getSourceIndex, getTargetIndex, getLinkLength)).DistanceMatrix();\n\n            // G is a square matrix with G[i][j] = 1 iff there exists an edge between node i and node j\n            // otherwise 2. (\n            G = Descent.createSquareMatrix(N, function () { return 2 });\n            links.forEach(function (e) {\n                var u = getSourceIndex(e), v = getTargetIndex(e);\n                G[u][v] = G[v][u] = 1;\n            });\n        }\n\n        var D = Descent.createSquareMatrix(N, function (i, j) {\n            return distances[i][j];\n        });\n\n        if (rootGroup &amp;&amp; typeof rootGroup.groups !== &#39;undefined&#39;) {\n            var i = n;\n            groups.forEach(function(g) {\n                G[i][i + 1] = G[i + 1][i] = 1e-6;\n                D[i][i + 1] = D[i + 1][i] = 0.1;\n                x[i] = 0, y[i++] = 0;\n                x[i] = 0, y[i++] = 0;\n            });\n        } else rootGroup = { leaves: nodes, groups: [] };\n\n        var curConstraints = constraints || [];\n        if (directedLinkConstraints) {\n            linkAccessor.getMinSeparation = directedLinkConstraints.getMinSeparation;\n            curConstraints = curConstraints.concat(generateDirectedEdgeConstraints(n, links, directedLinkConstraints.axis, linkAccessor));\n        }\n        \n        var initialUnconstrainedIterations = arguments.length &gt; 0 ? arguments[0] : 0;\n        var initialUserConstraintIterations = arguments.length &gt; 1 ? arguments[1] : 0;\n        var initialAllConstraintsIterations = arguments.length &gt; 2 ? arguments[2] : 0;\n        this.avoidOverlaps(false);\n        descent = new Descent([x, y], D);\n\n        descent.locks.clear();\n        for (i = 0; i &lt; n; ++i) {\n            o = nodes[i];\n            if (o.fixed) {\n                o.px = o.x;\n                o.py = o.y;\n                var p = [o.x, o.y];\n                descent.locks.add(i, p);\n            }\n        }\n        descent.threshold = threshold;\n\n        // apply initialIterations without user constraints or nonoverlap constraints\n        descent.run(initialUnconstrainedIterations);\n\n        // apply initialIterations with user constraints but no noverlap constraints\n        if (curConstraints.length &gt; 0) descent.project = new Projection(nodes, groups, rootGroup, curConstraints).projectFunctions();\n        descent.run(initialUserConstraintIterations);\n\n        // subsequent iterations will apply all constraints\n        this.avoidOverlaps(ao);\n        if (ao) {\n            nodes.forEach(function (v, i) { v.x = x[i], v.y = y[i]; });\n            descent.project = new Projection(nodes, groups, rootGroup, curConstraints, true).projectFunctions();\n            nodes.forEach(function (v, i) { x[i] = v.x, y[i] = v.y; });\n        }\n\n        // allow not immediately connected nodes to relax apart (p-stress)\n        descent.G = G;\n        descent.run(initialAllConstraintsIterations);\n\n        links.forEach(function (l) {\n            if (typeof l.source == \&quot;number\&quot;) l.source = nodes[l.source];\n            if (typeof l.target == \&quot;number\&quot;) l.target = nodes[l.target];\n        });\n        nodes.forEach(function (v, i) {\n            v.x = x[i], v.y = y[i];\n        });\n\n        // recalculate nodes position for disconnected graphs\n        if (!distanceMatrix &amp;&amp; handleDisconnected) {\n            applyPacking(separateGraphs(nodes, links), w, h, defaultNodeSize);\n\n            nodes.forEach(function (v, i) {\n                descent.x[0][i] = v.x, descent.x[1][i] = v.y;\n            });\n        }\n        \n        return adaptor.resume();\n    };\n\n    adaptor.resume = function () {\n        return adaptor.alpha(.1);\n    };\n\n    adaptor.stop = function () {\n        return adaptor.alpha(0);\n    };\n\n    adaptor.prepareEdgeRouting = function (nodeMargin) {\n        visibilityGraph = new geom.TangentVisibilityGraph(\n                nodes.map(function (v) {\n                    return v.bounds.inflate(-nodeMargin).vertices();\n                }));\n    }\n\n    adaptor.routeEdge = function(d, draw) {\n        var lineData = [];\n        //if (d.source.id === 10 &amp;&amp; d.target.id === 11) {\n        //    debugger;\n        //}\n        var vg2 = new geom.TangentVisibilityGraph(visibilityGraph.P, { V: visibilityGraph.V, E: visibilityGraph.E }),\n            port1 = { x: d.source.x, y: d.source.y },\n            port2 = { x: d.target.x, y: d.target.y },\n            start = vg2.addPoint(port1, d.source.id),\n            end = vg2.addPoint(port2, d.target.id);\n        vg2.addEdgeIfVisible(port1, port2, d.source.id, d.target.id);\n        if (typeof draw !== &#39;undefined&#39;) {\n            draw(vg2);\n        }\n        var sourceInd = function(e) { return e.source.id }, targetInd = function(e) { return e.target.id }, length = function(e) { return e.length() }, \n            spCalc = new shortestpaths.Calculator(vg2.V.length, vg2.E, sourceInd, targetInd, length),\n            shortestPath = spCalc.PathFromNodeToNode(start.id, end.id);\n        if (shortestPath.length === 1 || shortestPath.length === vg2.V.length) {\n            vpsc.makeEdgeBetween(d, d.source.innerBounds, d.target.innerBounds, 5);\n            lineData = [{ x: d.sourceIntersection.x, y: d.sourceIntersection.y }, { x: d.arrowStart.x, y: d.arrowStart.y }];\n        } else {\n            var n = shortestPath.length - 2,\n                p = vg2.V[shortestPath[n]].p,\n                q = vg2.V[shortestPath[0]].p,\n                lineData = [d.source.innerBounds.rayIntersection(p.x, p.y)];\n            for (var i = n; i &gt;= 0; --i) \n                lineData.push(vg2.V[shortestPath[i]].p);\n            lineData.push(vpsc.makeEdgeTo(q, d.target.innerBounds, 5));\n        }\n        //lineData.forEach(function (v, i) {\n        //    if (i &gt; 0) {\n        //        var u = lineData[i - 1];\n        //        nodes.forEach(function (node) {\n        //            if (node.id === getSourceIndex(d) || node.id === getTargetIndex(d)) return;\n        //            var ints = node.innerBounds.lineIntersections(u.x, u.y, v.x, v.y);\n        //            if (ints.length &gt; 0) {\n        //                debugger;\n        //            }\n        //        })\n        //    }\n        //})\n        return lineData;\n    }\n\n    //The link source and target may be just a node index, or they may be references to nodes themselves.\n    function getSourceIndex(e) {\n        return typeof e.source === &#39;number&#39; ? e.source : e.source.index;\n    }\n\n    //The link source and target may be just a node index, or they may be references to nodes themselves.\n    function getTargetIndex(e) {\n        return typeof e.target === &#39;number&#39; ? e.target : e.target.index;\n    }\n    // Get a string ID for a given link.\n    adaptor.linkId = function (e) {\n        return getSourceIndex(e) + \&quot;-\&quot; + getTargetIndex(e);\n    }\n\n    return adaptor;\n};\n\n// The fixed property has three bits:\n// Bit 1 can be set externally (e.g., d.fixed = true) and show persist.\n// Bit 2 stores the dragging state, from mousedown to mouseup.\n// Bit 3 stores the hover state, from mouseover to mouseout.\n// Dragend is a special case: it also clears the hover state.\n\n\nfunction colaMouseover(d) {\nd.fixed |= 4; // set bit 3\nd.px = d.x, d.py = d.y; // set velocity to zero\n}\n\nfunction colaMouseout(d) {\nd.fixed &amp;= ~4; // unset bit 3\n}\n\nmodule.exports = adaptor;&quot;,&quot;var d3 = require(&#39;d3&#39;);\n\nvar Adaptor = require(&#39;./adaptor&#39;);\nvar dragHelper = require(&#39;./drag&#39;);\n\nmodule.exports = function () {\n  var event = d3.dispatch(\&quot;start\&quot;, \&quot;tick\&quot;, \&quot;end\&quot;);\n\n  var adaptor  = Adaptor({\n    trigger: function (e) {\n        event[e.type](e); // via d3 dispatcher, e.g. event.start(e);\n    },\n\n    on: function(type, listener){\n        return event.on(type, listener);\n    },\n\n    kick: function (tick) {\n        d3.timer(tick);\n    },\n\n    // use `node.call(adaptor.drag)` to make nodes draggable\n    drag: function () {\n        var drag = d3.behavior.drag()\n            .origin(function(d){ return d; })\n            .on(\&quot;dragstart.d3adaptor\&quot;, dragHelper.dragstart)\n            .on(\&quot;drag.d3adaptor\&quot;, function (d) {\n                d.px = d3.event.x, d.py = d3.event.y;\n                adaptor.resume(); // restart annealing\n            })\n            .on(\&quot;dragend.d3adaptor\&quot;, dragHelper.dragend);\n\n        if (!arguments.length) return drag;\n\n        this//.on(\&quot;mouseover.adaptor\&quot;, colaMouseover)\n            //.on(\&quot;mouseout.adaptor\&quot;, colaMouseout)\n            .call(drag);\n    }\n  });\n\n  return adaptor;\n}\n\n&quot;,&quot;var PseudoRandom = require(&#39;./pseudo-random&#39;);\nvar Locks = require(&#39;./locks&#39;);\nvar PseudoRandom = PseudoRandom.PseudoRandom;\nvar Locks = Locks.Locks;\nvar Descent = (function () {\n    /**\n     * @method constructor\n     * @param x {number[][]} initial coordinates for nodes\n     * @param D {number[][]} matrix of desired distances between pairs of nodes\n     * @param G {number[][]} [default=null] if specified, G is a matrix of weights for goal terms between pairs of nodes.\n     * If G[i][j] &gt; 1 and the separation between nodes i and j is greater than their ideal distance, then there is no contribution for this pair to the goal\n     * If G[i][j] &lt;= 1 then it is used as a weighting on the contribution of the variance between ideal and actual separation between i and j to the goal function\n     */\n    function Descent(x, D, G) {\n        if (G === void 0) { G = null; }\n        this.D = D;\n        this.G = G;\n        this.threshold = 0.0001;\n        this.random = new PseudoRandom();\n        this.project = null;\n        this.x = x;\n        this.k = x.length; // dimensionality\n        var n = this.n = x[0].length; // number of nodes\n        this.H = new Array(this.k);\n        this.g = new Array(this.k);\n        this.Hd = new Array(this.k);\n        this.a = new Array(this.k);\n        this.b = new Array(this.k);\n        this.c = new Array(this.k);\n        this.d = new Array(this.k);\n        this.e = new Array(this.k);\n        this.ia = new Array(this.k);\n        this.ib = new Array(this.k);\n        this.xtmp = new Array(this.k);\n        this.locks = new Locks();\n        this.minD = Number.MAX_VALUE;\n        var i = n, j;\n        while (i--) {\n            j = n;\n            while (--j &gt; i) {\n                var d = D[i][j];\n                if (d &gt; 0 &amp;&amp; d &lt; this.minD) {\n                    this.minD = d;\n                }\n            }\n        }\n        if (this.minD === Number.MAX_VALUE)\n            this.minD = 1;\n        i = this.k;\n        while (i--) {\n            this.g[i] = new Array(n);\n            this.H[i] = new Array(n);\n            j = n;\n            while (j--) {\n                this.H[i][j] = new Array(n);\n            }\n            this.Hd[i] = new Array(n);\n            this.a[i] = new Array(n);\n            this.b[i] = new Array(n);\n            this.c[i] = new Array(n);\n            this.d[i] = new Array(n);\n            this.e[i] = new Array(n);\n            this.ia[i] = new Array(n);\n            this.ib[i] = new Array(n);\n            this.xtmp[i] = new Array(n);\n        }\n    }\n    Descent.createSquareMatrix = function (n, f) {\n        var M = new Array(n);\n        for (var i = 0; i &lt; n; ++i) {\n            M[i] = new Array(n);\n            for (var j = 0; j &lt; n; ++j) {\n                M[i][j] = f(i, j);\n            }\n        }\n        return M;\n    };\n    Descent.prototype.offsetDir = function () {\n        var _this = this;\n        var u = new Array(this.k);\n        var l = 0;\n        for (var i = 0; i &lt; this.k; ++i) {\n            var x = u[i] = this.random.getNextBetween(0.01, 1) - 0.5;\n            l += x * x;\n        }\n        l = Math.sqrt(l);\n        return u.map(function (x) { return x *= _this.minD / l; });\n    };\n    // compute first and second derivative information storing results in this.g and this.H\n    Descent.prototype.computeDerivatives = function (x) {\n        var _this = this;\n        var n = this.n;\n        if (n &lt; 1)\n            return;\n        var i;\n        /* DEBUG\n                for (var u: number = 0; u &lt; n; ++u)\n                    for (i = 0; i &lt; this.k; ++i)\n                        if (isNaN(x[i][u])) debugger;\n        DEBUG */\n        var d = new Array(this.k);\n        var d2 = new Array(this.k);\n        var Huu = new Array(this.k);\n        var maxH = 0;\n        for (var u = 0; u &lt; n; ++u) {\n            for (i = 0; i &lt; this.k; ++i)\n                Huu[i] = this.g[i][u] = 0;\n            for (var v = 0; v &lt; n; ++v) {\n                if (u === v)\n                    continue;\n                while (true) {\n                    var sd2 = 0;\n                    for (i = 0; i &lt; this.k; ++i) {\n                        var dx = d[i] = x[i][u] - x[i][v];\n                        sd2 += d2[i] = dx * dx;\n                    }\n                    if (sd2 &gt; 1e-9)\n                        break;\n                    var rd = this.offsetDir();\n                    for (i = 0; i &lt; this.k; ++i)\n                        x[i][v] += rd[i];\n                }\n                var l = Math.sqrt(sd2);\n                var D = this.D[u][v];\n                var weight = this.G != null ? this.G[u][v] : 1;\n                if (weight &gt; 1 &amp;&amp; l &gt; D || !isFinite(D)) {\n                    for (i = 0; i &lt; this.k; ++i)\n                        this.H[i][u][v] = 0;\n                    continue;\n                }\n                if (weight &gt; 1) {\n                    weight = 1;\n                }\n                var D2 = D * D;\n                var gs = weight * (l - D) / (D2 * l);\n                var hs = -weight / (D2 * l * l * l);\n                if (!isFinite(gs))\n                    console.log(gs);\n                for (i = 0; i &lt; this.k; ++i) {\n                    this.g[i][u] += d[i] * gs;\n                    Huu[i] -= this.H[i][u][v] = hs * (D * (d2[i] - sd2) + l * sd2);\n                }\n            }\n            for (i = 0; i &lt; this.k; ++i)\n                maxH = Math.max(maxH, this.H[i][u][u] = Huu[i]);\n        }\n        if (!this.locks.isEmpty()) {\n            this.locks.apply(function (u, p) {\n                for (i = 0; i &lt; _this.k; ++i) {\n                    _this.H[i][u][u] += maxH;\n                    _this.g[i][u] -= maxH * (p[i] - x[i][u]);\n                }\n            });\n        }\n        /* DEBUG\n                for (var u: number = 0; u &lt; n; ++u)\n                    for (i = 0; i &lt; this.k; ++i) {\n                        if (isNaN(this.g[i][u])) debugger;\n                        for (var v: number = 0; v &lt; n; ++v)\n                            if (isNaN(this.H[i][u][v])) debugger;\n                    }\n        DEBUG */\n    };\n    Descent.dotProd = function (a, b) {\n        var x = 0, i = a.length;\n        while (i--)\n            x += a[i] * b[i];\n        return x;\n    };\n    // result r = matrix m * vector v\n    Descent.rightMultiply = function (m, v, r) {\n        var i = m.length;\n        while (i--)\n            r[i] = Descent.dotProd(m[i], v);\n    };\n    // computes the optimal step size to take in direction d using the\n    // derivative information in this.g and this.H\n    // returns the scalar multiplier to apply to d to get the optimal step\n    Descent.prototype.computeStepSize = function (d) {\n        var numerator = 0, denominator = 0;\n        for (var i = 0; i &lt; 2; ++i) {\n            numerator += Descent.dotProd(this.g[i], d[i]);\n            Descent.rightMultiply(this.H[i], d[i], this.Hd[i]);\n            denominator += Descent.dotProd(d[i], this.Hd[i]);\n        }\n        if (denominator === 0 || !isFinite(denominator))\n            return 0;\n        return numerator / denominator;\n    };\n    Descent.prototype.reduceStress = function () {\n        this.computeDerivatives(this.x);\n        var alpha = this.computeStepSize(this.g);\n        for (var i = 0; i &lt; this.k; ++i) {\n            this.takeDescentStep(this.x[i], this.g[i], alpha);\n        }\n        return this.computeStress();\n    };\n    Descent.copy = function (a, b) {\n        var m = a.length, n = b[0].length;\n        for (var i = 0; i &lt; m; ++i) {\n            for (var j = 0; j &lt; n; ++j) {\n                b[i][j] = a[i][j];\n            }\n        }\n    };\n    // takes a step of stepSize * d from x0, and then project against any constraints.\n    // result is returned in r.\n    // x0: starting positions\n    // r: result positions will be returned here\n    // d: unconstrained descent vector\n    // stepSize: amount to step along d\n    Descent.prototype.stepAndProject = function (x0, r, d, stepSize) {\n        Descent.copy(x0, r);\n        this.takeDescentStep(r[0], d[0], stepSize);\n        if (this.project)\n            this.project[0](x0[0], x0[1], r[0]);\n        this.takeDescentStep(r[1], d[1], stepSize);\n        if (this.project)\n            this.project[1](r[0], x0[1], r[1]);\n    };\n    Descent.mApply = function (m, n, f) {\n        var i = m;\n        while (i-- &gt; 0) {\n            var j = n;\n            while (j-- &gt; 0)\n                f(i, j);\n        }\n    };\n    Descent.prototype.matrixApply = function (f) {\n        Descent.mApply(this.k, this.n, f);\n    };\n    Descent.prototype.computeNextPosition = function (x0, r) {\n        var _this = this;\n        this.computeDerivatives(x0);\n        var alpha = this.computeStepSize(this.g);\n        this.stepAndProject(x0, r, this.g, alpha);\n        for (var u = 0; u &lt; this.n; ++u)\n            for (var i = 0; i &lt; this.k; ++i)\n                if (isNaN(r[i][u]))\n                    debugger;\n        if (this.project) {\n            this.matrixApply(function (i, j) { return _this.e[i][j] = x0[i][j] - r[i][j]; });\n            var beta = this.computeStepSize(this.e);\n            beta = Math.max(0.2, Math.min(beta, 1));\n            this.stepAndProject(x0, r, this.e, beta);\n        }\n    };\n    Descent.prototype.run = function (iterations) {\n        var stress = Number.MAX_VALUE, converged = false;\n        while (!converged &amp;&amp; iterations-- &gt; 0) {\n            var s = this.rungeKutta();\n            converged = Math.abs(stress / s - 1) &lt; this.threshold;\n            stress = s;\n        }\n        return stress;\n    };\n    Descent.prototype.rungeKutta = function () {\n        var _this = this;\n        this.computeNextPosition(this.x, this.a);\n        Descent.mid(this.x, this.a, this.ia);\n        this.computeNextPosition(this.ia, this.b);\n        Descent.mid(this.x, this.b, this.ib);\n        this.computeNextPosition(this.ib, this.c);\n        this.computeNextPosition(this.c, this.d);\n        var disp = 0;\n        this.matrixApply(function (i, j) {\n            var x = (_this.a[i][j] + 2.0 * _this.b[i][j] + 2.0 * _this.c[i][j] + _this.d[i][j]) / 6.0, d = _this.x[i][j] - x;\n            disp += d * d;\n            _this.x[i][j] = x;\n        });\n        return disp;\n    };\n    Descent.mid = function (a, b, m) {\n        Descent.mApply(a.length, a[0].length, function (i, j) { return m[i][j] = a[i][j] + (b[i][j] - a[i][j]) / 2.0; });\n    };\n    Descent.prototype.takeDescentStep = function (x, d, stepSize) {\n        for (var i = 0; i &lt; this.n; ++i) {\n            x[i] = x[i] - stepSize * d[i];\n        }\n    };\n    Descent.prototype.computeStress = function () {\n        var stress = 0;\n        for (var u = 0, nMinus1 = this.n - 1; u &lt; nMinus1; ++u) {\n            for (var v = u + 1, n = this.n; v &lt; n; ++v) {\n                var l = 0;\n                for (var i = 0; i &lt; this.k; ++i) {\n                    var dx = this.x[i][u] - this.x[i][v];\n                    l += dx * dx;\n                }\n                l = Math.sqrt(l);\n                var d = this.D[u][v];\n                if (!isFinite(d))\n                    continue;\n                var rl = d - l;\n                var d2 = d * d;\n                stress += rl * rl / d2;\n            }\n        }\n        return stress;\n    };\n    Descent.zeroDistance = 1e-10;\n    return Descent;\n})();\nexports.Descent = Descent;\n&quot;,&quot;module.exports = {\n\tdragstart: function (d) {\n    d.fixed |= 2; // set bit 2\n    d.px = d.x, d.py = d.y; // set velocity to zero\n  },\n\n  dragend: function (d) {\n    d.fixed &amp;= ~6; // unset bits 2 and 3\n    //d.fixed = 0;\n  }\n};&quot;,&quot;var __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar Rectangle = require(&#39;./rectangle&#39;);\nvar Rectangle = Rectangle.Rectangle;\nvar Point = (function () {\n    function Point() {\n    }\n    return Point;\n})();\nexports.Point = Point;\nvar LineSegment = (function () {\n    function LineSegment(x1, y1, x2, y2) {\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n    }\n    return LineSegment;\n})();\nexports.LineSegment = LineSegment;\nvar PolyPoint = (function (_super) {\n    __extends(PolyPoint, _super);\n    function PolyPoint() {\n        _super.apply(this, arguments);\n    }\n    return PolyPoint;\n})(Point);\nexports.PolyPoint = PolyPoint;\n/** tests if a point is Left|On|Right of an infinite line.\n * @param points P0, P1, and P2\n * @return &gt;0 for P2 left of the line through P0 and P1\n *            =0 for P2 on the line\n *            &lt;0 for P2 right of the line\n */\nfunction isLeft(P0, P1, P2) {\n    return (P1.x - P0.x) * (P2.y - P0.y) - (P2.x - P0.x) * (P1.y - P0.y);\n}\nexports.isLeft = isLeft;\nfunction above(p, vi, vj) {\n    return isLeft(p, vi, vj) &gt; 0;\n}\nfunction below(p, vi, vj) {\n    return isLeft(p, vi, vj) &lt; 0;\n}\n/**\n * returns the convex hull of a set of points using Andrew&#39;s monotone chain algorithm\n * see: http://geomalgorithms.com/a10-_hull-1.html#Monotone%20Chain\n * @param S array of points\n * @return the convex hull as an array of points\n */\nfunction ConvexHull(S) {\n    var P = S.slice(0).sort(function (a, b) { return a.x !== b.x ? b.x - a.x : b.y - a.y; });\n    var n = S.length, i;\n    var minmin = 0;\n    var xmin = P[0].x;\n    for (i = 1; i &lt; n; ++i) {\n        if (P[i].x !== xmin)\n            break;\n    }\n    var minmax = i - 1;\n    var H = [];\n    H.push(P[minmin]); // push minmin point onto stack\n    if (minmax === n - 1) {\n        if (P[minmax].y !== P[minmin].y)\n            H.push(P[minmax]);\n    }\n    else {\n        // Get the indices of points with max x-coord and min|max y-coord\n        var maxmin, maxmax = n - 1;\n        var xmax = P[n - 1].x;\n        for (i = n - 2; i &gt;= 0; i--)\n            if (P[i].x !== xmax)\n                break;\n        maxmin = i + 1;\n        // Compute the lower hull on the stack H\n        i = minmax;\n        while (++i &lt;= maxmin) {\n            // the lower line joins P[minmin]  with P[maxmin]\n            if (isLeft(P[minmin], P[maxmin], P[i]) &gt;= 0 &amp;&amp; i &lt; maxmin)\n                continue; // ignore P[i] above or on the lower line\n            while (H.length &gt; 1) {\n                // test if  P[i] is left of the line at the stack top\n                if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) &gt; 0)\n                    break;\n                else\n                    H.length -= 1; // pop top point off  stack\n            }\n            if (i != minmin)\n                H.push(P[i]);\n        }\n        // Next, compute the upper hull on the stack H above the bottom hull\n        if (maxmax != maxmin)\n            H.push(P[maxmax]); // push maxmax point onto stack\n        var bot = H.length; // the bottom point of the upper hull stack\n        i = maxmin;\n        while (--i &gt;= minmax) {\n            // the upper line joins P[maxmax]  with P[minmax]\n            if (isLeft(P[maxmax], P[minmax], P[i]) &gt;= 0 &amp;&amp; i &gt; minmax)\n                continue; // ignore P[i] below or on the upper line\n            while (H.length &gt; bot) {\n                // test if  P[i] is left of the line at the stack top\n                if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) &gt; 0)\n                    break;\n                else\n                    H.length -= 1; // pop top point off  stack\n            }\n            if (i != minmin)\n                H.push(P[i]); // push P[i] onto stack\n        }\n    }\n    return H;\n}\nexports.ConvexHull = ConvexHull;\n// apply f to the points in P in clockwise order around the point p\nfunction clockwiseRadialSweep(p, P, f) {\n    P.slice(0).sort(function (a, b) { return Math.atan2(a.y - p.y, a.x - p.x) - Math.atan2(b.y - p.y, b.x - p.x); }).forEach(f);\n}\nexports.clockwiseRadialSweep = clockwiseRadialSweep;\nfunction nextPolyPoint(p, ps) {\n    if (p.polyIndex === ps.length - 1)\n        return ps[0];\n    return ps[p.polyIndex + 1];\n}\nfunction prevPolyPoint(p, ps) {\n    if (p.polyIndex === 0)\n        return ps[ps.length - 1];\n    return ps[p.polyIndex - 1];\n}\n// tangent_PointPolyC(): fast binary search for tangents to a convex polygon\n//    Input:  P = a 2D point (exterior to the polygon)\n//            n = number of polygon vertices\n//            V = array of vertices for a 2D convex polygon with V[n] = V[0]\n//    Output: rtan = index of rightmost tangent point V[rtan]\n//            ltan = index of leftmost tangent point V[ltan]\nfunction tangent_PointPolyC(P, V) {\n    return { rtan: Rtangent_PointPolyC(P, V), ltan: Ltangent_PointPolyC(P, V) };\n}\n// Rtangent_PointPolyC(): binary search for convex polygon right tangent\n//    Input:  P = a 2D point (exterior to the polygon)\n//            n = number of polygon vertices\n//            V = array of vertices for a 2D convex polygon with V[n] = V[0]\n//    Return: index \&quot;i\&quot; of rightmost tangent point V[i]\nfunction Rtangent_PointPolyC(P, V) {\n    var n = V.length - 1;\n    // use binary search for large convex polygons\n    var a, b, c; // indices for edge chain endpoints\n    var upA, dnC; // test for up direction of edges a and c\n    // rightmost tangent = maximum for the isLeft() ordering\n    // test if V[0] is a local maximum\n    if (below(P, V[1], V[0]) &amp;&amp; !above(P, V[n - 1], V[0]))\n        return 0; // V[0] is the maximum tangent point\n    for (a = 0, b = n;;) {\n        if (b - a === 1)\n            if (above(P, V[a], V[b]))\n                return a;\n            else\n                return b;\n        c = Math.floor((a + b) / 2); // midpoint of [a,b], and 0&lt;c&lt;n\n        dnC = below(P, V[c + 1], V[c]);\n        if (dnC &amp;&amp; !above(P, V[c - 1], V[c]))\n            return c; // V[c] is the maximum tangent point\n        // no max yet, so continue with the binary search\n        // pick one of the two subchains [a,c] or [c,b]\n        upA = above(P, V[a + 1], V[a]);\n        if (upA) {\n            if (dnC)\n                b = c; // select [a,c]\n            else {\n                if (above(P, V[a], V[c]))\n                    b = c; // select [a,c]\n                else\n                    a = c; // select [c,b]\n            }\n        }\n        else {\n            if (!dnC)\n                a = c; // select [c,b]\n            else {\n                if (below(P, V[a], V[c]))\n                    b = c; // select [a,c]\n                else\n                    a = c; // select [c,b]\n            }\n        }\n    }\n}\n// Ltangent_PointPolyC(): binary search for convex polygon left tangent\n//    Input:  P = a 2D point (exterior to the polygon)\n//            n = number of polygon vertices\n//            V = array of vertices for a 2D convex polygon with V[n]=V[0]\n//    Return: index \&quot;i\&quot; of leftmost tangent point V[i]\nfunction Ltangent_PointPolyC(P, V) {\n    var n = V.length - 1;\n    // use binary search for large convex polygons\n    var a, b, c; // indices for edge chain endpoints\n    var dnA, dnC; // test for down direction of edges a and c\n    // leftmost tangent = minimum for the isLeft() ordering\n    // test if V[0] is a local minimum\n    if (above(P, V[n - 1], V[0]) &amp;&amp; !below(P, V[1], V[0]))\n        return 0; // V[0] is the minimum tangent point\n    for (a = 0, b = n;;) {\n        if (b - a === 1)\n            if (below(P, V[a], V[b]))\n                return a;\n            else\n                return b;\n        c = Math.floor((a + b) / 2); // midpoint of [a,b], and 0&lt;c&lt;n\n        dnC = below(P, V[c + 1], V[c]);\n        if (above(P, V[c - 1], V[c]) &amp;&amp; !dnC)\n            return c; // V[c] is the minimum tangent point\n        // no min yet, so continue with the binary search\n        // pick one of the two subchains [a,c] or [c,b]\n        dnA = below(P, V[a + 1], V[a]);\n        if (dnA) {\n            if (!dnC)\n                b = c; // select [a,c]\n            else {\n                if (below(P, V[a], V[c]))\n                    b = c; // select [a,c]\n                else\n                    a = c; // select [c,b]\n            }\n        }\n        else {\n            if (dnC)\n                a = c; // select [c,b]\n            else {\n                if (above(P, V[a], V[c]))\n                    b = c; // select [a,c]\n                else\n                    a = c; // select [c,b]\n            }\n        }\n    }\n}\n// RLtangent_PolyPolyC(): get the RL tangent between two convex polygons\n//    Input:  m = number of vertices in polygon 1\n//            V = array of vertices for convex polygon 1 with V[m]=V[0]\n//            n = number of vertices in polygon 2\n//            W = array of vertices for convex polygon 2 with W[n]=W[0]\n//    Output: *t1 = index of tangent point V[t1] for polygon 1\n//            *t2 = index of tangent point W[t2] for polygon 2\nfunction tangent_PolyPolyC(V, W, t1, t2, cmp1, cmp2) {\n    var ix1, ix2; // search indices for polygons 1 and 2\n    // first get the initial vertex on each polygon\n    ix1 = t1(W[0], V); // right tangent from W[0] to V\n    ix2 = t2(V[ix1], W); // left tangent from V[ix1] to W\n    // ping-pong linear search until it stabilizes\n    var done = false; // flag when done\n    while (!done) {\n        done = true; // assume done until...\n        while (true) {\n            if (ix1 === V.length - 1)\n                ix1 = 0;\n            if (cmp1(W[ix2], V[ix1], V[ix1 + 1]))\n                break;\n            ++ix1; // get Rtangent from W[ix2] to V\n        }\n        while (true) {\n            if (ix2 === 0)\n                ix2 = W.length - 1;\n            if (cmp2(V[ix1], W[ix2], W[ix2 - 1]))\n                break;\n            --ix2; // get Ltangent from V[ix1] to W\n            done = false; // not done if had to adjust this\n        }\n    }\n    return { t1: ix1, t2: ix2 };\n}\nexports.tangent_PolyPolyC = tangent_PolyPolyC;\nfunction LRtangent_PolyPolyC(V, W) {\n    var rl = RLtangent_PolyPolyC(W, V);\n    return { t1: rl.t2, t2: rl.t1 };\n}\nexports.LRtangent_PolyPolyC = LRtangent_PolyPolyC;\nfunction RLtangent_PolyPolyC(V, W) {\n    return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Ltangent_PointPolyC, above, below);\n}\nexports.RLtangent_PolyPolyC = RLtangent_PolyPolyC;\nfunction LLtangent_PolyPolyC(V, W) {\n    return tangent_PolyPolyC(V, W, Ltangent_PointPolyC, Ltangent_PointPolyC, below, below);\n}\nexports.LLtangent_PolyPolyC = LLtangent_PolyPolyC;\nfunction RRtangent_PolyPolyC(V, W) {\n    return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Rtangent_PointPolyC, above, above);\n}\nexports.RRtangent_PolyPolyC = RRtangent_PolyPolyC;\nvar BiTangent = (function () {\n    function BiTangent(t1, t2) {\n        this.t1 = t1;\n        this.t2 = t2;\n    }\n    return BiTangent;\n})();\nexports.BiTangent = BiTangent;\nvar BiTangents = (function () {\n    function BiTangents() {\n    }\n    return BiTangents;\n})();\nexports.BiTangents = BiTangents;\nvar TVGPoint = (function (_super) {\n    __extends(TVGPoint, _super);\n    function TVGPoint() {\n        _super.apply(this, arguments);\n    }\n    return TVGPoint;\n})(Point);\nexports.TVGPoint = TVGPoint;\nvar VisibilityVertex = (function () {\n    function VisibilityVertex(id, polyid, polyvertid, p) {\n        this.id = id;\n        this.polyid = polyid;\n        this.polyvertid = polyvertid;\n        this.p = p;\n        p.vv = this;\n    }\n    return VisibilityVertex;\n})();\nexports.VisibilityVertex = VisibilityVertex;\nvar VisibilityEdge = (function () {\n    function VisibilityEdge(source, target) {\n        this.source = source;\n        this.target = target;\n    }\n    VisibilityEdge.prototype.length = function () {\n        var dx = this.source.p.x - this.target.p.x;\n        var dy = this.source.p.y - this.target.p.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n    return VisibilityEdge;\n})();\nexports.VisibilityEdge = VisibilityEdge;\nvar TangentVisibilityGraph = (function () {\n    function TangentVisibilityGraph(P, g0) {\n        this.P = P;\n        this.V = [];\n        this.E = [];\n        if (!g0) {\n            var n = P.length;\n            for (var i = 0; i &lt; n; i++) {\n                var p = P[i];\n                for (var j = 0; j &lt; p.length; ++j) {\n                    var pj = p[j], vv = new VisibilityVertex(this.V.length, i, j, pj);\n                    this.V.push(vv);\n                    if (j &gt; 0)\n                        this.E.push(new VisibilityEdge(p[j - 1].vv, vv));\n                }\n            }\n            for (var i = 0; i &lt; n - 1; i++) {\n                var Pi = P[i];\n                for (var j = i + 1; j &lt; n; j++) {\n                    var Pj = P[j], t = tangents(Pi, Pj);\n                    for (var q in t) {\n                        var c = t[q], source = Pi[c.t1], target = Pj[c.t2];\n                        this.addEdgeIfVisible(source, target, i, j);\n                    }\n                }\n            }\n        }\n        else {\n            this.V = g0.V.slice(0);\n            this.E = g0.E.slice(0);\n        }\n    }\n    TangentVisibilityGraph.prototype.addEdgeIfVisible = function (u, v, i1, i2) {\n        if (!this.intersectsPolys(new LineSegment(u.x, u.y, v.x, v.y), i1, i2)) {\n            this.E.push(new VisibilityEdge(u.vv, v.vv));\n        }\n    };\n    TangentVisibilityGraph.prototype.addPoint = function (p, i1) {\n        var n = this.P.length;\n        this.V.push(new VisibilityVertex(this.V.length, n, 0, p));\n        for (var i = 0; i &lt; n; ++i) {\n            if (i === i1)\n                continue;\n            var poly = this.P[i], t = tangent_PointPolyC(p, poly);\n            this.addEdgeIfVisible(p, poly[t.ltan], i1, i);\n            this.addEdgeIfVisible(p, poly[t.rtan], i1, i);\n        }\n        return p.vv;\n    };\n    TangentVisibilityGraph.prototype.intersectsPolys = function (l, i1, i2) {\n        for (var i = 0, n = this.P.length; i &lt; n; ++i) {\n            if (i != i1 &amp;&amp; i != i2 &amp;&amp; intersects(l, this.P[i]).length &gt; 0) {\n                return true;\n            }\n        }\n        return false;\n    };\n    return TangentVisibilityGraph;\n})();\nexports.TangentVisibilityGraph = TangentVisibilityGraph;\nfunction intersects(l, P) {\n    var ints = [];\n    for (var i = 1, n = P.length; i &lt; n; ++i) {\n        var int = Rectangle.lineIntersection(l.x1, l.y1, l.x2, l.y2, P[i - 1].x, P[i - 1].y, P[i].x, P[i].y);\n        if (int)\n            ints.push(int);\n    }\n    return ints;\n}\nfunction tangents(V, W) {\n    var m = V.length - 1, n = W.length - 1;\n    var bt = new BiTangents();\n    for (var i = 0; i &lt; m; ++i) {\n        for (var j = 0; j &lt; n; ++j) {\n            var v1 = V[i == 0 ? m - 1 : i - 1];\n            var v2 = V[i];\n            var v3 = V[i + 1];\n            var w1 = W[j == 0 ? n - 1 : j - 1];\n            var w2 = W[j];\n            var w3 = W[j + 1];\n            var v1v2w2 = isLeft(v1, v2, w2);\n            var v2w1w2 = isLeft(v2, w1, w2);\n            var v2w2w3 = isLeft(v2, w2, w3);\n            var w1w2v2 = isLeft(w1, w2, v2);\n            var w2v1v2 = isLeft(w2, v1, v2);\n            var w2v2v3 = isLeft(w2, v2, v3);\n            if (v1v2w2 &gt;= 0 &amp;&amp; v2w1w2 &gt;= 0 &amp;&amp; v2w2w3 &lt; 0 &amp;&amp; w1w2v2 &gt;= 0 &amp;&amp; w2v1v2 &gt;= 0 &amp;&amp; w2v2v3 &lt; 0) {\n                bt.ll = new BiTangent(i, j);\n            }\n            else if (v1v2w2 &lt;= 0 &amp;&amp; v2w1w2 &lt;= 0 &amp;&amp; v2w2w3 &gt; 0 &amp;&amp; w1w2v2 &lt;= 0 &amp;&amp; w2v1v2 &lt;= 0 &amp;&amp; w2v2v3 &gt; 0) {\n                bt.rr = new BiTangent(i, j);\n            }\n            else if (v1v2w2 &lt;= 0 &amp;&amp; v2w1w2 &gt; 0 &amp;&amp; v2w2w3 &lt;= 0 &amp;&amp; w1w2v2 &gt;= 0 &amp;&amp; w2v1v2 &lt; 0 &amp;&amp; w2v2v3 &gt;= 0) {\n                bt.rl = new BiTangent(i, j);\n            }\n            else if (v1v2w2 &gt;= 0 &amp;&amp; v2w1w2 &lt; 0 &amp;&amp; v2w2w3 &gt;= 0 &amp;&amp; w1w2v2 &lt;= 0 &amp;&amp; w2v1v2 &gt; 0 &amp;&amp; w2v2v3 &lt;= 0) {\n                bt.lr = new BiTangent(i, j);\n            }\n        }\n    }\n    return bt;\n}\nexports.tangents = tangents;\nfunction isPointInsidePoly(p, poly) {\n    for (var i = 1, n = poly.length; i &lt; n; ++i)\n        if (below(poly[i - 1], poly[i], p))\n            return false;\n    return true;\n}\nfunction isAnyPInQ(p, q) {\n    return !p.every(function (v) { return !isPointInsidePoly(v, q); });\n}\nfunction polysOverlap(p, q) {\n    if (isAnyPInQ(p, q))\n        return true;\n    if (isAnyPInQ(q, p))\n        return true;\n    for (var i = 1, n = p.length; i &lt; n; ++i) {\n        var v = p[i], u = p[i - 1];\n        if (intersects(new LineSegment(u.x, u.y, v.x, v.y), q).length &gt; 0)\n            return true;\n    }\n    return false;\n}\nexports.polysOverlap = polysOverlap;\n&quot;,&quot;var vpsc = require(&#39;./vpsc&#39;);\nvar shortestpaths = require(&#39;./shortestpaths&#39;);\nvar LongestCommonSubsequence = require(&#39;./longest-common-subsequence&#39;);\nvar NodeWrapper = require(&#39;./node-wrapper&#39;);\nvar NodeAccessor = require(&#39;./node-accessor&#39;);\nvar Vert = require(&#39;./vert&#39;);\nvar Rectangle = require(&#39;./rectangle&#39;);\nvar LongestCommonSubsequence = LongestCommonSubsequence.LongestCommonSubsequence;\nvar NodeWrapper = NodeWrapper.NodeWrapper;\nvar NodeAccessor = NodeAccessor.NodeAccessor;\nvar Vert = Vert.Vert;\nvar Rectangle = Rectangle.Rectangle;\nvar GridRouter = (function () {\n    function GridRouter(originalnodes, accessor, groupPadding) {\n        var _this = this;\n        if (groupPadding === void 0) { groupPadding = 12; }\n        this.originalnodes = originalnodes;\n        this.groupPadding = groupPadding;\n        this.leaves = null;\n        this.nodes = originalnodes.map(function (v, i) { return new NodeWrapper(i, accessor.getBounds(v), accessor.getChildren(v)); });\n        this.leaves = this.nodes.filter(function (v) { return v.leaf; });\n        this.groups = this.nodes.filter(function (g) { return !g.leaf; });\n        this.cols = this.getGridDim(&#39;x&#39;);\n        this.rows = this.getGridDim(&#39;y&#39;);\n        // create parents for each node or group that is a member of another&#39;s children \n        this.groups.forEach(function (v) { return v.children.forEach(function (c) { return _this.nodes[c].parent = v; }); });\n        // root claims the remaining orphans\n        this.root = { children: [] };\n        this.nodes.forEach(function (v) {\n            if (typeof v.parent === &#39;undefined&#39;) {\n                v.parent = _this.root;\n                _this.root.children.push(v.id);\n            }\n            // each node will have grid vertices associated with it,\n            // some inside the node and some on the boundary\n            // leaf nodes will have exactly one internal node at the center\n            // and four boundary nodes\n            // groups will have potentially many of each\n            v.ports = [];\n        });\n        // nodes ordered by their position in the group hierarchy\n        this.backToFront = this.nodes.slice(0);\n        this.backToFront.sort(function (x, y) { return _this.getDepth(x) - _this.getDepth(y); });\n        // compute boundary rectangles for each group\n        // has to be done from front to back, i.e. inside groups to outside groups\n        // such that each can be made large enough to enclose its interior\n        var frontToBackGroups = this.backToFront.slice(0).reverse().filter(function (g) { return !g.leaf; });\n        frontToBackGroups.forEach(function (v) {\n            var r = Rectangle.empty();\n            v.children.forEach(function (c) { return r = r.union(_this.nodes[c].rect); });\n            v.rect = r.inflate(_this.groupPadding);\n        });\n        var colMids = this.midPoints(this.cols.map(function (r) { return r.x; }));\n        var rowMids = this.midPoints(this.rows.map(function (r) { return r.y; }));\n        // setup extents of lines\n        var rowx = colMids[0], rowX = colMids[colMids.length - 1];\n        var coly = rowMids[0], colY = rowMids[rowMids.length - 1];\n        // horizontal lines\n        var hlines = this.rows.map(function (r) { return { x1: rowx, x2: rowX, y1: r.y, y2: r.y }; }).concat(rowMids.map(function (m) { return { x1: rowx, x2: rowX, y1: m, y2: m }; }));\n        // vertical lines\n        var vlines = this.cols.map(function (c) { return { x1: c.x, x2: c.x, y1: coly, y2: colY }; }).concat(colMids.map(function (m) { return { x1: m, x2: m, y1: coly, y2: colY }; }));\n        // the full set of lines\n        var lines = hlines.concat(vlines);\n        // we record the vertices associated with each line\n        lines.forEach(function (l) { return l.verts = []; });\n        // the routing graph\n        this.verts = [];\n        this.edges = [];\n        // create vertices at the crossings of horizontal and vertical grid-lines\n        hlines.forEach(function (h) { return vlines.forEach(function (v) {\n            var p = new Vert(_this.verts.length, v.x1, h.y1);\n            h.verts.push(p);\n            v.verts.push(p);\n            _this.verts.push(p);\n            // assign vertices to the nodes immediately under them\n            var i = _this.backToFront.length;\n            while (i-- &gt; 0) {\n                var node = _this.backToFront[i], r = node.rect;\n                var dx = Math.abs(p.x - r.cx()), dy = Math.abs(p.y - r.cy());\n                if (dx &lt; r.width() / 2 &amp;&amp; dy &lt; r.height() / 2) {\n                    p.node = node;\n                    break;\n                }\n            }\n        }); });\n        lines.forEach(function (l, li) {\n            // create vertices at the intersections of nodes and lines\n            _this.nodes.forEach(function (v, i) {\n                v.rect.lineIntersections(l.x1, l.y1, l.x2, l.y2).forEach(function (intersect, j) {\n                    //console.log(li+&#39;,&#39;+i+&#39;,&#39;+j+&#39;:&#39;+intersect.x + &#39;,&#39; + intersect.y);\n                    var p = new Vert(_this.verts.length, intersect.x, intersect.y, v, l);\n                    _this.verts.push(p);\n                    l.verts.push(p);\n                    v.ports.push(p);\n                });\n            });\n            // split lines into edges joining vertices\n            var isHoriz = Math.abs(l.y1 - l.y2) &lt; 0.1;\n            var delta = function (a, b) { return isHoriz ? b.x - a.x : b.y - a.y; };\n            l.verts.sort(delta);\n            for (var i = 1; i &lt; l.verts.length; i++) {\n                var u = l.verts[i - 1], v = l.verts[i];\n                if (u.node &amp;&amp; u.node === v.node &amp;&amp; u.node.leaf)\n                    continue;\n                _this.edges.push({ source: u.id, target: v.id, length: Math.abs(delta(u, v)) });\n            }\n        });\n    }\n    GridRouter.prototype.avg = function (a) {\n        return a.reduce(function (x, y) { return x + y; }) / a.length;\n    };\n    GridRouter.prototype.getGridDim = function (axis) {\n        var columns = [];\n        var ls = this.leaves.slice(0, this.leaves.length);\n        while (ls.length &gt; 0) {\n            var r = ls[0].rect;\n            var col = ls.filter(function (v) { return v.rect[&#39;overlap&#39; + axis.toUpperCase()](r); });\n            columns.push(col);\n            col.forEach(function (v) { return ls.splice(ls.indexOf(v), 1); });\n            col[axis] = this.avg(col.map(function (v) { return v.rect[&#39;c&#39; + axis](); }));\n        }\n        columns.sort(function (x, y) { return x[axis] - y[axis]; });\n        return columns;\n    };\n    // get the depth of the given node in the group hierarchy\n    GridRouter.prototype.getDepth = function (v) {\n        var depth = 0;\n        while (v.parent !== this.root) {\n            depth++;\n            v = v.parent;\n        }\n        return depth;\n    };\n    // medial axes between node centres and also boundary lines for the grid\n    GridRouter.prototype.midPoints = function (a) {\n        var gap = a[1] - a[0];\n        var mids = [a[0] - gap / 2];\n        for (var i = 1; i &lt; a.length; i++) {\n            mids.push((a[i] + a[i - 1]) / 2);\n        }\n        mids.push(a[a.length - 1] + gap / 2);\n        return mids;\n    };\n    // find path from v to root including both v and root\n    GridRouter.prototype.findLineage = function (v) {\n        var lineage = [v];\n        do {\n            v = v.parent;\n            lineage.push(v);\n        } while (v !== this.root);\n        return lineage.reverse();\n    };\n    // find path connecting a and b through their lowest common ancestor\n    GridRouter.prototype.findAncestorPathBetween = function (a, b) {\n        var aa = this.findLineage(a), ba = this.findLineage(b), i = 0;\n        while (aa[i] === ba[i])\n            i++;\n        // i-1 to include common ancestor only once (as first element)\n        return { commonAncestor: aa[i - 1], lineages: aa.slice(i).concat(ba.slice(i)) };\n    };\n    // when finding a path between two nodes a and b, siblings of a and b on the\n    // paths from a and b to their least common ancestor are obstacles\n    GridRouter.prototype.siblingObstacles = function (a, b) {\n        var _this = this;\n        var path = this.findAncestorPathBetween(a, b);\n        var lineageLookup = {};\n        path.lineages.forEach(function (v) { return lineageLookup[v.id] = {}; });\n        var obstacles = path.commonAncestor.children.filter(function (v) { return !(v in lineageLookup); });\n        path.lineages.filter(function (v) { return v.parent !== path.commonAncestor; }).forEach(function (v) { return obstacles = obstacles.concat(v.parent.children.filter(function (c) { return c !== v.id; })); });\n        return obstacles.map(function (v) { return _this.nodes[v]; });\n    };\n    // for the given routes, extract all the segments orthogonal to the axis x\n    // and return all them grouped by x position\n    GridRouter.getSegmentSets = function (routes, x, y) {\n        // vsegments is a list of vertical segments sorted by x position\n        var vsegments = [];\n        for (var ei = 0; ei &lt; routes.length; ei++) {\n            var route = routes[ei];\n            for (var si = 0; si &lt; route.length; si++) {\n                var s = route[si];\n                s.edgeid = ei;\n                s.i = si;\n                var sdx = s[1][x] - s[0][x];\n                if (Math.abs(sdx) &lt; 0.1) {\n                    vsegments.push(s);\n                }\n            }\n        }\n        vsegments.sort(function (a, b) { return a[0][x] - b[0][x]; });\n        // vsegmentsets is a set of sets of segments grouped by x position\n        var vsegmentsets = [];\n        var segmentset = null;\n        for (var i = 0; i &lt; vsegments.length; i++) {\n            var s = vsegments[i];\n            if (!segmentset || Math.abs(s[0][x] - segmentset.pos) &gt; 0.1) {\n                segmentset = { pos: s[0][x], segments: [] };\n                vsegmentsets.push(segmentset);\n            }\n            segmentset.segments.push(s);\n        }\n        return vsegmentsets;\n    };\n    // for all segments in this bundle create a vpsc problem such that\n    // each segment&#39;s x position is a variable and separation constraints \n    // are given by the partial order over the edges to which the segments belong\n    // for each pair s1,s2 of segments in the open set:\n    //   e1 = edge of s1, e2 = edge of s2\n    //   if leftOf(e1,e2) create constraint s1.x + gap &lt;= s2.x\n    //   else if leftOf(e2,e1) create cons. s2.x + gap &lt;= s1.x\n    GridRouter.nudgeSegs = function (x, y, routes, segments, leftOf, gap) {\n        var n = segments.length;\n        if (n &lt;= 1)\n            return;\n        var vs = segments.map(function (s) { return new vpsc.Variable(s[0][x]); });\n        var cs = [];\n        for (var i = 0; i &lt; n; i++) {\n            for (var j = 0; j &lt; n; j++) {\n                if (i === j)\n                    continue;\n                var s1 = segments[i], s2 = segments[j], e1 = s1.edgeid, e2 = s2.edgeid, lind = -1, rind = -1;\n                // in page coordinates (not cartesian) the notion of &#39;leftof&#39; is flipped in the horizontal axis from the vertical axis\n                // that is, when nudging vertical segments, if they increase in the y(conj) direction the segment belonging to the\n                // &#39;left&#39; edge actually needs to be nudged to the right\n                // when nudging horizontal segments, if the segments increase in the x direction\n                // then the &#39;left&#39; segment needs to go higher, i.e. to have y pos less than that of the right\n                if (x == &#39;x&#39;) {\n                    if (leftOf(e1, e2)) {\n                        //console.log(&#39;s1: &#39; + s1[0][x] + &#39;,&#39; + s1[0][y] + &#39;-&#39; + s1[1][x] + &#39;,&#39; + s1[1][y]);\n                        if (s1[0][y] &lt; s1[1][y]) {\n                            lind = j, rind = i;\n                        }\n                        else {\n                            lind = i, rind = j;\n                        }\n                    }\n                }\n                else {\n                    if (leftOf(e1, e2)) {\n                        if (s1[0][y] &lt; s1[1][y]) {\n                            lind = i, rind = j;\n                        }\n                        else {\n                            lind = j, rind = i;\n                        }\n                    }\n                }\n                if (lind &gt;= 0) {\n                    //console.log(x+&#39; constraint: &#39; + lind + &#39;&lt;&#39; + rind);\n                    cs.push(new vpsc.Constraint(vs[lind], vs[rind], gap));\n                }\n            }\n        }\n        var solver = new vpsc.Solver(vs, cs);\n        solver.solve();\n        vs.forEach(function (v, i) {\n            var s = segments[i];\n            var pos = v.position();\n            s[0][x] = s[1][x] = pos;\n            var route = routes[s.edgeid];\n            if (s.i &gt; 0)\n                route[s.i - 1][1][x] = pos;\n            if (s.i &lt; route.length - 1)\n                route[s.i + 1][0][x] = pos;\n        });\n    };\n    GridRouter.nudgeSegments = function (routes, x, y, leftOf, gap) {\n        var vsegmentsets = GridRouter.getSegmentSets(routes, x, y);\n        for (var i = 0; i &lt; vsegmentsets.length; i++) {\n            var ss = vsegmentsets[i];\n            var events = [];\n            for (var j = 0; j &lt; ss.segments.length; j++) {\n                var s = ss.segments[j];\n                events.push({ type: 0, s: s, pos: Math.min(s[0][y], s[1][y]) });\n                events.push({ type: 1, s: s, pos: Math.max(s[0][y], s[1][y]) });\n            }\n            events.sort(function (a, b) { return a.pos - b.pos + a.type - b.type; });\n            var open = [];\n            var openCount = 0;\n            events.forEach(function (e) {\n                if (e.type === 0) {\n                    open.push(e.s);\n                    openCount++;\n                }\n                else {\n                    openCount--;\n                }\n                if (openCount == 0) {\n                    GridRouter.nudgeSegs(x, y, routes, open, leftOf, gap);\n                    open = [];\n                }\n            });\n        }\n    };\n    // obtain routes for the specified edges, nicely nudged apart\n    // warning: edge paths may be reversed such that common paths are ordered consistently within bundles!\n    GridRouter.prototype.routeEdges = function (edges, gap, source, target) {\n        var _this = this;\n        var routePaths = edges.map(function (e) { return _this.route(source(e), target(e)); });\n        var order = GridRouter.orderEdges(routePaths);\n        var routes = routePaths.map(function (e) {\n            return GridRouter.makeSegments(e);\n        });\n        GridRouter.nudgeSegments(routes, &#39;x&#39;, &#39;y&#39;, order, gap);\n        GridRouter.nudgeSegments(routes, &#39;y&#39;, &#39;x&#39;, order, gap);\n        return routes;\n    };\n    GridRouter.angleBetween2Lines = function (line1, line2) {\n        var angle1 = Math.atan2(line1[0].y - line1[1].y, line1[0].x - line1[1].x);\n        var angle2 = Math.atan2(line2[0].y - line2[1].y, line2[0].x - line2[1].x);\n        var diff = angle1 - angle2;\n        if (diff &gt; Math.PI || diff &lt; -Math.PI) {\n            diff = angle2 - angle1;\n        }\n        return diff;\n    };\n    // does the path a-b-c describe a left turn?\n    GridRouter.isLeft = function (a, b, c) {\n        return ((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) &lt;= 0;\n    };\n    // for the given list of ordered pairs, returns a function that (efficiently) looks-up a specific pair to\n    // see if it exists in the list\n    GridRouter.getOrder = function (pairs) {\n        var outgoing = {};\n        for (var i = 0; i &lt; pairs.length; i++) {\n            var p = pairs[i];\n            if (typeof outgoing[p.l] === &#39;undefined&#39;)\n                outgoing[p.l] = {};\n            outgoing[p.l][p.r] = true;\n        }\n        return function (l, r) { return typeof outgoing[l] !== &#39;undefined&#39; &amp;&amp; outgoing[l][r]; };\n    };\n    // returns an ordering (a lookup function) that determines the correct order to nudge the\n    // edge paths apart to minimize crossings\n    GridRouter.orderEdges = function (edges) {\n        var edgeOrder = [];\n        for (var i = 0; i &lt; edges.length - 1; i++) {\n            for (var j = i + 1; j &lt; edges.length; j++) {\n                var e = edges[i], f = edges[j], lcs = new LongestCommonSubsequence(e, f);\n                var u, vi, vj;\n                if (lcs.length === 0)\n                    continue; // no common subpath\n                if (lcs.reversed) {\n                    // if we found a common subpath but one of the edges runs the wrong way, \n                    // then reverse f.\n                    f.reverse();\n                    f.reversed = true;\n                    lcs = new LongestCommonSubsequence(e, f);\n                }\n                if (lcs.length === e.length || lcs.length === f.length) {\n                    // the edges are completely co-linear so make an arbitrary ordering decision\n                    edgeOrder.push({ l: i, r: j });\n                    continue;\n                }\n                if (lcs.si + lcs.length &gt;= e.length || lcs.ti + lcs.length &gt;= f.length) {\n                    // if the common subsequence of the\n                    // two edges being considered goes all the way to the\n                    // end of one (or both) of the lines then we have to \n                    // base our ordering decision on the other end of the\n                    // common subsequence\n                    u = e[lcs.si + 1];\n                    vj = e[lcs.si - 1];\n                    vi = f[lcs.ti - 1];\n                }\n                else {\n                    u = e[lcs.si + lcs.length - 2];\n                    vi = e[lcs.si + lcs.length];\n                    vj = f[lcs.ti + lcs.length];\n                }\n                if (GridRouter.isLeft(u, vi, vj)) {\n                    edgeOrder.push({ l: j, r: i });\n                }\n                else {\n                    edgeOrder.push({ l: i, r: j });\n                }\n            }\n        }\n        //edgeOrder.forEach(function (e) { console.log(&#39;l:&#39; + e.l + &#39;,r:&#39; + e.r) });\n        return GridRouter.getOrder(edgeOrder);\n    };\n    // for an orthogonal path described by a sequence of points, create a list of segments\n    // if consecutive segments would make a straight line they are merged into a single segment\n    // segments are over cloned points, not the original vertices\n    GridRouter.makeSegments = function (path) {\n        function copyPoint(p) {\n            return { x: p.x, y: p.y };\n        }\n        var isStraight = function (a, b, c) { return Math.abs((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) &lt; 0.001; };\n        var segments = [];\n        var a = copyPoint(path[0]);\n        for (var i = 1; i &lt; path.length; i++) {\n            var b = copyPoint(path[i]), c = i &lt; path.length - 1 ? path[i + 1] : null;\n            if (!c || !isStraight(a, b, c)) {\n                segments.push([a, b]);\n                a = b;\n            }\n        }\n        return segments;\n    };\n    // find a route between node s and node t\n    // returns an array of indices to verts\n    GridRouter.prototype.route = function (s, t) {\n        var _this = this;\n        var source = this.nodes[s], target = this.nodes[t];\n        this.obstacles = this.siblingObstacles(source, target);\n        var obstacleLookup = {};\n        this.obstacles.forEach(function (o) { return obstacleLookup[o.id] = o; });\n        this.passableEdges = this.edges.filter(function (e) {\n            var u = _this.verts[e.source], v = _this.verts[e.target];\n            return !(u.node &amp;&amp; u.node.id in obstacleLookup || v.node &amp;&amp; v.node.id in obstacleLookup);\n        });\n        for (var i = 1; i &lt; source.ports.length; i++) {\n            var u = source.ports[0].id;\n            var v = source.ports[i].id;\n            this.passableEdges.push({\n                source: u,\n                target: v,\n                length: 0\n            });\n        }\n        for (var i = 1; i &lt; target.ports.length; i++) {\n            var u = target.ports[0].id;\n            var v = target.ports[i].id;\n            this.passableEdges.push({\n                source: u,\n                target: v,\n                length: 0\n            });\n        }\n        var getSource = function (e) { return e.source; }, getTarget = function (e) { return e.target; }, getLength = function (e) { return e.length; };\n        var shortestPathCalculator = new shortestpaths.Calculator(this.verts.length, this.passableEdges, getSource, getTarget, getLength);\n        var bendPenalty = function (u, v, w) {\n            var a = _this.verts[u], b = _this.verts[v], c = _this.verts[w];\n            var dx = Math.abs(c.x - a.x), dy = Math.abs(c.y - a.y);\n            // don&#39;t count bends from internal node edges\n            if (a.node === source &amp;&amp; a.node === b.node || b.node === target &amp;&amp; b.node === c.node)\n                return 0;\n            return dx &gt; 1 &amp;&amp; dy &gt; 1 ? 1000 : 0;\n        };\n        // get shortest path\n        var shortestPath = shortestPathCalculator.PathFromNodeToNodeWithPrevCost(source.ports[0].id, target.ports[0].id, bendPenalty);\n        // shortest path is reversed and does not include the target port\n        var pathPoints = shortestPath.reverse().map(function (vi) { return _this.verts[vi]; });\n        pathPoints.push(this.nodes[target.id].ports[0]);\n        // filter out any extra end points that are inside the source or target (i.e. the dummy segments above)\n        return pathPoints.filter(function (v, i) { return !(i &lt; pathPoints.length - 1 &amp;&amp; pathPoints[i + 1].node === source &amp;&amp; v.node === source || i &gt; 0 &amp;&amp; v.node === target &amp;&amp; pathPoints[i - 1].node === target); });\n    };\n    return GridRouter;\n})();\nexports.GridRouter = GridRouter;\n&quot;,&quot;var applyPacking = {}\r\napplyPacking.PADDING = 10;\r\napplyPacking.GOLDEN_SECTION = (1 + Math.sqrt(5)) / 2;\r\napplyPacking.FLOAT_EPSILON = 0.0001;\r\napplyPacking.MAX_INERATIONS = 100;\r\n\r\n// assign x, y to nodes while using box packing algorithm for disconnected graphs\r\n\r\nvar handleDisconnected = {\r\n  applyPacking: function (graphs, w, h, node_size, desired_ratio){\r\n\r\n      var init_x = 0,\r\n          init_y = 0,\r\n\r\n          svg_width = w,\r\n          svg_height = h,\r\n\r\n          desired_ratio = typeof desired_ratio !== &#39;undefined&#39; ? desired_ratio : 1,\r\n          node_size = typeof node_size !== &#39;undefined&#39; ? node_size : 0,\r\n\r\n          real_width = 0,\r\n          real_height = 0,\r\n          min_width = 0,\r\n\r\n          global_bottom = 0,\r\n          line = [];\r\n    \r\n      if (graphs.length == 0)\r\n          return;\r\n\r\n      /// that would take care of single nodes problem\r\n      // graphs.forEach(function (g) {\r\n      //     if (g.array.length == 1) {\r\n      //         g.array[0].x = 0;\r\n      //         g.array[0].y = 0;\r\n      //     }\r\n      // });\r\n\r\n      calculate_bb(graphs);\r\n      apply(graphs);\r\n      put_nodes_to_right_positions(graphs);\r\n\r\n      // get bounding boxes for all separate graphs\r\n      function calculate_bb(graphs){\r\n\r\n          graphs.forEach(function(g) { \r\n              calculate_single_bb(g)\r\n          });\r\n\r\n          function calculate_single_bb(graph){\r\n              var min_x = Number.MAX_VALUE, min_y = Number.MAX_VALUE,\r\n               max_x = 0, max_y = 0;\r\n\r\n              graph.array.forEach(function(v){\r\n                  var w = typeof v.width !== &#39;undefined&#39; ? v.width : node_size;\r\n                  var h = typeof v.height !== &#39;undefined&#39; ? v.height : node_size;\r\n                  w /= 2;\r\n                  h /= 2;\r\n                  max_x = Math.max(v.x + w, max_x);\r\n                  min_x = Math.min(v.x - w, min_x);\r\n                  max_y = Math.max(v.y + h, max_y);\r\n                  min_y = Math.min(v.y - h, min_y);\r\n              });\r\n\r\n              graph.width = max_x - min_x;\r\n              graph.height = max_y - min_y;\r\n          }\r\n      }\r\n\r\n      function plot(data, left, right, opt_x, opt_y) {\r\n                  // plot the cost function\r\n          var plot_svg = d3.select(\&quot;body\&quot;).append(\&quot;svg\&quot;)\r\n              .attr(\&quot;width\&quot;, function(){return 2 * (right - left);})\r\n              .attr(\&quot;height\&quot;, 200);\r\n\r\n\r\n          var x = d3.time.scale().range([0, 2 * (right - left)]);\r\n\r\n          var xAxis = d3.svg.axis().scale(x).orient(\&quot;bottom\&quot;);\r\n          plot_svg.append(\&quot;g\&quot;).attr(\&quot;class\&quot;, \&quot;x axis\&quot;)\r\n              .attr(\&quot;transform\&quot;, \&quot;translate(0, 199)\&quot;)\r\n              .call(xAxis);\r\n\r\n          var lastX = 0;\r\n          var lastY = 0;\r\n          var value = 0;\r\n          for (var r = left; r &lt; right; r += 1){\r\n              value = step(data, r);\r\n              // value = 1;\r\n\r\n              plot_svg.append(\&quot;line\&quot;).attr(\&quot;x1\&quot;, 2 * (lastX - left))\r\n                  .attr(\&quot;y1\&quot;, 200 - 30 * lastY)\r\n                  .attr(\&quot;x2\&quot;, 2 * r - 2 * left)\r\n                  .attr(\&quot;y2\&quot;, 200 - 30 * value)\r\n                  .style(\&quot;stroke\&quot;, \&quot;rgb(6,120,155)\&quot;);\r\n\r\n              lastX = r;\r\n              lastY = value;\r\n          }\r\n\r\n          plot_svg.append(\&quot;circle\&quot;).attr(\&quot;cx\&quot;, 2 * opt_x - 2 * left).attr(\&quot;cy\&quot;, 200 - 30 * opt_y)\r\n              .attr(\&quot;r\&quot;, 5).style(&#39;fill&#39;, \&quot;rgba(0,0,0,0.5)\&quot;);\r\n          \r\n      }\r\n\r\n      // actuall assigning of position to nodes\r\n      function put_nodes_to_right_positions(graphs){\r\n          graphs.forEach(function(g){\r\n              // calculate current graph center:\r\n              var center = {x: 0, y: 0};\r\n              \r\n              g.array.forEach(function(node){\r\n                  center.x += node.x;\r\n                  center.y += node.y;\r\n              });\r\n              \r\n              center.x /= g.array.length;\r\n              center.y /= g.array.length;\r\n\r\n              // calculate current top left corner:\r\n              var corner = { x: center.x - g.width/2, y: center.y - g.height/2 };\r\n              var offset = { x: g.x - corner.x, y: g.y - corner.y };\r\n\r\n              // put nodes:\r\n              g.array.forEach(function(node){\r\n                  node.x = node.x + offset.x + svg_width/2 - real_width/2;\r\n                  node.y = node.y + offset.y + svg_height/2 - real_height/2;\r\n              });\r\n          });\r\n      }\r\n\r\n      // starts box packing algorithm\r\n      // desired ratio is 1 by default\r\n      function apply(data, desired_ratio){\r\n          var curr_best_f = Number.POSITIVE_INFINITY;\r\n          var curr_best = 0;\r\n          data.sort(function (a, b) { return b.height - a.height; });\r\n\r\n          min_width = data.reduce(function(a, b) {\r\n              return a.width &lt; b.width ? a.width : b.width;\r\n          });\r\n\r\n          var left = x1 = min_width;\r\n          var right = x2 = get_entire_width(data);\r\n          var iterationCounter = 0;\r\n          \r\n          var f_x1 = Number.MAX_VALUE;\r\n          var f_x2 = Number.MAX_VALUE;\r\n          var flag = -1; // determines which among f_x1 and f_x2 to recompute\r\n\r\n\r\n          var dx = Number.MAX_VALUE;\r\n          var df = Number.MAX_VALUE;\r\n\r\n          while (( dx &gt; min_width) || df &gt; applyPacking.FLOAT_EPSILON ) {\r\n\r\n              if (flag != 1) {\r\n                  var x1 = right - (right - left) / applyPacking.GOLDEN_SECTION;\r\n                  var f_x1 = step(data, x1);\r\n              } \r\n              if (flag != 0) {\r\n                  var x2 = left + (right - left) / applyPacking.GOLDEN_SECTION; \r\n                  var f_x2 = step(data, x2);\r\n              }\r\n\r\n              dx = Math.abs(x1 - x2);\r\n              df = Math.abs(f_x1 - f_x2);\r\n\r\n              if (f_x1 &lt; curr_best_f) {\r\n                  curr_best_f = f_x1;\r\n                  curr_best = x1;\r\n              }\r\n\r\n              if (f_x2 &lt; curr_best_f) {\r\n                  curr_best_f = f_x2;\r\n                  curr_best = x2;\r\n              }\r\n\r\n              if (f_x1 &gt; f_x2) {\r\n                  left = x1;\r\n                  x1 = x2;\r\n                  f_x1 = f_x2;\r\n                  flag = 1;\r\n              } else {\r\n                  right = x2;\r\n                  x2 = x1;\r\n                  f_x2 = f_x1;\r\n                  flag = 0;\r\n              }\r\n\r\n              if (iterationCounter++ &gt; 100) {\r\n                  break;\r\n              }  \r\n          }\r\n          // plot(data, min_width, get_entire_width(data), curr_best, curr_best_f);\r\n          step(data, curr_best);\r\n      }\r\n\r\n      // one iteration of the optimization method\r\n      // (gives a proper, but not necessarily optimal packing)\r\n      function step(data, max_width){\r\n          line = [];\r\n          real_width = 0;\r\n          real_height = 0;\r\n          global_bottom = init_y;\r\n\r\n          for (var i = 0; i &lt; data.length; i++){\r\n              var o = data[i];\r\n              put_rect(o, max_width);\r\n          }\r\n\r\n          return Math.abs(get_real_ratio() - desired_ratio);\r\n      }\r\n\r\n      // looking for a position to one box \r\n      function put_rect(rect, max_width){\r\n          \r\n\r\n          var parent = undefined;\r\n\r\n          for (var i = 0; i &lt; line.length; i++){\r\n              if ((line[i].space_left &gt;= rect.height) &amp;&amp; (line[i].x + line[i].width + rect.width + applyPacking.PADDING - max_width) &lt;= applyPacking.FLOAT_EPSILON){\r\n                  parent = line[i];\r\n                  break;\r\n              }\r\n          }\r\n\r\n          line.push(rect);\r\n\r\n          if (parent !== undefined){\r\n              rect.x = parent.x + parent.width + applyPacking.PADDING;\r\n              rect.y = parent.bottom;\r\n              rect.space_left = rect.height;\r\n              rect.bottom = rect.y;\r\n              parent.space_left -= rect.height + applyPacking.PADDING;\r\n              parent.bottom += rect.height + applyPacking.PADDING;\r\n          } else {\r\n              rect.y = global_bottom;\r\n              global_bottom += rect.height + applyPacking.PADDING;\r\n              rect.x = init_x;\r\n              rect.bottom = rect.y;\r\n              rect.space_left = rect.height;\r\n          }\r\n\r\n          if (rect.y + rect.height - real_height &gt; -applyPacking.FLOAT_EPSILON) real_height = rect.y + rect.height - init_y;\r\n          if (rect.x + rect.width - real_width &gt; -applyPacking.FLOAT_EPSILON) real_width = rect.x + rect.width - init_x;\r\n      };\r\n\r\n      function get_entire_width(data){\r\n          var width = 0;\r\n          data.forEach(function (d) {return width += d.width + applyPacking.PADDING;});\r\n          return width;\r\n      }\r\n\r\n      function get_real_ratio(){\r\n          return (real_width / real_height);\r\n      }\r\n  },\r\n\r\n  // seraration of disconnected graphs\r\n  // returns an array of {}\r\n  separateGraphs: function(nodes, links){\r\n      var marks = {};\r\n      var ways = {};\r\n      graphs = [];\r\n      var clusters = 0;\r\n\r\n      for (var i = 0; i &lt; links.length; i++){\r\n          var link = links[i];\r\n          var n1 = link.source;\r\n          var n2 = link.target;\r\n          if (ways[n1.index]) \r\n              ways[n1.index].push(n2);\r\n          else\r\n              ways[n1.index] = [n2];\r\n          \r\n          if (ways[n2.index]) \r\n              ways[n2.index].push(n1);\r\n          else\r\n              ways[n2.index] = [n1];\r\n      }\r\n\r\n      for (var i = 0; i &lt; nodes.length; i++){\r\n          var node = nodes[i];\r\n          if (marks[node.index]) continue;\r\n          explore_node(node, true);\r\n      }\r\n\r\n      function explore_node(n, is_new){\r\n          if (marks[n.index] !== undefined) return;\r\n          if (is_new) {\r\n              clusters++;\r\n              graphs.push({array:[]});\r\n          }\r\n          marks[n.index] = clusters;\r\n          graphs[clusters - 1].array.push(n);\r\n          var adjacent = ways[n.index];\r\n          if (!adjacent) return;\r\n      \r\n          for (var j = 0; j &lt; adjacent.length; j++){\r\n              explore_node(adjacent[j], false);\r\n          }\r\n      }\r\n\r\n      return graphs;\r\n  }\r\n}\r\n\r\nmodule.exports = handleDisconnected;\r\n&quot;,&quot;// compute the size of the union of two sets a and b\nfunction unionCount(a, b) {\n    var u = {};\n    for (var i in a)\n        u[i] = {};\n    for (var i in b)\n        u[i] = {};\n    return Object.keys(u).length;\n}\n// compute the size of the intersection of two sets a and b\nfunction intersectionCount(a, b) {\n    var n = 0;\n    for (var i in a)\n        if (typeof b[i] !== &#39;undefined&#39;)\n            ++n;\n    return n;\n}\nfunction getNeighbours(links, la) {\n    var neighbours = {};\n    var addNeighbours = function (u, v) {\n        if (typeof neighbours[u] === &#39;undefined&#39;)\n            neighbours[u] = {};\n        neighbours[u][v] = {};\n    };\n    links.forEach(function (e) {\n        var u = la.getSourceIndex(e), v = la.getTargetIndex(e);\n        addNeighbours(u, v);\n        addNeighbours(v, u);\n    });\n    return neighbours;\n}\n// modify the lengths of the specified links by the result of function f weighted by w\nfunction computeLinkLengths(links, w, f, la) {\n    var neighbours = getNeighbours(links, la);\n    links.forEach(function (l) {\n        var a = neighbours[la.getSourceIndex(l)];\n        var b = neighbours[la.getTargetIndex(l)];\n        la.setLength(l, 1 + w * f(a, b));\n    });\n}\n/** modify the specified link lengths based on the symmetric difference of their neighbours\n * @class symmetricDiffLinkLengths\n */\nfunction symmetricDiffLinkLengths(links, la, w) {\n    if (w === void 0) { w = 1; }\n    computeLinkLengths(links, w, function (a, b) { return Math.sqrt(unionCount(a, b) - intersectionCount(a, b)); }, la);\n}\nexports.symmetricDiffLinkLengths = symmetricDiffLinkLengths;\n/** modify the specified links lengths based on the jaccard difference between their neighbours\n * @class jaccardLinkLengths\n */\nfunction jaccardLinkLengths(links, la, w) {\n    if (w === void 0) { w = 1; }\n    computeLinkLengths(links, w, function (a, b) { return Math.min(Object.keys(a).length, Object.keys(b).length) &lt; 1.1 ? 0 : intersectionCount(a, b) / unionCount(a, b); }, la);\n}\nexports.jaccardLinkLengths = jaccardLinkLengths;\n/** generate separation constraints for all edges unless both their source and sink are in the same strongly connected component\n * @class generateDirectedEdgeConstraints\n */\nfunction generateDirectedEdgeConstraints(n, links, axis, la) {\n    var components = stronglyConnectedComponents(n, links, la);\n    var nodes = {};\n    components.filter(function (c) { return c.length &gt; 1; }).forEach(function (c) { return c.forEach(function (v) { return nodes[v] = c; }); });\n    var constraints = [];\n    links.forEach(function (l) {\n        var ui = la.getSourceIndex(l), vi = la.getTargetIndex(l), u = nodes[ui], v = nodes[vi];\n        if (!u || !v || u.component !== v.component) {\n            constraints.push({\n                axis: axis,\n                left: ui,\n                right: vi,\n                gap: la.getMinSeparation(l)\n            });\n        }\n    });\n    return constraints;\n}\nexports.generateDirectedEdgeConstraints = generateDirectedEdgeConstraints;\n/*\nFollowing function based on: https://github.com/mikolalysenko/strongly-connected-components\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Mikola Lysenko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \&quot;Software\&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \&quot;AS IS\&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\nfunction stronglyConnectedComponents(numVertices, edges, la) {\n    var adjList = new Array(numVertices);\n    var index = new Array(numVertices);\n    var lowValue = new Array(numVertices);\n    var active = new Array(numVertices);\n    for (var i = 0; i &lt; numVertices; ++i) {\n        adjList[i] = [];\n        index[i] = -1;\n        lowValue[i] = 0;\n        active[i] = false;\n    }\n    for (var i = 0; i &lt; edges.length; ++i) {\n        adjList[la.getSourceIndex(edges[i])].push(la.getTargetIndex(edges[i]));\n    }\n    var count = 0;\n    var S = [];\n    var components = [];\n    function strongConnect(v) {\n        index[v] = count;\n        lowValue[v] = count;\n        active[v] = true;\n        count += 1;\n        S.push(v);\n        var e = adjList[v];\n        for (var i = 0; i &lt; e.length; ++i) {\n            var u = e[i];\n            if (index[u] &lt; 0) {\n                strongConnect(u);\n                lowValue[v] = Math.min(lowValue[v], lowValue[u]) | 0;\n            }\n            else if (active[u]) {\n                lowValue[v] = Math.min(lowValue[v], lowValue[u]);\n            }\n        }\n        if (lowValue[v] === index[v]) {\n            var component = [];\n            for (var i = S.length - 1; i &gt;= 0; --i) {\n                var w = S[i];\n                active[w] = false;\n                component.push(w);\n                if (w === v) {\n                    S.length = i;\n                    break;\n                }\n            }\n            components.push(component);\n        }\n    }\n    for (var i = 0; i &lt; numVertices; ++i) {\n        if (index[i] &lt; 0) {\n            strongConnect(i);\n        }\n    }\n    return components;\n}\n&quot;,&quot;/**\n * Descent respects a collection of locks over nodes that should not move\n * @class Locks\n */\nvar Locks = (function () {\n    function Locks() {\n        this.locks = {};\n    }\n    /**\n     * add a lock on the node at index id\n     * @method add\n     * @param id index of node to be locked\n     * @param x required position for node\n     */\n    Locks.prototype.add = function (id, x) {\n        if (isNaN(x[0]) || isNaN(x[1]))\n            debugger;\n        this.locks[id] = x;\n    };\n    /**\n     * @method clear clear all locks\n     */\n    Locks.prototype.clear = function () {\n        this.locks = {};\n    };\n    /**\n     * @isEmpty\n     * @returns false if no locks exist\n     */\n    Locks.prototype.isEmpty = function () {\n        for (var l in this.locks)\n            return false;\n        return true;\n    };\n    /**\n     * perform an operation on each lock\n     * @apply\n     */\n    Locks.prototype.apply = function (f) {\n        for (var l in this.locks) {\n            f(l, this.locks[l]);\n        }\n    };\n    return Locks;\n})();\nexports.Locks = Locks;\n&quot;,&quot;var LongestCommonSubsequence = (function () {\n    function LongestCommonSubsequence(s, t) {\n        this.s = s;\n        this.t = t;\n        var mf = LongestCommonSubsequence.findMatch(s, t);\n        var tr = t.slice(0).reverse();\n        var mr = LongestCommonSubsequence.findMatch(s, tr);\n        if (mf.length &gt;= mr.length) {\n            this.length = mf.length;\n            this.si = mf.si;\n            this.ti = mf.ti;\n            this.reversed = false;\n        }\n        else {\n            this.length = mr.length;\n            this.si = mr.si;\n            this.ti = t.length - mr.ti - mr.length;\n            this.reversed = true;\n        }\n    }\n    LongestCommonSubsequence.findMatch = function (s, t) {\n        var m = s.length;\n        var n = t.length;\n        var match = { length: 0, si: -1, ti: -1 };\n        var l = new Array(m);\n        for (var i = 0; i &lt; m; i++) {\n            l[i] = new Array(n);\n            for (var j = 0; j &lt; n; j++)\n                if (s[i] === t[j]) {\n                    var v = l[i][j] = (i === 0 || j === 0) ? 1 : l[i - 1][j - 1] + 1;\n                    if (v &gt; match.length) {\n                        match.length = v;\n                        match.si = i - v + 1;\n                        match.ti = j - v + 1;\n                    }\n                    ;\n                }\n                else\n                    l[i][j] = 0;\n        }\n        return match;\n    };\n    LongestCommonSubsequence.prototype.getSequence = function () {\n        return this.length &gt;= 0 ? this.s.slice(this.si, this.si + this.length) : [];\n    };\n    return LongestCommonSubsequence;\n})();\nexports.LongestCommonSubsequence = LongestCommonSubsequence;\n&quot;,&quot;\n&quot;,&quot;var NodeWrapper = (function () {\n    function NodeWrapper(id, rect, children) {\n        this.id = id;\n        this.rect = rect;\n        this.children = children;\n        this.leaf = typeof children === &#39;undefined&#39; || children.length === 0;\n    }\n    return NodeWrapper;\n})();\nexports.NodeWrapper = NodeWrapper;\n&quot;,&quot;var PairingHeap = (function () {\n    // from: https://gist.github.com/nervoussystem\n    //{elem:object, subheaps:[array of heaps]}\n    function PairingHeap(elem) {\n        this.elem = elem;\n        this.subheaps = [];\n    }\n    PairingHeap.prototype.toString = function (selector) {\n        var str = \&quot;\&quot;, needComma = false;\n        for (var i = 0; i &lt; this.subheaps.length; ++i) {\n            var subheap = this.subheaps[i];\n            if (!subheap.elem) {\n                needComma = false;\n                continue;\n            }\n            if (needComma) {\n                str = str + \&quot;,\&quot;;\n            }\n            str = str + subheap.toString(selector);\n            needComma = true;\n        }\n        if (str !== \&quot;\&quot;) {\n            str = \&quot;(\&quot; + str + \&quot;)\&quot;;\n        }\n        return (this.elem ? selector(this.elem) : \&quot;\&quot;) + str;\n    };\n    PairingHeap.prototype.forEach = function (f) {\n        if (!this.empty()) {\n            f(this.elem, this);\n            this.subheaps.forEach(function (s) { return s.forEach(f); });\n        }\n    };\n    PairingHeap.prototype.count = function () {\n        return this.empty() ? 0 : 1 + this.subheaps.reduce(function (n, h) {\n            return n + h.count();\n        }, 0);\n    };\n    PairingHeap.prototype.min = function () {\n        return this.elem;\n    };\n    PairingHeap.prototype.empty = function () {\n        return this.elem == null;\n    };\n    PairingHeap.prototype.contains = function (h) {\n        if (this === h)\n            return true;\n        for (var i = 0; i &lt; this.subheaps.length; i++) {\n            if (this.subheaps[i].contains(h))\n                return true;\n        }\n        return false;\n    };\n    PairingHeap.prototype.isHeap = function (lessThan) {\n        var _this = this;\n        return this.subheaps.every(function (h) { return lessThan(_this.elem, h.elem) &amp;&amp; h.isHeap(lessThan); });\n    };\n    PairingHeap.prototype.insert = function (obj, lessThan) {\n        return this.merge(new PairingHeap(obj), lessThan);\n    };\n    PairingHeap.prototype.merge = function (heap2, lessThan) {\n        if (this.empty())\n            return heap2;\n        else if (heap2.empty())\n            return this;\n        else if (lessThan(this.elem, heap2.elem)) {\n            this.subheaps.push(heap2);\n            return this;\n        }\n        else {\n            heap2.subheaps.push(this);\n            return heap2;\n        }\n    };\n    PairingHeap.prototype.removeMin = function (lessThan) {\n        if (this.empty())\n            return null;\n        else\n            return this.mergePairs(lessThan);\n    };\n    PairingHeap.prototype.mergePairs = function (lessThan) {\n        if (this.subheaps.length == 0)\n            return new PairingHeap(null);\n        else if (this.subheaps.length == 1) {\n            return this.subheaps[0];\n        }\n        else {\n            var firstPair = this.subheaps.pop().merge(this.subheaps.pop(), lessThan);\n            var remaining = this.mergePairs(lessThan);\n            return firstPair.merge(remaining, lessThan);\n        }\n    };\n    PairingHeap.prototype.decreaseKey = function (subheap, newValue, setHeapNode, lessThan) {\n        var newHeap = subheap.removeMin(lessThan);\n        //reassign subheap values to preserve tree\n        subheap.elem = newHeap.elem;\n        subheap.subheaps = newHeap.subheaps;\n        if (setHeapNode !== null &amp;&amp; newHeap.elem !== null) {\n            setHeapNode(subheap.elem, subheap);\n        }\n        var pairingNode = new PairingHeap(newValue);\n        if (setHeapNode !== null) {\n            setHeapNode(newValue, pairingNode);\n        }\n        return this.merge(pairingNode, lessThan);\n    };\n    return PairingHeap;\n})();\nexports.PairingHeap = PairingHeap;\n&quot;,&quot;var PowerEdge = (function () {\n    function PowerEdge(source, target, type) {\n        this.source = source;\n        this.target = target;\n        this.type = type;\n    }\n    return PowerEdge;\n})();\nexports.PowerEdge = PowerEdge;\nvar Configuration = (function () {\n    function Configuration(n, edges, linkAccessor) {\n        var _this = this;\n        this.linkAccessor = linkAccessor;\n        this.modules = new Array(n);\n        this.roots = new ModuleSet();\n        for (var i = 0; i &lt; n; ++i) {\n            this.roots.add(this.modules[i] = new Module(i));\n        }\n        this.R = edges.length;\n        edges.forEach(function (e) {\n            var s = _this.modules[linkAccessor.getSourceIndex(e)], t = _this.modules[linkAccessor.getTargetIndex(e)], type = linkAccessor.getType(e);\n            s.outgoing.add(type, t);\n            t.incoming.add(type, s);\n        });\n    }\n    // merge modules a and b keeping track of their power edges and removing the from roots\n    Configuration.prototype.merge = function (a, b) {\n        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);\n        var children = new ModuleSet();\n        children.add(a);\n        children.add(b);\n        var m = new Module(this.modules.length, outInt, inInt, children);\n        this.modules.push(m);\n        var update = function (s, i, o) {\n            s.forAll(function (ms, linktype) {\n                ms.forAll(function (n) {\n                    var nls = n[i];\n                    nls.add(linktype, m);\n                    nls.remove(linktype, a);\n                    nls.remove(linktype, b);\n                    a[o].remove(linktype, n);\n                    b[o].remove(linktype, n);\n                });\n            });\n        };\n        update(outInt, \&quot;incoming\&quot;, \&quot;outgoing\&quot;);\n        update(inInt, \&quot;outgoing\&quot;, \&quot;incoming\&quot;);\n        this.R -= inInt.count() + outInt.count();\n        this.roots.remove(a);\n        this.roots.remove(b);\n        this.roots.add(m);\n        return m;\n    };\n    Configuration.prototype.rootMerges = function () {\n        var rs = this.roots.modules();\n        var n = rs.length;\n        var merges = new Array(n * (n - 1));\n        var ctr = 0;\n        for (var i = 0, i_ = n - 1; i &lt; i_; ++i) {\n            for (var j = i + 1; j &lt; n; ++j) {\n                var a = rs[i], b = rs[j];\n                merges[ctr++] = { nEdges: this.nEdges(a, b), a: a, b: b };\n            }\n        }\n        return merges;\n    };\n    Configuration.prototype.greedyMerge = function () {\n        var ms = this.rootMerges().sort(function (a, b) { return a.nEdges - b.nEdges; });\n        var m = ms[0];\n        if (m.nEdges &gt;= this.R)\n            return false;\n        this.merge(m.a, m.b);\n        return true;\n    };\n    Configuration.prototype.nEdges = function (a, b) {\n        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);\n        return this.R - inInt.count() - outInt.count();\n    };\n    Configuration.prototype.getGroupHierarchy = function (retargetedEdges) {\n        var _this = this;\n        var groups = [];\n        var root = {};\n        toGroups(this.roots, root, groups);\n        var es = this.allEdges();\n        es.forEach(function (e) {\n            var a = _this.modules[e.source];\n            var b = _this.modules[e.target];\n            retargetedEdges.push(new PowerEdge(typeof a.gid === \&quot;undefined\&quot; ? e.source : groups[a.gid], typeof b.gid === \&quot;undefined\&quot; ? e.target : groups[b.gid], e.type));\n        });\n        return groups;\n    };\n    Configuration.prototype.allEdges = function () {\n        var es = [];\n        Configuration.getEdges(this.roots, es);\n        return es;\n    };\n    Configuration.getEdges = function (modules, es) {\n        modules.forAll(function (m) {\n            m.getEdges(es);\n            Configuration.getEdges(m.children, es);\n        });\n    };\n    return Configuration;\n})();\nexports.Configuration = Configuration;\nfunction toGroups(modules, group, groups) {\n    modules.forAll(function (m) {\n        if (m.isLeaf()) {\n            if (!group.leaves)\n                group.leaves = [];\n            group.leaves.push(m.id);\n        }\n        else {\n            var g = group;\n            m.gid = groups.length;\n            if (!m.isIsland()) {\n                g = { id: m.gid };\n                if (!group.groups)\n                    group.groups = [];\n                group.groups.push(m.gid);\n                groups.push(g);\n            }\n            toGroups(m.children, g, groups);\n        }\n    });\n}\nvar Module = (function () {\n    function Module(id, outgoing, incoming, children) {\n        if (outgoing === void 0) { outgoing = new LinkSets(); }\n        if (incoming === void 0) { incoming = new LinkSets(); }\n        if (children === void 0) { children = new ModuleSet(); }\n        this.id = id;\n        this.outgoing = outgoing;\n        this.incoming = incoming;\n        this.children = children;\n    }\n    Module.prototype.getEdges = function (es) {\n        var _this = this;\n        this.outgoing.forAll(function (ms, edgetype) {\n            ms.forAll(function (target) {\n                es.push(new PowerEdge(_this.id, target.id, edgetype));\n            });\n        });\n    };\n    Module.prototype.isLeaf = function () {\n        return this.children.count() === 0;\n    };\n    Module.prototype.isIsland = function () {\n        return this.outgoing.count() === 0 &amp;&amp; this.incoming.count() === 0;\n    };\n    return Module;\n})();\nexports.Module = Module;\nfunction intersection(m, n) {\n    var i = {};\n    for (var v in m)\n        if (v in n)\n            i[v] = m[v];\n    return i;\n}\nvar ModuleSet = (function () {\n    function ModuleSet() {\n        this.table = {};\n    }\n    ModuleSet.prototype.count = function () {\n        return Object.keys(this.table).length;\n    };\n    ModuleSet.prototype.intersection = function (other) {\n        var result = new ModuleSet();\n        result.table = intersection(this.table, other.table);\n        return result;\n    };\n    ModuleSet.prototype.intersectionCount = function (other) {\n        return this.intersection(other).count();\n    };\n    ModuleSet.prototype.contains = function (id) {\n        return id in this.table;\n    };\n    ModuleSet.prototype.add = function (m) {\n        this.table[m.id] = m;\n    };\n    ModuleSet.prototype.remove = function (m) {\n        delete this.table[m.id];\n    };\n    ModuleSet.prototype.forAll = function (f) {\n        for (var mid in this.table) {\n            f(this.table[mid]);\n        }\n    };\n    ModuleSet.prototype.modules = function () {\n        var vs = [];\n        this.forAll(function (m) { return vs.push(m); });\n        return vs;\n    };\n    return ModuleSet;\n})();\nexports.ModuleSet = ModuleSet;\nvar LinkSets = (function () {\n    function LinkSets() {\n        this.sets = {};\n        this.n = 0;\n    }\n    LinkSets.prototype.count = function () {\n        return this.n;\n    };\n    LinkSets.prototype.contains = function (id) {\n        var result = false;\n        this.forAllModules(function (m) {\n            if (!result &amp;&amp; m.id == id) {\n                result = true;\n            }\n        });\n        return result;\n    };\n    LinkSets.prototype.add = function (linktype, m) {\n        var s = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\n        s.add(m);\n        ++this.n;\n    };\n    LinkSets.prototype.remove = function (linktype, m) {\n        var ms = this.sets[linktype];\n        ms.remove(m);\n        if (ms.count() === 0) {\n            delete this.sets[linktype];\n        }\n        --this.n;\n    };\n    LinkSets.prototype.forAll = function (f) {\n        for (var linktype in this.sets) {\n            f(this.sets[linktype], linktype);\n        }\n    };\n    LinkSets.prototype.forAllModules = function (f) {\n        this.forAll(function (ms, lt) { return ms.forAll(f); });\n    };\n    LinkSets.prototype.intersection = function (other) {\n        var result = new LinkSets();\n        this.forAll(function (ms, lt) {\n            if (lt in other.sets) {\n                var i = ms.intersection(other.sets[lt]), n = i.count();\n                if (n &gt; 0) {\n                    result.sets[lt] = i;\n                    result.n += n;\n                }\n            }\n        });\n        return result;\n    };\n    return LinkSets;\n})();\nexports.LinkSets = LinkSets;\nfunction intersectionCount(m, n) {\n    return Object.keys(intersection(m, n)).length;\n}\nfunction getGroups(nodes, links, la) {\n    var n = nodes.length, c = new Configuration(n, links, la);\n    while (c.greedyMerge())\n        ;\n    var powerEdges = [];\n    var g = c.getGroupHierarchy(powerEdges);\n    powerEdges.forEach(function (e) {\n        var f = function (end) {\n            var g = e[end];\n            if (typeof g == \&quot;number\&quot;)\n                e[end] = nodes[g];\n        };\n        f(\&quot;source\&quot;);\n        f(\&quot;target\&quot;);\n    });\n    return { groups: g, powerEdges: powerEdges };\n}\nexports.getGroups = getGroups;\n&quot;,&quot;var PairingHeap = require(&#39;./pairing-heap&#39;);\nvar PairingHeap = PairingHeap.PairingHeap;\n/**\n * @class PriorityQueue a min priority queue backed by a pairing heap\n */\nvar PriorityQueue = (function () {\n    function PriorityQueue(lessThan) {\n        this.lessThan = lessThan;\n    }\n    /**\n     * @method top\n     * @return the top element (the min element as defined by lessThan)\n     */\n    PriorityQueue.prototype.top = function () {\n        if (this.empty()) {\n            return null;\n        }\n        return this.root.elem;\n    };\n    /**\n     * @method push\n     * put things on the heap\n     */\n    PriorityQueue.prototype.push = function () {\n        var args = [];\n        for (var _i = 0; _i &lt; arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        var pairingNode;\n        for (var i = 0, arg; arg = args[i]; ++i) {\n            pairingNode = new PairingHeap(arg);\n            this.root = this.empty() ? pairingNode : this.root.merge(pairingNode, this.lessThan);\n        }\n        return pairingNode;\n    };\n    /**\n     * @method empty\n     * @return true if no more elements in queue\n     */\n    PriorityQueue.prototype.empty = function () {\n        return !this.root || !this.root.elem;\n    };\n    /**\n     * @method isHeap check heap condition (for testing)\n     * @return true if queue is in valid state\n     */\n    PriorityQueue.prototype.isHeap = function () {\n        return this.root.isHeap(this.lessThan);\n    };\n    /**\n     * @method forEach apply f to each element of the queue\n     * @param f function to apply\n     */\n    PriorityQueue.prototype.forEach = function (f) {\n        this.root.forEach(f);\n    };\n    /**\n     * @method pop remove and return the min element from the queue\n     */\n    PriorityQueue.prototype.pop = function () {\n        if (this.empty()) {\n            return null;\n        }\n        var obj = this.root.min();\n        this.root = this.root.removeMin(this.lessThan);\n        return obj;\n    };\n    /**\n     * @method reduceKey reduce the key value of the specified heap node\n     */\n    PriorityQueue.prototype.reduceKey = function (heapNode, newKey, setHeapNode) {\n        if (setHeapNode === void 0) { setHeapNode = null; }\n        this.root = this.root.decreaseKey(heapNode, newKey, setHeapNode, this.lessThan);\n    };\n    PriorityQueue.prototype.toString = function (selector) {\n        return this.root.toString(selector);\n    };\n    /**\n     * @method count\n     * @return number of elements in queue\n     */\n    PriorityQueue.prototype.count = function () {\n        return this.root.count();\n    };\n    return PriorityQueue;\n})();\nexports.PriorityQueue = PriorityQueue;\n&quot;,&quot;// Linear congruential pseudo random number generator\nvar PseudoRandom = (function () {\n    function PseudoRandom(seed) {\n        if (seed === void 0) { seed = 1; }\n        this.seed = seed;\n        this.a = 214013;\n        this.c = 2531011;\n        this.m = 2147483648;\n        this.range = 32767;\n    }\n    // random real between 0 and 1\n    PseudoRandom.prototype.getNext = function () {\n        this.seed = (this.seed * this.a + this.c) % this.m;\n        return (this.seed &gt;&gt; 16) / this.range;\n    };\n    // random real between min and max\n    PseudoRandom.prototype.getNextBetween = function (min, max) {\n        return min + this.getNext() * (max - min);\n    };\n    return PseudoRandom;\n})();\nexports.PseudoRandom = PseudoRandom;\n&quot;,&quot;var __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar RBTree = require(&#39;bintrees/lib/rbtree&#39;);\nvar vpsc = require(&#39;./vpsc&#39;);\nvar Variable = vpsc.Variable;\nvar Constraint = vpsc.Constraint;\nfunction computeGroupBounds(g) {\n    g.bounds = typeof g.leaves !== \&quot;undefined\&quot; ? g.leaves.reduce(function (r, c) { return c.bounds.union(r); }, Rectangle.empty()) : Rectangle.empty();\n    if (typeof g.groups !== \&quot;undefined\&quot;)\n        g.bounds = g.groups.reduce(function (r, c) { return computeGroupBounds(c).union(r); }, g.bounds);\n    g.bounds = g.bounds.inflate(g.padding);\n    return g.bounds;\n}\nexports.computeGroupBounds = computeGroupBounds;\nvar Rectangle = (function () {\n    function Rectangle(x, X, y, Y) {\n        this.x = x;\n        this.X = X;\n        this.y = y;\n        this.Y = Y;\n    }\n    Rectangle.empty = function () {\n        return new Rectangle(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);\n    };\n    Rectangle.prototype.cx = function () {\n        return (this.x + this.X) / 2;\n    };\n    Rectangle.prototype.cy = function () {\n        return (this.y + this.Y) / 2;\n    };\n    Rectangle.prototype.overlapX = function (r) {\n        var ux = this.cx(), vx = r.cx();\n        if (ux &lt;= vx &amp;&amp; r.x &lt; this.X)\n            return this.X - r.x;\n        if (vx &lt;= ux &amp;&amp; this.x &lt; r.X)\n            return r.X - this.x;\n        return 0;\n    };\n    Rectangle.prototype.overlapY = function (r) {\n        var uy = this.cy(), vy = r.cy();\n        if (uy &lt;= vy &amp;&amp; r.y &lt; this.Y)\n            return this.Y - r.y;\n        if (vy &lt;= uy &amp;&amp; this.y &lt; r.Y)\n            return r.Y - this.y;\n        return 0;\n    };\n    Rectangle.prototype.setXCentre = function (cx) {\n        var dx = cx - this.cx();\n        this.x += dx;\n        this.X += dx;\n    };\n    Rectangle.prototype.setYCentre = function (cy) {\n        var dy = cy - this.cy();\n        this.y += dy;\n        this.Y += dy;\n    };\n    Rectangle.prototype.width = function () {\n        return this.X - this.x;\n    };\n    Rectangle.prototype.height = function () {\n        return this.Y - this.y;\n    };\n    Rectangle.prototype.union = function (r) {\n        return new Rectangle(Math.min(this.x, r.x), Math.max(this.X, r.X), Math.min(this.y, r.y), Math.max(this.Y, r.Y));\n    };\n    /**\n     * return any intersection points between the given line and the sides of this rectangle\n     * @method lineIntersection\n     * @param x1 number first x coord of line\n     * @param y1 number first y coord of line\n     * @param x2 number second x coord of line\n     * @param y2 number second y coord of line\n     * @return any intersection points found\n     */\n    Rectangle.prototype.lineIntersections = function (x1, y1, x2, y2) {\n        var sides = [[this.x, this.y, this.X, this.y], [this.X, this.y, this.X, this.Y], [this.X, this.Y, this.x, this.Y], [this.x, this.Y, this.x, this.y]];\n        var intersections = [];\n        for (var i = 0; i &lt; 4; ++i) {\n            var r = Rectangle.lineIntersection(x1, y1, x2, y2, sides[i][0], sides[i][1], sides[i][2], sides[i][3]);\n            if (r !== null)\n                intersections.push({ x: r.x, y: r.y });\n        }\n        return intersections;\n    };\n    /**\n     * return any intersection points between a line extending from the centre of this rectangle to the given point,\n     *  and the sides of this rectangle\n     * @method lineIntersection\n     * @param x2 number second x coord of line\n     * @param y2 number second y coord of line\n     * @return any intersection points found\n     */\n    Rectangle.prototype.rayIntersection = function (x2, y2) {\n        var ints = this.lineIntersections(this.cx(), this.cy(), x2, y2);\n        return ints.length &gt; 0 ? ints[0] : null;\n    };\n    Rectangle.prototype.vertices = function () {\n        return [\n            { x: this.x, y: this.y },\n            { x: this.X, y: this.y },\n            { x: this.X, y: this.Y },\n            { x: this.x, y: this.Y },\n            { x: this.x, y: this.y }\n        ];\n    };\n    Rectangle.lineIntersection = function (x1, y1, x2, y2, x3, y3, x4, y4) {\n        var dx12 = x2 - x1, dx34 = x4 - x3, dy12 = y2 - y1, dy34 = y4 - y3, denominator = dy34 * dx12 - dx34 * dy12;\n        if (denominator == 0)\n            return null;\n        var dx31 = x1 - x3, dy31 = y1 - y3, numa = dx34 * dy31 - dy34 * dx31, a = numa / denominator, numb = dx12 * dy31 - dy12 * dx31, b = numb / denominator;\n        if (a &gt;= 0 &amp;&amp; a &lt;= 1 &amp;&amp; b &gt;= 0 &amp;&amp; b &lt;= 1) {\n            return {\n                x: x1 + a * dx12,\n                y: y1 + a * dy12\n            };\n        }\n        return null;\n    };\n    Rectangle.prototype.inflate = function (pad) {\n        return new Rectangle(this.x - pad, this.X + pad, this.y - pad, this.Y + pad);\n    };\n    return Rectangle;\n})();\nexports.Rectangle = Rectangle;\nfunction makeEdgeBetween(link, source, target, ah) {\n    var si = source.rayIntersection(target.cx(), target.cy());\n    if (!si)\n        si = { x: source.cx(), y: source.cy() };\n    var ti = target.rayIntersection(source.cx(), source.cy());\n    if (!ti)\n        ti = { x: target.cx(), y: target.cy() };\n    var dx = ti.x - si.x, dy = ti.y - si.y, l = Math.sqrt(dx * dx + dy * dy), al = l - ah;\n    link.sourceIntersection = si;\n    link.targetIntersection = ti;\n    link.arrowStart = { x: si.x + al * dx / l, y: si.y + al * dy / l };\n}\nexports.makeEdgeBetween = makeEdgeBetween;\nfunction makeEdgeTo(s, target, ah) {\n    var ti = target.rayIntersection(s.x, s.y);\n    if (!ti)\n        ti = { x: target.cx(), y: target.cy() };\n    var dx = ti.x - s.x, dy = ti.y - s.y, l = Math.sqrt(dx * dx + dy * dy);\n    return { x: ti.x - ah * dx / l, y: ti.y - ah * dy / l };\n}\nexports.makeEdgeTo = makeEdgeTo;\nvar Node = (function () {\n    function Node(v, r, pos) {\n        this.v = v;\n        this.r = r;\n        this.pos = pos;\n        this.prev = makeRBTree();\n        this.next = makeRBTree();\n    }\n    return Node;\n})();\nvar Event = (function () {\n    function Event(isOpen, v, pos) {\n        this.isOpen = isOpen;\n        this.v = v;\n        this.pos = pos;\n    }\n    return Event;\n})();\nfunction compareEvents(a, b) {\n    if (a.pos &gt; b.pos) {\n        return 1;\n    }\n    if (a.pos &lt; b.pos) {\n        return -1;\n    }\n    if (a.isOpen) {\n        // open must come before close\n        return -1;\n    }\n    return 0;\n}\nfunction makeRBTree() {\n    return new RBTree(function (a, b) { return a.pos - b.pos; });\n}\nvar xRect = {\n    getCentre: function (r) { return r.cx(); },\n    getOpen: function (r) { return r.y; },\n    getClose: function (r) { return r.Y; },\n    getSize: function (r) { return r.width(); },\n    makeRect: function (open, close, center, size) { return new Rectangle(center - size / 2, center + size / 2, open, close); },\n    findNeighbours: findXNeighbours\n};\nvar yRect = {\n    getCentre: function (r) { return r.cy(); },\n    getOpen: function (r) { return r.x; },\n    getClose: function (r) { return r.X; },\n    getSize: function (r) { return r.height(); },\n    makeRect: function (open, close, center, size) { return new Rectangle(open, close, center - size / 2, center + size / 2); },\n    findNeighbours: findYNeighbours\n};\nfunction generateGroupConstraints(root, f, minSep, isContained) {\n    if (isContained === void 0) { isContained = false; }\n    var padding = root.padding, gn = typeof root.groups !== &#39;undefined&#39; ? root.groups.length : 0, ln = typeof root.leaves !== &#39;undefined&#39; ? root.leaves.length : 0, childConstraints = !gn ? [] : root.groups.reduce(function (ccs, g) { return ccs.concat(generateGroupConstraints(g, f, minSep, true)); }, []), n = (isContained ? 2 : 0) + ln + gn, vs = new Array(n), rs = new Array(n), i = 0, add = function (r, v) {\n        rs[i] = r;\n        vs[i++] = v;\n    };\n    if (isContained) {\n        // if this group is contained by another, then we add two dummy vars and rectangles for the borders\n        var b = root.bounds, c = f.getCentre(b), s = f.getSize(b) / 2, open = f.getOpen(b), close = f.getClose(b), min = c - s + padding / 2, max = c + s - padding / 2;\n        root.minVar.desiredPosition = min;\n        add(f.makeRect(open, close, min, padding), root.minVar);\n        root.maxVar.desiredPosition = max;\n        add(f.makeRect(open, close, max, padding), root.maxVar);\n    }\n    if (ln)\n        root.leaves.forEach(function (l) { return add(l.bounds, l.variable); });\n    if (gn)\n        root.groups.forEach(function (g) {\n            var b = g.bounds;\n            add(f.makeRect(f.getOpen(b), f.getClose(b), f.getCentre(b), f.getSize(b)), g.minVar);\n        });\n    var cs = generateConstraints(rs, vs, f, minSep);\n    if (gn) {\n        vs.forEach(function (v) {\n            v.cOut = [], v.cIn = [];\n        });\n        cs.forEach(function (c) {\n            c.left.cOut.push(c), c.right.cIn.push(c);\n        });\n        root.groups.forEach(function (g) {\n            var gapAdjustment = (g.padding - f.getSize(g.bounds)) / 2;\n            g.minVar.cIn.forEach(function (c) { return c.gap += gapAdjustment; });\n            g.minVar.cOut.forEach(function (c) {\n                c.left = g.maxVar;\n                c.gap += gapAdjustment;\n            });\n        });\n    }\n    return childConstraints.concat(cs);\n}\nfunction generateConstraints(rs, vars, rect, minSep) {\n    var i, n = rs.length;\n    var N = 2 * n;\n    console.assert(vars.length &gt;= n);\n    var events = new Array(N);\n    for (i = 0; i &lt; n; ++i) {\n        var r = rs[i];\n        var v = new Node(vars[i], r, rect.getCentre(r));\n        events[i] = new Event(true, v, rect.getOpen(r));\n        events[i + n] = new Event(false, v, rect.getClose(r));\n    }\n    events.sort(compareEvents);\n    var cs = new Array();\n    var scanline = makeRBTree();\n    for (i = 0; i &lt; N; ++i) {\n        var e = events[i];\n        var v = e.v;\n        if (e.isOpen) {\n            scanline.insert(v);\n            rect.findNeighbours(v, scanline);\n        }\n        else {\n            // close event\n            scanline.remove(v);\n            var makeConstraint = function (l, r) {\n                var sep = (rect.getSize(l.r) + rect.getSize(r.r)) / 2 + minSep;\n                cs.push(new Constraint(l.v, r.v, sep));\n            };\n            var visitNeighbours = function (forward, reverse, mkcon) {\n                var u, it = v[forward].iterator();\n                while ((u = it[forward]()) !== null) {\n                    mkcon(u, v);\n                    u[reverse].remove(v);\n                }\n            };\n            visitNeighbours(\&quot;prev\&quot;, \&quot;next\&quot;, function (u, v) { return makeConstraint(u, v); });\n            visitNeighbours(\&quot;next\&quot;, \&quot;prev\&quot;, function (u, v) { return makeConstraint(v, u); });\n        }\n    }\n    console.assert(scanline.size === 0);\n    return cs;\n}\nfunction findXNeighbours(v, scanline) {\n    var f = function (forward, reverse) {\n        var it = scanline.findIter(v);\n        var u;\n        while ((u = it[forward]()) !== null) {\n            var uovervX = u.r.overlapX(v.r);\n            if (uovervX &lt;= 0 || uovervX &lt;= u.r.overlapY(v.r)) {\n                v[forward].insert(u);\n                u[reverse].insert(v);\n            }\n            if (uovervX &lt;= 0) {\n                break;\n            }\n        }\n    };\n    f(\&quot;next\&quot;, \&quot;prev\&quot;);\n    f(\&quot;prev\&quot;, \&quot;next\&quot;);\n}\nfunction findYNeighbours(v, scanline) {\n    var f = function (forward, reverse) {\n        var u = scanline.findIter(v)[forward]();\n        if (u !== null &amp;&amp; u.r.overlapX(v.r) &gt; 0) {\n            v[forward].insert(u);\n            u[reverse].insert(v);\n        }\n    };\n    f(\&quot;next\&quot;, \&quot;prev\&quot;);\n    f(\&quot;prev\&quot;, \&quot;next\&quot;);\n}\nfunction generateXConstraints(rs, vars) {\n    return generateConstraints(rs, vars, xRect, 1e-6);\n}\nexports.generateXConstraints = generateXConstraints;\nfunction generateYConstraints(rs, vars) {\n    return generateConstraints(rs, vars, yRect, 1e-6);\n}\nexports.generateYConstraints = generateYConstraints;\nfunction generateXGroupConstraints(root) {\n    return generateGroupConstraints(root, xRect, 1e-6);\n}\nexports.generateXGroupConstraints = generateXGroupConstraints;\nfunction generateYGroupConstraints(root) {\n    return generateGroupConstraints(root, yRect, 1e-6);\n}\nexports.generateYGroupConstraints = generateYGroupConstraints;\nfunction removeOverlaps(rs) {\n    var vs = rs.map(function (r) { return new Variable(r.cx()); });\n    var cs = generateXConstraints(rs, vs);\n    var solver = new vpsc.Solver(vs, cs);\n    solver.solve();\n    vs.forEach(function (v, i) { return rs[i].setXCentre(v.position()); });\n    vs = rs.map(function (r) {\n        return new Variable(r.cy());\n    });\n    cs = generateYConstraints(rs, vs);\n    solver = new vpsc.Solver(vs, cs);\n    solver.solve();\n    vs.forEach(function (v, i) { return rs[i].setYCentre(v.position()); });\n}\nexports.removeOverlaps = removeOverlaps;\nvar IndexedVariable = (function (_super) {\n    __extends(IndexedVariable, _super);\n    function IndexedVariable(index, w) {\n        _super.call(this, 0, w);\n        this.index = index;\n    }\n    return IndexedVariable;\n})(Variable);\nvar Projection = (function () {\n    function Projection(nodes, groups, rootGroup, constraints, avoidOverlaps) {\n        var _this = this;\n        if (rootGroup === void 0) { rootGroup = null; }\n        if (constraints === void 0) { constraints = null; }\n        if (avoidOverlaps === void 0) { avoidOverlaps = false; }\n        this.nodes = nodes;\n        this.groups = groups;\n        this.rootGroup = rootGroup;\n        this.avoidOverlaps = avoidOverlaps;\n        this.variables = nodes.map(function (v, i) {\n            return v.variable = new IndexedVariable(i, 1);\n        });\n        if (constraints)\n            this.createConstraints(constraints);\n        if (avoidOverlaps &amp;&amp; rootGroup &amp;&amp; typeof rootGroup.groups !== &#39;undefined&#39;) {\n            nodes.forEach(function (v) {\n                if (!v.width || !v.height) {\n                    //If undefined, default to nothing\n                    v.bounds = new Rectangle(v.x, v.x, v.y, v.y);\n                    return;\n                }\n                var w2 = v.width / 2, h2 = v.height / 2;\n                v.bounds = new Rectangle(v.x - w2, v.x + w2, v.y - h2, v.y + h2);\n            });\n            computeGroupBounds(rootGroup);\n            var i = nodes.length;\n            groups.forEach(function (g) {\n                _this.variables[i] = g.minVar = new IndexedVariable(i++, 0.01);\n                _this.variables[i] = g.maxVar = new IndexedVariable(i++, 0.01);\n            });\n        }\n    }\n    Projection.prototype.createSeparation = function (c) {\n        return new Constraint(this.nodes[c.left].variable, this.nodes[c.right].variable, c.gap, typeof c.equality !== \&quot;undefined\&quot; ? c.equality : false);\n    };\n    Projection.prototype.makeFeasible = function (c) {\n        var _this = this;\n        if (!this.avoidOverlaps)\n            return;\n        var axis = &#39;x&#39;, dim = &#39;width&#39;;\n        if (c.axis === &#39;x&#39;)\n            axis = &#39;y&#39;, dim = &#39;height&#39;;\n        var vs = c.offsets.map(function (o) { return _this.nodes[o.node]; }).sort(function (a, b) { return a[axis] - b[axis]; });\n        var p = null;\n        vs.forEach(function (v) {\n            if (p)\n                v[axis] = p[axis] + p[dim] + 1;\n            p = v;\n        });\n    };\n    Projection.prototype.createAlignment = function (c) {\n        var _this = this;\n        var u = this.nodes[c.offsets[0].node].variable;\n        this.makeFeasible(c);\n        var cs = c.axis === &#39;x&#39; ? this.xConstraints : this.yConstraints;\n        c.offsets.slice(1).forEach(function (o) {\n            var v = _this.nodes[o.node].variable;\n            cs.push(new Constraint(u, v, o.offset, true));\n        });\n    };\n    Projection.prototype.createConstraints = function (constraints) {\n        var _this = this;\n        var isSep = function (c) { return typeof c.type === &#39;undefined&#39; || c.type === &#39;separation&#39;; };\n        this.xConstraints = constraints.filter(function (c) { return c.axis === \&quot;x\&quot; &amp;&amp; isSep(c); }).map(function (c) { return _this.createSeparation(c); });\n        this.yConstraints = constraints.filter(function (c) { return c.axis === \&quot;y\&quot; &amp;&amp; isSep(c); }).map(function (c) { return _this.createSeparation(c); });\n        constraints.filter(function (c) { return c.type === &#39;alignment&#39;; }).forEach(function (c) { return _this.createAlignment(c); });\n    };\n    Projection.prototype.setupVariablesAndBounds = function (x0, y0, desired, getDesired) {\n        this.nodes.forEach(function (v, i) {\n            if (v.fixed) {\n                v.variable.weight = 1000;\n                desired[i] = getDesired(v);\n            }\n            else {\n                v.variable.weight = 1;\n            }\n            var w = (v.width || 0) / 2, h = (v.height || 0) / 2;\n            var ix = x0[i], iy = y0[i];\n            v.bounds = new Rectangle(ix - w, ix + w, iy - h, iy + h);\n        });\n    };\n    Projection.prototype.xProject = function (x0, y0, x) {\n        if (!this.rootGroup &amp;&amp; !(this.avoidOverlaps || this.xConstraints))\n            return;\n        this.project(x0, y0, x0, x, function (v) { return v.px; }, this.xConstraints, generateXGroupConstraints, function (v) { return v.bounds.setXCentre(x[v.variable.index] = v.variable.position()); }, function (g) {\n            var xmin = x[g.minVar.index] = g.minVar.position();\n            var xmax = x[g.maxVar.index] = g.maxVar.position();\n            var p2 = g.padding / 2;\n            g.bounds.x = xmin - p2;\n            g.bounds.X = xmax + p2;\n        });\n    };\n    Projection.prototype.yProject = function (x0, y0, y) {\n        if (!this.rootGroup &amp;&amp; !this.yConstraints)\n            return;\n        this.project(x0, y0, y0, y, function (v) { return v.py; }, this.yConstraints, generateYGroupConstraints, function (v) { return v.bounds.setYCentre(y[v.variable.index] = v.variable.position()); }, function (g) {\n            var ymin = y[g.minVar.index] = g.minVar.position();\n            var ymax = y[g.maxVar.index] = g.maxVar.position();\n            var p2 = g.padding / 2;\n            g.bounds.y = ymin - p2;\n            ;\n            g.bounds.Y = ymax + p2;\n        });\n    };\n    Projection.prototype.projectFunctions = function () {\n        var _this = this;\n        return [\n            function (x0, y0, x) { return _this.xProject(x0, y0, x); },\n            function (x0, y0, y) { return _this.yProject(x0, y0, y); }\n        ];\n    };\n    Projection.prototype.project = function (x0, y0, start, desired, getDesired, cs, generateConstraints, updateNodeBounds, updateGroupBounds) {\n        this.setupVariablesAndBounds(x0, y0, desired, getDesired);\n        if (this.rootGroup &amp;&amp; this.avoidOverlaps) {\n            computeGroupBounds(this.rootGroup);\n            cs = cs.concat(generateConstraints(this.rootGroup));\n        }\n        this.solve(this.variables, cs, start, desired);\n        this.nodes.forEach(updateNodeBounds);\n        if (this.rootGroup &amp;&amp; this.avoidOverlaps) {\n            this.groups.forEach(updateGroupBounds);\n        }\n    };\n    Projection.prototype.solve = function (vs, cs, starting, desired) {\n        var solver = new vpsc.Solver(vs, cs);\n        solver.setStartingPositions(starting);\n        solver.setDesiredPositions(desired);\n        solver.solve();\n    };\n    return Projection;\n})();\nexports.Projection = Projection;\n&quot;,&quot;var PriorityQueue = require(&#39;./pqueue&#39;);\nvar PriorityQueue = PriorityQueue.PriorityQueue;\nvar Neighbour = (function () {\n    function Neighbour(id, distance) {\n        this.id = id;\n        this.distance = distance;\n    }\n    return Neighbour;\n})();\nvar Node = (function () {\n    function Node(id) {\n        this.id = id;\n        this.neighbours = [];\n    }\n    return Node;\n})();\nvar QueueEntry = (function () {\n    function QueueEntry(node, prev, d) {\n        this.node = node;\n        this.prev = prev;\n        this.d = d;\n    }\n    return QueueEntry;\n})();\n/**\n * calculates all-pairs shortest paths or shortest paths from a single node\n * @class Calculator\n * @constructor\n * @param n {number} number of nodes\n * @param es {Edge[]} array of edges\n */\nvar Calculator = (function () {\n    function Calculator(n, es, getSourceIndex, getTargetIndex, getLength) {\n        this.n = n;\n        this.es = es;\n        this.neighbours = new Array(this.n);\n        var i = this.n;\n        while (i--)\n            this.neighbours[i] = new Node(i);\n        i = this.es.length;\n        while (i--) {\n            var e = this.es[i];\n            var u = getSourceIndex(e), v = getTargetIndex(e);\n            var d = getLength(e);\n            this.neighbours[u].neighbours.push(new Neighbour(v, d));\n            this.neighbours[v].neighbours.push(new Neighbour(u, d));\n        }\n    }\n    /**\n     * compute shortest paths for graph over n nodes with edges an array of source/target pairs\n     * edges may optionally have a length attribute.  1 is the default.\n     * Uses Johnson&#39;s algorithm.\n     *\n     * @method DistanceMatrix\n     * @return the distance matrix\n     */\n    Calculator.prototype.DistanceMatrix = function () {\n        var D = new Array(this.n);\n        for (var i = 0; i &lt; this.n; ++i) {\n            D[i] = this.dijkstraNeighbours(i);\n        }\n        return D;\n    };\n    /**\n     * get shortest paths from a specified start node\n     * @method DistancesFromNode\n     * @param start node index\n     * @return array of path lengths\n     */\n    Calculator.prototype.DistancesFromNode = function (start) {\n        return this.dijkstraNeighbours(start);\n    };\n    Calculator.prototype.PathFromNodeToNode = function (start, end) {\n        return this.dijkstraNeighbours(start, end);\n    };\n    // find shortest path from start to end, with the opportunity at \n    // each edge traversal to compute a custom cost based on the \n    // previous edge.  For example, to penalise bends.\n    Calculator.prototype.PathFromNodeToNodeWithPrevCost = function (start, end, prevCost) {\n        var q = new PriorityQueue(function (a, b) { return a.d &lt;= b.d; }), u = this.neighbours[start], qu = new QueueEntry(u, null, 0), visitedFrom = {};\n        q.push(qu);\n        while (!q.empty()) {\n            qu = q.pop();\n            u = qu.node;\n            if (u.id === end) {\n                break;\n            }\n            var i = u.neighbours.length;\n            while (i--) {\n                var neighbour = u.neighbours[i], v = this.neighbours[neighbour.id];\n                // don&#39;t double back\n                if (qu.prev &amp;&amp; v.id === qu.prev.node.id)\n                    continue;\n                // don&#39;t retraverse an edge if it has already been explored\n                // from a lower cost route\n                var viduid = v.id + &#39;,&#39; + u.id;\n                if (viduid in visitedFrom &amp;&amp; visitedFrom[viduid] &lt;= qu.d)\n                    continue;\n                var cc = qu.prev ? prevCost(qu.prev.node.id, u.id, v.id) : 0, t = qu.d + neighbour.distance + cc;\n                // store cost of this traversal\n                visitedFrom[viduid] = t;\n                q.push(new QueueEntry(v, qu, t));\n            }\n        }\n        var path = [];\n        while (qu.prev) {\n            qu = qu.prev;\n            path.push(qu.node.id);\n        }\n        return path;\n    };\n    Calculator.prototype.dijkstraNeighbours = function (start, dest) {\n        if (dest === void 0) { dest = -1; }\n        var q = new PriorityQueue(function (a, b) { return a.d &lt;= b.d; }), i = this.neighbours.length, d = new Array(i);\n        while (i--) {\n            var node = this.neighbours[i];\n            node.d = i === start ? 0 : Number.POSITIVE_INFINITY;\n            node.q = q.push(node);\n        }\n        while (!q.empty()) {\n            // console.log(q.toString(function (u) { return u.id + \&quot;=\&quot; + (u.d === Number.POSITIVE_INFINITY ? \&quot;\\u221E\&quot; : u.d.toFixed(2) )}));\n            var u = q.pop();\n            d[u.id] = u.d;\n            if (u.id === dest) {\n                var path = [];\n                var v = u;\n                while (typeof v.prev !== &#39;undefined&#39;) {\n                    path.push(v.prev.id);\n                    v = v.prev;\n                }\n                return path;\n            }\n            i = u.neighbours.length;\n            while (i--) {\n                var neighbour = u.neighbours[i];\n                var v = this.neighbours[neighbour.id];\n                var t = u.d + neighbour.distance;\n                if (u.d !== Number.MAX_VALUE &amp;&amp; v.d &gt; t) {\n                    v.d = t;\n                    v.prev = u;\n                    q.reduceKey(v.q, v, function (e, q) { return e.q = q; });\n                }\n            }\n        }\n        return d;\n    };\n    return Calculator;\n})();\nexports.Calculator = Calculator;\n&quot;,&quot;var Vert = (function () {\n    function Vert(id, x, y, node, line) {\n        if (node === void 0) { node = null; }\n        if (line === void 0) { line = null; }\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.node = node;\n        this.line = line;\n    }\n    return Vert;\n})();\nexports.Vert = Vert;\n&quot;,&quot;var Variable = (function () {\n    function Variable(desiredPosition, weight, scale) {\n        if (weight === void 0) { weight = 1; }\n        if (scale === void 0) { scale = 1; }\n        this.desiredPosition = desiredPosition;\n        this.weight = weight;\n        this.scale = scale;\n        this.offset = 0;\n    }\n    Variable.prototype.dfdv = function () {\n        return 2.0 * this.weight * (this.position() - this.desiredPosition);\n    };\n    Variable.prototype.position = function () {\n        return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;\n    };\n    // visit neighbours by active constraints within the same block\n    Variable.prototype.visitNeighbours = function (prev, f) {\n        var ff = function (c, next) { return c.active &amp;&amp; prev !== next &amp;&amp; f(c, next); };\n        this.cOut.forEach(function (c) { return ff(c, c.right); });\n        this.cIn.forEach(function (c) { return ff(c, c.left); });\n    };\n    return Variable;\n})();\nexports.Variable = Variable;\nvar PositionStats = (function () {\n    function PositionStats(scale) {\n        this.scale = scale;\n        this.AB = 0;\n        this.AD = 0;\n        this.A2 = 0;\n    }\n    PositionStats.prototype.addVariable = function (v) {\n        var ai = this.scale / v.scale;\n        var bi = v.offset / v.scale;\n        var wi = v.weight;\n        this.AB += wi * ai * bi;\n        this.AD += wi * ai * v.desiredPosition;\n        this.A2 += wi * ai * ai;\n    };\n    PositionStats.prototype.getPosn = function () {\n        return (this.AD - this.AB) / this.A2;\n    };\n    return PositionStats;\n})();\nexports.PositionStats = PositionStats;\nvar Constraint = (function () {\n    function Constraint(left, right, gap, equality) {\n        if (equality === void 0) { equality = false; }\n        this.left = left;\n        this.right = right;\n        this.gap = gap;\n        this.equality = equality;\n        this.active = false;\n        this.unsatisfiable = false;\n        this.left = left;\n        this.right = right;\n        this.gap = gap;\n        this.equality = equality;\n    }\n    Constraint.prototype.slack = function () {\n        return this.unsatisfiable ? Number.MAX_VALUE : this.right.scale * this.right.position() - this.gap - this.left.scale * this.left.position();\n    };\n    return Constraint;\n})();\nexports.Constraint = Constraint;\nvar Block = (function () {\n    function Block(v) {\n        this.vars = [];\n        v.offset = 0;\n        this.ps = new PositionStats(v.scale);\n        this.addVariable(v);\n    }\n    Block.prototype.addVariable = function (v) {\n        v.block = this;\n        this.vars.push(v);\n        this.ps.addVariable(v);\n        this.posn = this.ps.getPosn();\n    };\n    // move the block where it needs to be to minimize cost\n    Block.prototype.updateWeightedPosition = function () {\n        this.ps.AB = this.ps.AD = this.ps.A2 = 0;\n        for (var i = 0, n = this.vars.length; i &lt; n; ++i)\n            this.ps.addVariable(this.vars[i]);\n        this.posn = this.ps.getPosn();\n    };\n    Block.prototype.compute_lm = function (v, u, postAction) {\n        var _this = this;\n        var dfdv = v.dfdv();\n        v.visitNeighbours(u, function (c, next) {\n            var _dfdv = _this.compute_lm(next, v, postAction);\n            if (next === c.right) {\n                dfdv += _dfdv * c.left.scale;\n                c.lm = _dfdv;\n            }\n            else {\n                dfdv += _dfdv * c.right.scale;\n                c.lm = -_dfdv;\n            }\n            postAction(c);\n        });\n        return dfdv / v.scale;\n    };\n    Block.prototype.populateSplitBlock = function (v, prev) {\n        var _this = this;\n        v.visitNeighbours(prev, function (c, next) {\n            next.offset = v.offset + (next === c.right ? c.gap : -c.gap);\n            _this.addVariable(next);\n            _this.populateSplitBlock(next, v);\n        });\n    };\n    // traverse the active constraint tree applying visit to each active constraint\n    Block.prototype.traverse = function (visit, acc, v, prev) {\n        var _this = this;\n        if (v === void 0) { v = this.vars[0]; }\n        if (prev === void 0) { prev = null; }\n        v.visitNeighbours(prev, function (c, next) {\n            acc.push(visit(c));\n            _this.traverse(visit, acc, next, v);\n        });\n    };\n    // calculate lagrangian multipliers on constraints and\n    // find the active constraint in this block with the smallest lagrangian.\n    // if the lagrangian is negative, then the constraint is a split candidate.  \n    Block.prototype.findMinLM = function () {\n        var m = null;\n        this.compute_lm(this.vars[0], null, function (c) {\n            if (!c.equality &amp;&amp; (m === null || c.lm &lt; m.lm))\n                m = c;\n        });\n        return m;\n    };\n    Block.prototype.findMinLMBetween = function (lv, rv) {\n        this.compute_lm(lv, null, function () {\n        });\n        var m = null;\n        this.findPath(lv, null, rv, function (c, next) {\n            if (!c.equality &amp;&amp; c.right === next &amp;&amp; (m === null || c.lm &lt; m.lm))\n                m = c;\n        });\n        return m;\n    };\n    Block.prototype.findPath = function (v, prev, to, visit) {\n        var _this = this;\n        var endFound = false;\n        v.visitNeighbours(prev, function (c, next) {\n            if (!endFound &amp;&amp; (next === to || _this.findPath(next, v, to, visit))) {\n                endFound = true;\n                visit(c, next);\n            }\n        });\n        return endFound;\n    };\n    // Search active constraint tree from u to see if there is a directed path to v.\n    // Returns true if path is found.\n    Block.prototype.isActiveDirectedPathBetween = function (u, v) {\n        if (u === v)\n            return true;\n        var i = u.cOut.length;\n        while (i--) {\n            var c = u.cOut[i];\n            if (c.active &amp;&amp; this.isActiveDirectedPathBetween(c.right, v))\n                return true;\n        }\n        return false;\n    };\n    // split the block into two by deactivating the specified constraint\n    Block.split = function (c) {\n        /* DEBUG\n                console.log(\&quot;split on \&quot; + c);\n                console.assert(c.active, \&quot;attempt to split on inactive constraint\&quot;);\n        DEBUG */\n        c.active = false;\n        return [Block.createSplitBlock(c.left), Block.createSplitBlock(c.right)];\n    };\n    Block.createSplitBlock = function (startVar) {\n        var b = new Block(startVar);\n        b.populateSplitBlock(startVar, null);\n        return b;\n    };\n    // find a split point somewhere between the specified variables\n    Block.prototype.splitBetween = function (vl, vr) {\n        /* DEBUG\n                console.assert(vl.block === this);\n                console.assert(vr.block === this);\n        DEBUG */\n        var c = this.findMinLMBetween(vl, vr);\n        if (c !== null) {\n            var bs = Block.split(c);\n            return { constraint: c, lb: bs[0], rb: bs[1] };\n        }\n        // couldn&#39;t find a split point - for example the active path is all equality constraints\n        return null;\n    };\n    Block.prototype.mergeAcross = function (b, c, dist) {\n        c.active = true;\n        for (var i = 0, n = b.vars.length; i &lt; n; ++i) {\n            var v = b.vars[i];\n            v.offset += dist;\n            this.addVariable(v);\n        }\n        this.posn = this.ps.getPosn();\n    };\n    Block.prototype.cost = function () {\n        var sum = 0, i = this.vars.length;\n        while (i--) {\n            var v = this.vars[i], d = v.position() - v.desiredPosition;\n            sum += d * d * v.weight;\n        }\n        return sum;\n    };\n    return Block;\n})();\nexports.Block = Block;\nvar Blocks = (function () {\n    function Blocks(vs) {\n        this.vs = vs;\n        var n = vs.length;\n        this.list = new Array(n);\n        while (n--) {\n            var b = new Block(vs[n]);\n            this.list[n] = b;\n            b.blockInd = n;\n        }\n    }\n    Blocks.prototype.cost = function () {\n        var sum = 0, i = this.list.length;\n        while (i--)\n            sum += this.list[i].cost();\n        return sum;\n    };\n    Blocks.prototype.insert = function (b) {\n        /* DEBUG\n                console.assert(!this.contains(b), \&quot;blocks error: tried to reinsert block \&quot; + b.blockInd)\n        DEBUG */\n        b.blockInd = this.list.length;\n        this.list.push(b);\n        /* DEBUG\n                console.log(\&quot;insert block: \&quot; + b.blockInd);\n                this.contains(b);\n        DEBUG */\n    };\n    Blocks.prototype.remove = function (b) {\n        /* DEBUG\n                console.log(\&quot;remove block: \&quot; + b.blockInd);\n                console.assert(this.contains(b));\n        DEBUG */\n        var last = this.list.length - 1;\n        var swapBlock = this.list[last];\n        this.list.length = last;\n        if (b !== swapBlock) {\n            this.list[b.blockInd] = swapBlock;\n            swapBlock.blockInd = b.blockInd;\n        }\n    };\n    // merge the blocks on either side of the specified constraint, by copying the smaller block into the larger\n    // and deleting the smaller.\n    Blocks.prototype.merge = function (c) {\n        var l = c.left.block, r = c.right.block;\n        /* DEBUG\n                console.assert(l!==r, \&quot;attempt to merge within the same block\&quot;);\n        DEBUG */\n        var dist = c.right.offset - c.left.offset - c.gap;\n        if (l.vars.length &lt; r.vars.length) {\n            r.mergeAcross(l, c, dist);\n            this.remove(l);\n        }\n        else {\n            l.mergeAcross(r, c, -dist);\n            this.remove(r);\n        }\n        /* DEBUG\n                console.assert(Math.abs(c.slack()) &lt; 1e-6, \&quot;Error: Constraint should be at equality after merge!\&quot;);\n                console.log(\&quot;merged on \&quot; + c);\n        DEBUG */\n    };\n    Blocks.prototype.forEach = function (f) {\n        this.list.forEach(f);\n    };\n    // useful, for example, after variable desired positions change.\n    Blocks.prototype.updateBlockPositions = function () {\n        this.list.forEach(function (b) { return b.updateWeightedPosition(); });\n    };\n    // split each block across its constraint with the minimum lagrangian \n    Blocks.prototype.split = function (inactive) {\n        var _this = this;\n        this.updateBlockPositions();\n        this.list.forEach(function (b) {\n            var v = b.findMinLM();\n            if (v !== null &amp;&amp; v.lm &lt; Solver.LAGRANGIAN_TOLERANCE) {\n                b = v.left.block;\n                Block.split(v).forEach(function (nb) { return _this.insert(nb); });\n                _this.remove(b);\n                inactive.push(v);\n            }\n        });\n    };\n    return Blocks;\n})();\nexports.Blocks = Blocks;\nvar Solver = (function () {\n    function Solver(vs, cs) {\n        this.vs = vs;\n        this.cs = cs;\n        this.vs = vs;\n        vs.forEach(function (v) {\n            v.cIn = [], v.cOut = [];\n            /* DEBUG\n                        v.toString = () =&gt; \&quot;v\&quot; + vs.indexOf(v);\n            DEBUG */\n        });\n        this.cs = cs;\n        cs.forEach(function (c) {\n            c.left.cOut.push(c);\n            c.right.cIn.push(c);\n            /* DEBUG\n                        c.toString = () =&gt; c.left + \&quot;+\&quot; + c.gap + \&quot;&lt;=\&quot; + c.right + \&quot; slack=\&quot; + c.slack() + \&quot; active=\&quot; + c.active;\n            DEBUG */\n        });\n        this.inactive = cs.map(function (c) {\n            c.active = false;\n            return c;\n        });\n        this.bs = null;\n    }\n    Solver.prototype.cost = function () {\n        return this.bs.cost();\n    };\n    // set starting positions without changing desired positions.\n    // Note: it throws away any previous block structure.\n    Solver.prototype.setStartingPositions = function (ps) {\n        this.inactive = this.cs.map(function (c) {\n            c.active = false;\n            return c;\n        });\n        this.bs = new Blocks(this.vs);\n        this.bs.forEach(function (b, i) { return b.posn = ps[i]; });\n    };\n    Solver.prototype.setDesiredPositions = function (ps) {\n        this.vs.forEach(function (v, i) { return v.desiredPosition = ps[i]; });\n    };\n    /* DEBUG\n        private getId(v: Variable): number {\n            return this.vs.indexOf(v);\n        }\n    \n        // sanity check of the index integrity of the inactive list\n        checkInactive(): void {\n            var inactiveCount = 0;\n            this.cs.forEach(c=&gt; {\n                var i = this.inactive.indexOf(c);\n                console.assert(!c.active &amp;&amp; i &gt;= 0 || c.active &amp;&amp; i &lt; 0, \&quot;constraint should be in the inactive list if it is not active: \&quot; + c);\n                if (i &gt;= 0) {\n                    inactiveCount++;\n                } else {\n                    console.assert(c.active, \&quot;inactive constraint not found in inactive list: \&quot; + c);\n                }\n            });\n            console.assert(inactiveCount === this.inactive.length, inactiveCount + \&quot; inactive constraints found, \&quot; + this.inactive.length + \&quot;in inactive list\&quot;);\n        }\n        // after every call to satisfy the following should check should pass\n        checkSatisfied(): void {\n            this.cs.forEach(c=&gt;console.assert(c.slack() &gt;= vpsc.Solver.ZERO_UPPERBOUND, \&quot;Error: Unsatisfied constraint! \&quot;+c));\n        }\n    DEBUG */\n    Solver.prototype.mostViolated = function () {\n        var minSlack = Number.MAX_VALUE, v = null, l = this.inactive, n = l.length, deletePoint = n;\n        for (var i = 0; i &lt; n; ++i) {\n            var c = l[i];\n            if (c.unsatisfiable)\n                continue;\n            var slack = c.slack();\n            if (c.equality || slack &lt; minSlack) {\n                minSlack = slack;\n                v = c;\n                deletePoint = i;\n                if (c.equality)\n                    break;\n            }\n        }\n        if (deletePoint !== n &amp;&amp; (minSlack &lt; Solver.ZERO_UPPERBOUND &amp;&amp; !v.active || v.equality)) {\n            l[deletePoint] = l[n - 1];\n            l.length = n - 1;\n        }\n        return v;\n    };\n    // satisfy constraints by building block structure over violated constraints\n    // and moving the blocks to their desired positions\n    Solver.prototype.satisfy = function () {\n        if (this.bs == null) {\n            this.bs = new Blocks(this.vs);\n        }\n        /* DEBUG\n                console.log(\&quot;satisfy: \&quot; + this.bs);\n        DEBUG */\n        this.bs.split(this.inactive);\n        var v = null;\n        while ((v = this.mostViolated()) &amp;&amp; (v.equality || v.slack() &lt; Solver.ZERO_UPPERBOUND &amp;&amp; !v.active)) {\n            var lb = v.left.block, rb = v.right.block;\n            /* DEBUG\n                        console.log(\&quot;most violated is: \&quot; + v);\n                        this.bs.contains(lb);\n                        this.bs.contains(rb);\n            DEBUG */\n            if (lb !== rb) {\n                this.bs.merge(v);\n            }\n            else {\n                if (lb.isActiveDirectedPathBetween(v.right, v.left)) {\n                    // cycle found!\n                    v.unsatisfiable = true;\n                    continue;\n                }\n                // constraint is within block, need to split first\n                var split = lb.splitBetween(v.left, v.right);\n                if (split !== null) {\n                    this.bs.insert(split.lb);\n                    this.bs.insert(split.rb);\n                    this.bs.remove(lb);\n                    this.inactive.push(split.constraint);\n                }\n                else {\n                    /* DEBUG\n                                        console.log(\&quot;unsatisfiable constraint found\&quot;);\n                    DEBUG */\n                    v.unsatisfiable = true;\n                    continue;\n                }\n                if (v.slack() &gt;= 0) {\n                    /* DEBUG\n                                        console.log(\&quot;violated constraint indirectly satisfied: \&quot; + v);\n                    DEBUG */\n                    // v was satisfied by the above split!\n                    this.inactive.push(v);\n                }\n                else {\n                    /* DEBUG\n                                        console.log(\&quot;merge after split:\&quot;);\n                    DEBUG */\n                    this.bs.merge(v);\n                }\n            }\n        }\n        /* DEBUG\n                this.checkSatisfied();\n        DEBUG */\n    };\n    // repeatedly build and split block structure until we converge to an optimal solution\n    Solver.prototype.solve = function () {\n        this.satisfy();\n        var lastcost = Number.MAX_VALUE, cost = this.bs.cost();\n        while (Math.abs(lastcost - cost) &gt; 0.0001) {\n            this.satisfy();\n            lastcost = cost;\n            cost = this.bs.cost();\n        }\n        return cost;\n    };\n    Solver.LAGRANGIAN_TOLERANCE = -1e-4;\n    Solver.ZERO_UPPERBOUND = -1e-10;\n    return Solver;\n})();\nexports.Solver = Solver;\n&quot;,&quot;\nvar TreeBase = require(&#39;./treebase&#39;);\n\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n    this.red = true;\n}\n\nNode.prototype.get_child = function(dir) {\n    return dir ? this.right : this.left;\n};\n\nNode.prototype.set_child = function(dir, val) {\n    if(dir) {\n        this.right = val;\n    }\n    else {\n        this.left = val;\n    }\n};\n\nfunction RBTree(comparator) {\n    this._root = null;\n    this._comparator = comparator;\n    this.size = 0;\n}\n\nRBTree.prototype = new TreeBase();\n\n// returns true if inserted, false if duplicate\nRBTree.prototype.insert = function(data) {\n    var ret = false;\n\n    if(this._root === null) {\n        // empty tree\n        this._root = new Node(data);\n        ret = true;\n        this.size++;\n    }\n    else {\n        var head = new Node(undefined); // fake tree root\n\n        var dir = 0;\n        var last = 0;\n\n        // setup\n        var gp = null; // grandparent\n        var ggp = head; // grand-grand-parent\n        var p = null; // parent\n        var node = this._root;\n        ggp.right = this._root;\n\n        // search down\n        while(true) {\n            if(node === null) {\n                // insert new node at the bottom\n                node = new Node(data);\n                p.set_child(dir, node);\n                ret = true;\n                this.size++;\n            }\n            else if(is_red(node.left) &amp;&amp; is_red(node.right)) {\n                // color flip\n                node.red = true;\n                node.left.red = false;\n                node.right.red = false;\n            }\n\n            // fix red violation\n            if(is_red(node) &amp;&amp; is_red(p)) {\n                var dir2 = ggp.right === gp;\n\n                if(node === p.get_child(last)) {\n                    ggp.set_child(dir2, single_rotate(gp, !last));\n                }\n                else {\n                    ggp.set_child(dir2, double_rotate(gp, !last));\n                }\n            }\n\n            var cmp = this._comparator(node.data, data);\n\n            // stop if found\n            if(cmp === 0) {\n                break;\n            }\n\n            last = dir;\n            dir = cmp &lt; 0;\n\n            // update helpers\n            if(gp !== null) {\n                ggp = gp;\n            }\n            gp = p;\n            p = node;\n            node = node.get_child(dir);\n        }\n\n        // update root\n        this._root = head.right;\n    }\n\n    // make root black\n    this._root.red = false;\n\n    return ret;\n};\n\n// returns true if removed, false if not found\nRBTree.prototype.remove = function(data) {\n    if(this._root === null) {\n        return false;\n    }\n\n    var head = new Node(undefined); // fake tree root\n    var node = head;\n    node.right = this._root;\n    var p = null; // parent\n    var gp = null; // grand parent\n    var found = null; // found item\n    var dir = 1;\n\n    while(node.get_child(dir) !== null) {\n        var last = dir;\n\n        // update helpers\n        gp = p;\n        p = node;\n        node = node.get_child(dir);\n\n        var cmp = this._comparator(data, node.data);\n\n        dir = cmp &gt; 0;\n\n        // save found node\n        if(cmp === 0) {\n            found = node;\n        }\n\n        // push the red node down\n        if(!is_red(node) &amp;&amp; !is_red(node.get_child(dir))) {\n            if(is_red(node.get_child(!dir))) {\n                var sr = single_rotate(node, dir);\n                p.set_child(last, sr);\n                p = sr;\n            }\n            else if(!is_red(node.get_child(!dir))) {\n                var sibling = p.get_child(!last);\n                if(sibling !== null) {\n                    if(!is_red(sibling.get_child(!last)) &amp;&amp; !is_red(sibling.get_child(last))) {\n                        // color flip\n                        p.red = false;\n                        sibling.red = true;\n                        node.red = true;\n                    }\n                    else {\n                        var dir2 = gp.right === p;\n\n                        if(is_red(sibling.get_child(last))) {\n                            gp.set_child(dir2, double_rotate(p, last));\n                        }\n                        else if(is_red(sibling.get_child(!last))) {\n                            gp.set_child(dir2, single_rotate(p, last));\n                        }\n\n                        // ensure correct coloring\n                        var gpc = gp.get_child(dir2);\n                        gpc.red = true;\n                        node.red = true;\n                        gpc.left.red = false;\n                        gpc.right.red = false;\n                    }\n                }\n            }\n        }\n    }\n\n    // replace and remove if found\n    if(found !== null) {\n        found.data = node.data;\n        p.set_child(p.right === node, node.get_child(node.left === null));\n        this.size--;\n    }\n\n    // update root and make it black\n    this._root = head.right;\n    if(this._root !== null) {\n        this._root.red = false;\n    }\n\n    return found !== null;\n};\n\nfunction is_red(node) {\n    return node !== null &amp;&amp; node.red;\n}\n\nfunction single_rotate(root, dir) {\n    var save = root.get_child(!dir);\n\n    root.set_child(!dir, save.get_child(dir));\n    save.set_child(dir, root);\n\n    root.red = true;\n    save.red = false;\n\n    return save;\n}\n\nfunction double_rotate(root, dir) {\n    root.set_child(!dir, single_rotate(root.get_child(!dir), !dir));\n    return single_rotate(root, dir);\n}\n\nmodule.exports = RBTree;\n&quot;,&quot;\nfunction TreeBase() {}\n\n// removes all nodes from the tree\nTreeBase.prototype.clear = function() {\n    this._root = null;\n    this.size = 0;\n};\n\n// returns node data if found, null otherwise\nTreeBase.prototype.find = function(data) {\n    var res = this._root;\n\n    while(res !== null) {\n        var c = this._comparator(data, res.data);\n        if(c === 0) {\n            return res.data;\n        }\n        else {\n            res = res.get_child(c &gt; 0);\n        }\n    }\n\n    return null;\n};\n\n// returns iterator to node if found, null otherwise\nTreeBase.prototype.findIter = function(data) {\n    var res = this._root;\n    var iter = this.iterator();\n\n    while(res !== null) {\n        var c = this._comparator(data, res.data);\n        if(c === 0) {\n            iter._cursor = res;\n            return iter;\n        }\n        else {\n            iter._ancestors.push(res);\n            res = res.get_child(c &gt; 0);\n        }\n    }\n\n    return null;\n};\n\n// Returns an interator to the tree node at or immediately after the item\nTreeBase.prototype.lowerBound = function(item) {\n    var cur = this._root;\n    var iter = this.iterator();\n    var cmp = this._comparator;\n\n    while(cur !== null) {\n        var c = cmp(item, cur.data);\n        if(c === 0) {\n            iter._cursor = cur;\n            return iter;\n        }\n        iter._ancestors.push(cur);\n        cur = cur.get_child(c &gt; 0);\n    }\n\n    for(var i=iter._ancestors.length - 1; i &gt;= 0; --i) {\n        cur = iter._ancestors[i];\n        if(cmp(item, cur.data) &lt; 0) {\n            iter._cursor = cur;\n            iter._ancestors.length = i;\n            return iter;\n        }\n    }\n\n    iter._ancestors.length = 0;\n    return iter;\n};\n\n// Returns an interator to the tree node immediately after the item\nTreeBase.prototype.upperBound = function(item) {\n    var iter = this.lowerBound(item);\n    var cmp = this._comparator;\n\n    while(cmp(iter.data(), item) === 0) {\n        iter.next();\n    }\n\n    return iter;\n};\n\n// returns null if tree is empty\nTreeBase.prototype.min = function() {\n    var res = this._root;\n    if(res === null) {\n        return null;\n    }\n\n    while(res.left !== null) {\n        res = res.left;\n    }\n\n    return res.data;\n};\n\n// returns null if tree is empty\nTreeBase.prototype.max = function() {\n    var res = this._root;\n    if(res === null) {\n        return null;\n    }\n\n    while(res.right !== null) {\n        res = res.right;\n    }\n\n    return res.data;\n};\n\n// returns a null iterator\n// call next() or prev() to point to an element\nTreeBase.prototype.iterator = function() {\n    return new Iterator(this);\n};\n\n// calls cb on each node&#39;s data, in order\nTreeBase.prototype.each = function(cb) {\n    var it=this.iterator(), data;\n    while((data = it.next()) !== null) {\n        cb(data);\n    }\n};\n\n// calls cb on each node&#39;s data, in reverse order\nTreeBase.prototype.reach = function(cb) {\n    var it=this.iterator(), data;\n    while((data = it.prev()) !== null) {\n        cb(data);\n    }\n};\n\n\nfunction Iterator(tree) {\n    this._tree = tree;\n    this._ancestors = [];\n    this._cursor = null;\n}\n\nIterator.prototype.data = function() {\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\n// if null-iterator, returns first node\n// otherwise, returns next node\nIterator.prototype.next = function() {\n    if(this._cursor === null) {\n        var root = this._tree._root;\n        if(root !== null) {\n            this._minNode(root);\n        }\n    }\n    else {\n        if(this._cursor.right === null) {\n            // no greater node in subtree, go up to parent\n            // if coming from a right child, continue up the stack\n            var save;\n            do {\n                save = this._cursor;\n                if(this._ancestors.length) {\n                    this._cursor = this._ancestors.pop();\n                }\n                else {\n                    this._cursor = null;\n                    break;\n                }\n            } while(this._cursor.right === save);\n        }\n        else {\n            // get the next node from the subtree\n            this._ancestors.push(this._cursor);\n            this._minNode(this._cursor.right);\n        }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\n// if null-iterator, returns last node\n// otherwise, returns previous node\nIterator.prototype.prev = function() {\n    if(this._cursor === null) {\n        var root = this._tree._root;\n        if(root !== null) {\n            this._maxNode(root);\n        }\n    }\n    else {\n        if(this._cursor.left === null) {\n            var save;\n            do {\n                save = this._cursor;\n                if(this._ancestors.length) {\n                    this._cursor = this._ancestors.pop();\n                }\n                else {\n                    this._cursor = null;\n                    break;\n                }\n            } while(this._cursor.left === save);\n        }\n        else {\n            this._ancestors.push(this._cursor);\n            this._maxNode(this._cursor.left);\n        }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\nIterator.prototype._minNode = function(start) {\n    while(start.left !== null) {\n        this._ancestors.push(start);\n        start = start.left;\n    }\n    this._cursor = start;\n};\n\nIterator.prototype._maxNode = function(start) {\n    while(start.right !== null) {\n        this._ancestors.push(start);\n        start = start.right;\n    }\n    this._cursor = start;\n};\n\nmodule.exports = TreeBase;\n\n&quot;,&quot;!function() {\n  var d3 = {\n    version: \&quot;3.5.2\&quot;\n  };\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;\n  try {\n    d3_array(d3_documentElement.childNodes)[0].nodeType;\n  } catch (e) {\n    d3_array = function(list) {\n      var i = list.length, array = new Array(i);\n      while (i--) array[i] = list[i];\n      return array;\n    };\n  }\n  try {\n    d3_document.createElement(\&quot;div\&quot;).style.setProperty(\&quot;opacity\&quot;, 0, \&quot;\&quot;);\n  } catch (error) {\n    var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n    d3_element_prototype.setAttribute = function(name, value) {\n      d3_element_setAttribute.call(this, name, value + \&quot;\&quot;);\n    };\n    d3_element_prototype.setAttributeNS = function(space, local, value) {\n      d3_element_setAttributeNS.call(this, space, local, value + \&quot;\&quot;);\n    };\n    d3_style_prototype.setProperty = function(name, value, priority) {\n      d3_style_setProperty.call(this, name, value + \&quot;\&quot;, priority);\n    };\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a &lt; b ? -1 : a &gt; b ? 1 : a &gt;= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b &lt; a ? -1 : b &gt; a ? 1 : b &gt;= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i &lt; n) if ((b = array[i]) != null &amp;&amp; b &gt;= b) {\n        a = b;\n        break;\n      }\n      while (++i &lt; n) if ((b = array[i]) != null &amp;&amp; a &gt; b) a = b;\n    } else {\n      while (++i &lt; n) if ((b = f.call(array, array[i], i)) != null &amp;&amp; b &gt;= b) {\n        a = b;\n        break;\n      }\n      while (++i &lt; n) if ((b = f.call(array, array[i], i)) != null &amp;&amp; a &gt; b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i &lt; n) if ((b = array[i]) != null &amp;&amp; b &gt;= b) {\n        a = b;\n        break;\n      }\n      while (++i &lt; n) if ((b = array[i]) != null &amp;&amp; b &gt; a) a = b;\n    } else {\n      while (++i &lt; n) if ((b = f.call(array, array[i], i)) != null &amp;&amp; b &gt;= b) {\n        a = b;\n        break;\n      }\n      while (++i &lt; n) if ((b = f.call(array, array[i], i)) != null &amp;&amp; b &gt; a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i &lt; n) if ((b = array[i]) != null &amp;&amp; b &gt;= b) {\n        a = c = b;\n        break;\n      }\n      while (++i &lt; n) if ((b = array[i]) != null) {\n        if (a &gt; b) a = b;\n        if (c &lt; b) c = b;\n      }\n    } else {\n      while (++i &lt; n) if ((b = f.call(array, array[i], i)) != null &amp;&amp; b &gt;= b) {\n        a = c = b;\n        break;\n      }\n      while (++i &lt; n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a &gt; b) a = b;\n        if (c &lt; b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i &lt; n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i &lt; n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i &lt; n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i &lt; n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i &lt; n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i &lt; n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i &lt; n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i &lt; n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j &gt; 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length &lt; 3) lo = 0;\n        if (arguments.length &lt; 4) hi = a.length;\n        while (lo &lt; hi) {\n          var mid = lo + hi &gt;&gt;&gt; 1;\n          if (compare(a[mid], x) &lt; 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length &lt; 3) lo = 0;\n        if (arguments.length &lt; 4) hi = a.length;\n        while (lo &lt; hi) {\n          var mid = lo + hi &gt;&gt;&gt; 1;\n          if (compare(a[mid], x) &gt; 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) &lt; 3) {\n      i1 = array.length;\n      if (m &lt; 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n &lt; 0 ? 0 : n);\n    while (i &lt; n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.zip = function() {\n    if (!(n = arguments.length)) return [];\n    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i &lt; m; ) {\n      for (var j = -1, n, zip = zips[i] = new Array(n); ++j &lt; n; ) {\n        zip[j] = arguments[j][i];\n      }\n    }\n    return zips;\n  };\n  function d3_zipLength(d) {\n    return d.length;\n  }\n  d3.transpose = function(matrix) {\n    return d3.zip.apply(d3, matrix);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i &lt; n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n &gt;= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m &gt;= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length &lt; 3) {\n      step = 1;\n      if (arguments.length &lt; 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\&quot;infinite range\&quot;);\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step &lt; 0) while ((j = start + step * ++i) &gt; stop) range.push(j / k); else while ((j = start + step * ++i) &lt; stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i &lt; n) map.set(i, object[i]); else while (++i &lt; n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \&quot;__proto__\&quot;, d3_map_zero = \&quot;\\x00\&quot;;\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \&quot;\&quot;) === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \&quot;\&quot;)[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ &amp;&amp; delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth &gt;= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i &lt; n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth &gt;= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i &lt; n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \&quot;\&quot;)] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i &lt; n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i &lt; n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \&quot;webkit\&quot;, \&quot;ms\&quot;, \&quot;moz\&quot;, \&quot;Moz\&quot;, \&quot;o\&quot;, \&quot;O\&quot; ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i &lt; n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\&quot;.\&quot;), name = \&quot;\&quot;;\n    if (i &gt;= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length &lt; 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i &lt; n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length &lt; 2) return l &amp;&amp; l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i &lt; n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \&quot;\\\\$&amp;\&quot;);\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatcher = d3_documentElement.matches || d3_documentElement[d3_vendorSymbol(d3_documentElement, \&quot;matchesSelector\&quot;)], d3_selectMatches = function(n, s) {\n    return d3_selectMatcher.call(n, s);\n  };\n  if (typeof Sizzle === \&quot;function\&quot;) {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3_selectionRoot;\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j &lt; m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i &lt; n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode &amp;&amp; \&quot;__data__\&quot; in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \&quot;function\&quot; ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j &lt; m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i &lt; n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \&quot;function\&quot; ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsPrefix = {\n    svg: \&quot;http://www.w3.org/2000/svg\&quot;,\n    xhtml: \&quot;http://www.w3.org/1999/xhtml\&quot;,\n    xlink: \&quot;http://www.w3.org/1999/xlink\&quot;,\n    xml: \&quot;http://www.w3.org/XML/1998/namespace\&quot;,\n    xmlns: \&quot;http://www.w3.org/2000/xmlns/\&quot;\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\&quot;:\&quot;), prefix = name;\n      if (i &gt;= 0) {\n        prefix = name.slice(0, i);\n        name = name.slice(i + 1);\n      }\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length &lt; 2) {\n      if (typeof name === \&quot;string\&quot;) {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \&quot;function\&quot; ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \&quot; \&quot;);\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length &lt; 2) {\n      if (typeof name === \&quot;string\&quot;) {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i &lt; n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\&quot;class\&quot;);\n          while (++i &lt; n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\&quot;(?:^|\\\\s+)\&quot; + d3.requote(name) + \&quot;(?:\\\\s+|$)\&quot;, \&quot;g\&quot;);\n  }\n  function d3_selection_classes(name) {\n    return (name + \&quot;\&quot;).trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i &lt; n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i &lt; n) name[i](this, x);\n    }\n    return typeof value === \&quot;function\&quot; ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\&quot;class\&quot;) || \&quot;\&quot;;\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\&quot;class\&quot;, d3_collapse(c + \&quot; \&quot; + name));\n      } else {\n        node.setAttribute(\&quot;class\&quot;, d3_collapse(c.replace(re, \&quot; \&quot;)));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n &lt; 3) {\n      if (typeof name !== \&quot;string\&quot;) {\n        if (n &lt; 2) value = \&quot;\&quot;;\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n &lt; 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);\n      priority = \&quot;\&quot;;\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \&quot;function\&quot; ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length &lt; 2) {\n      if (typeof name === \&quot;string\&quot;) return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \&quot;function\&quot; ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \&quot;function\&quot; ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \&quot;\&quot; : v;\n    } : value == null ? function() {\n      this.textContent = \&quot;\&quot;;\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \&quot;function\&quot; ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \&quot;\&quot; : v;\n    } : value == null ? function() {\n      this.innerHTML = \&quot;\&quot;;\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    return typeof name === \&quot;function\&quot; ? name : (name = d3.ns.qualify(name)).local ? function() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    } : function() {\n      return this.ownerDocument.createElementNS(this.namespaceURI, name);\n    };\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i &lt; n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i &lt; n; ) {\n          if (nodeByKeyValue.has(keyValue = key.call(node = group[i], node.__data__, i))) {\n            exitNodes[i] = node;\n          } else {\n            nodeByKeyValue.set(keyValue, node);\n          }\n          keyValues[i] = keyValue;\n        }\n        for (i = -1; ++i &lt; m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i &lt; n; ) {\n          if (nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i &lt; n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i &lt; m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i &lt; n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \&quot;function\&quot;) {\n      while (++i &lt; n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i &lt; n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\&quot;__data__\&quot;, value) : this.property(\&quot;__data__\&quot;);\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \&quot;function\&quot;) filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j &lt; m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i &lt; n; i++) {\n        if ((node = group[i]) &amp;&amp; filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j &lt; m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i &gt;= 0; ) {\n        if (node = group[i]) {\n          if (next &amp;&amp; next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j &lt; m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a &amp;&amp; b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j &lt; m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i &lt; n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j &lt; m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i &lt; n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j &lt; m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i &lt; n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length &lt; 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i &gt;= i0) i0 = i + 1;\n      while (!(node = group[i0]) &amp;&amp; ++i0 &lt; n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group = [ typeof node === \&quot;string\&quot; ? d3_select(node, d3_document) : node ];\n    group.parentNode = d3_documentElement;\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group = d3_array(typeof nodes === \&quot;string\&quot; ? d3_selectAll(nodes, d3_document) : nodes);\n    group.parentNode = d3_documentElement;\n    return d3_selection([ group ]);\n  };\n  var d3_selectionRoot = d3.select(d3_documentElement);\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n &lt; 3) {\n      if (typeof type !== \&quot;string\&quot;) {\n        if (n &lt; 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n &lt; 2) return (n = this.node()[\&quot;__on\&quot; + type]) &amp;&amp; n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \&quot;__on\&quot; + type, i = type.indexOf(\&quot;.\&quot;), wrap = d3_selection_onListener;\n    if (i &gt; 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\&quot;^__on([^.]+)\&quot; + d3.requote(type) + \&quot;$\&quot;), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \&quot;mouseover\&quot;,\n    mouseleave: \&quot;mouseout\&quot;\n  });\n  d3_selection_onFilters.forEach(function(k) {\n    if (\&quot;on\&quot; + k in d3_document) d3_selection_onFilters.remove(k);\n  });\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target &amp;&amp; !(related.compareDocumentPosition(target) &amp; 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect = \&quot;onselectstart\&quot; in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, \&quot;userSelect\&quot;), d3_event_dragId = 0;\n  function d3_event_dragSuppress() {\n    var name = \&quot;.dragsuppress-\&quot; + ++d3_event_dragId, click = \&quot;click\&quot; + name, w = d3.select(d3_window).on(\&quot;touchmove\&quot; + name, d3_eventPreventDefault).on(\&quot;dragstart\&quot; + name, d3_eventPreventDefault).on(\&quot;selectstart\&quot; + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement.style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \&quot;none\&quot;;\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 &lt; 0 &amp;&amp; (d3_window.scrollX || d3_window.scrollY)) {\n        svg = d3.select(\&quot;body\&quot;).append(\&quot;svg\&quot;).style({\n          position: \&quot;absolute\&quot;,\n          top: 0,\n          left: 0,\n          margin: 0,\n          padding: 0,\n          border: \&quot;none\&quot;\n        }, \&quot;important\&quot;);\n        var ctm = svg[0][0].getScreenCTM();\n        d3_mouse_bug44083 = !(ctm.f || ctm.e);\n        svg.remove();\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length &lt; 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i &lt; n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \&quot;drag\&quot;, \&quot;dragstart\&quot;, \&quot;dragend\&quot;), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_behavior_dragMouseSubject, \&quot;mousemove\&quot;, \&quot;mouseup\&quot;), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_behavior_dragTouchSubject, \&quot;touchmove\&quot;, \&quot;touchend\&quot;);\n    function drag() {\n      this.on(\&quot;mousedown.drag\&quot;, mousedown).on(\&quot;touchstart.drag\&quot;, touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \&quot;.drag\&quot; + (dragId == null ? \&quot;\&quot; : \&quot;-\&quot; + dragId), dragOffset, dragSubject = d3.select(subject()).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \&quot;dragstart\&quot;\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \&quot;drag\&quot;,\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged &amp;&amp; d3.event.target === target);\n          dispatch({\n            type: \&quot;dragend\&quot;\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \&quot;on\&quot;);\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  function d3_behavior_dragTouchSubject() {\n    return d3.event.target;\n  }\n  function d3_behavior_dragMouseSubject() {\n    return d3_window;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length &lt; 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x &gt; 0 ? 1 : x &lt; 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x &gt; 1 ? 0 : x &lt; -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x &gt; 1 ? halfπ : x &lt; -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];\n    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;\n    function interpolate(t) {\n      var s = t * S;\n      if (dr) {\n        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      }\n      return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];\n    }\n    interpolate.duration = S * 1e3;\n    return interpolate;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \&quot;mousedown.zoom\&quot;, mousemove = \&quot;mousemove.zoom\&quot;, mouseup = \&quot;mouseup.zoom\&quot;, mousewheelTimer, touchstart = \&quot;touchstart.zoom\&quot;, touchtime, event = d3_eventDispatch(zoom, \&quot;zoomstart\&quot;, \&quot;zoom\&quot;, \&quot;zoomend\&quot;), x0, x1, y0, y1;\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \&quot;.zoom\&quot;, mousewheeled).on(\&quot;dblclick.zoom\&quot;, dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\&quot;start.zoom\&quot;, function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\&quot;zoom:zoom\&quot;, function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\&quot;interrupt.zoom\&quot;, function() {\n            zoomended(dispatch);\n          }).each(\&quot;end.zoom\&quot;, function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: +_\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ &amp;&amp; [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ &amp;&amp; [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration &gt; 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \&quot;zoomstart\&quot;\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \&quot;zoom\&quot;,\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \&quot;zoomend\&quot;\n      });\n      center0 = null;\n    }\n    function mousedowned() {\n      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress();\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged &amp;&amp; d3.event.target === target);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \&quot;.zoom-\&quot; + d3.event.changedTouches[0].identifier, touchmove = \&quot;touchmove\&quot; + zoomName, touchend = \&quot;touchend\&quot; + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress();\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i &lt; n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime &lt; 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length &gt; 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i &lt; n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 &amp;&amp; Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i &lt; n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else translate0 = location(center0 = center || d3.mouse(this)), \n      d3_selection_interrupt.call(this), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \&quot;on\&quot;);\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ];\n  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = \&quot;onwheel\&quot; in d3_document ? (d3_behavior_zoomDelta = function() {\n    return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n  }, \&quot;wheel\&quot;) : \&quot;onmousewheel\&quot; in d3_document ? (d3_behavior_zoomDelta = function() {\n    return d3.event.wheelDelta;\n  }, \&quot;mousewheel\&quot;) : (d3_behavior_zoomDelta = function() {\n    return -d3.event.detail;\n  }, \&quot;MozMousePixelScroll\&quot;);\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \&quot;\&quot;;\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length &lt; 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\&quot;\&quot; + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) &lt; 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s &lt; 0 ? 0 : s &gt; 1 ? 1 : s;\n    l = l &lt; 0 ? 0 : l &gt; 1 ? 1 : l;\n    m2 = l &lt;= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h &gt; 360) h -= 360; else if (h &lt; 0) h += 360;\n      if (h &lt; 60) return m1 + (m2 - m1) * h / 60;\n      if (h &lt; 180) return m2;\n      if (h &lt; 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length &lt; 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length &lt; 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l &gt; 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x &gt; .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x &gt; .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r &lt;= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length &lt; 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\&quot;\&quot; + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value &gt;&gt; 16, value &gt;&gt; 8 &amp; 255, value &amp; 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \&quot;\&quot;;\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r &amp;&amp; !g &amp;&amp; !b) return new d3_rgb(i, i, i);\n    if (r &amp;&amp; r &lt; i) r = i;\n    if (g &amp;&amp; g &lt; i) g = i;\n    if (b &amp;&amp; b &lt; i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \&quot;#\&quot; + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v &lt; 16 ? \&quot;0\&quot; + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/i.exec(format);\n    if (m1) {\n      m2 = m1[2].split(\&quot;,\&quot;);\n      switch (m1[1]) {\n       case \&quot;hsl\&quot;:\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \&quot;rgb\&quot;:\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) return rgb(color.r, color.g, color.b);\n    if (format != null &amp;&amp; format.charAt(0) === \&quot;#\&quot; &amp;&amp; !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color &amp; 3840) &gt;&gt; 4;\n        r = r &gt;&gt; 4 | r;\n        g = color &amp; 240;\n        g = g &gt;&gt; 4 | g;\n        b = color &amp; 15;\n        b = b &lt;&lt; 4 | b;\n      } else if (format.length === 7) {\n        r = (color &amp; 16711680) &gt;&gt; 16;\n        g = (color &amp; 65280) &gt;&gt; 8;\n        b = color &amp; 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l &lt; .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g &lt; b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l &gt; 0 &amp;&amp; l &lt; 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) &lt;= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \&quot;%\&quot; ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \&quot;function\&quot; ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  function d3_identity(d) {\n    return d;\n  }\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 &amp;&amp; typeof mimeType === \&quot;function\&quot;) callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\&quot;beforesend\&quot;, \&quot;progress\&quot;, \&quot;load\&quot;, \&quot;error\&quot;), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (d3_window.XDomainRequest &amp;&amp; !(\&quot;withCredentials\&quot; in request) &amp;&amp; /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \&quot;onload\&quot; in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState &gt; 3 &amp;&amp; respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status &amp;&amp; d3_xhrHasResponse(request) || status &gt;= 200 &amp;&amp; status &lt; 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \&quot;\&quot;).toLowerCase();\n      if (arguments.length &lt; 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \&quot;\&quot;;\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \&quot;\&quot;;\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \&quot;get\&quot;, \&quot;post\&quot; ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 &amp;&amp; typeof data === \&quot;function\&quot;) callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null &amp;&amp; !(\&quot;accept\&quot; in headers)) headers[\&quot;accept\&quot;] = mimeType + \&quot;,*/*\&quot;;\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null &amp;&amp; request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\&quot;error\&quot;, callback).on(\&quot;load\&quot;, function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \&quot;on\&quot;);\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type &amp;&amp; type !== \&quot;text\&quot; ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp(&#39;[\&quot;&#39; + delimiter + \&quot;\\n]\&quot;), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length &lt; 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\&quot;d\&quot;, \&quot;return {\&quot; + row.map(function(name, i) {\n          return JSON.stringify(name) + \&quot;: d[\&quot; + i + \&quot;]\&quot;;\n        }).join(\&quot;,\&quot;) + \&quot;}\&quot;);\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I &gt;= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ &lt; N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\&quot;\&quot;/g, &#39;\&quot;&#39;);\n        }\n        while (I &lt; N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL &amp;&amp; t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f &amp;&amp; (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\&quot;\\n\&quot;);\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\&quot;\\n\&quot;);\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? &#39;\&quot;&#39; + text.replace(/\\\&quot;/g, &#39;\&quot;\&quot;&#39;) + &#39;\&quot;&#39; : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\&quot;,\&quot;, \&quot;text/csv\&quot;);\n  d3.tsv = d3.dsv(\&quot;\t\&quot;, \&quot;text/tab-separated-values\&quot;);\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, \&quot;requestAnimationFrame\&quot;)] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function(callback, delay, then) {\n    var n = arguments.length;\n    if (n &lt; 2) delay = 0;\n    if (n &lt; 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      f: false,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  };\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay &gt; 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now();\n    d3_timer_active = d3_timer_queueHead;\n    while (d3_timer_active) {\n      if (now &gt;= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);\n      d3_timer_active = d3_timer_active.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.f) {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      } else {\n        if (t1.t &lt; time) time = t1.t;\n        t1 = (t0 = t1).n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \&quot;y\&quot;, \&quot;z\&quot;, \&quot;a\&quot;, \&quot;f\&quot;, \&quot;p\&quot;, \&quot;n\&quot;, \&quot;µ\&quot;, \&quot;m\&quot;, \&quot;\&quot;, \&quot;k\&quot;, \&quot;M\&quot;, \&quot;G\&quot;, \&quot;T\&quot;, \&quot;P\&quot;, \&quot;E\&quot;, \&quot;Z\&quot;, \&quot;Y\&quot; ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value) {\n      if (value &lt; 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i &gt; 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping &amp;&amp; locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i &gt; 0 &amp;&amp; g &gt; 0) {\n        if (length + g + 1 &gt; width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) &gt; width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \&quot; \&quot;, align = match[2] || \&quot;&gt;\&quot;, sign = match[3] || \&quot;-\&quot;, symbol = match[4] || \&quot;\&quot;, zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \&quot;\&quot;, suffix = \&quot;\&quot;, integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \&quot;0\&quot; &amp;&amp; align === \&quot;=\&quot;) {\n        zfill = fill = \&quot;0\&quot;;\n        align = \&quot;=\&quot;;\n      }\n      switch (type) {\n       case \&quot;n\&quot;:\n        comma = true;\n        type = \&quot;g\&quot;;\n        break;\n\n       case \&quot;%\&quot;:\n        scale = 100;\n        suffix = \&quot;%\&quot;;\n        type = \&quot;f\&quot;;\n        break;\n\n       case \&quot;p\&quot;:\n        scale = 100;\n        suffix = \&quot;%\&quot;;\n        type = \&quot;r\&quot;;\n        break;\n\n       case \&quot;b\&quot;:\n       case \&quot;o\&quot;:\n       case \&quot;x\&quot;:\n       case \&quot;X\&quot;:\n        if (symbol === \&quot;#\&quot;) prefix = \&quot;0\&quot; + type.toLowerCase();\n\n       case \&quot;c\&quot;:\n        exponent = false;\n\n       case \&quot;d\&quot;:\n        integer = true;\n        precision = 0;\n        break;\n\n       case \&quot;s\&quot;:\n        scale = -1;\n        type = \&quot;r\&quot;;\n        break;\n      }\n      if (symbol === \&quot;$\&quot;) prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \&quot;r\&quot; &amp;&amp; !precision) type = \&quot;g\&quot;;\n      if (precision != null) {\n        if (type == \&quot;g\&quot;) precision = Math.max(1, Math.min(21, precision)); else if (type == \&quot;e\&quot; || type == \&quot;f\&quot;) precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill &amp;&amp; comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer &amp;&amp; value % 1) return \&quot;\&quot;;\n        var negative = value &lt; 0 || value === 0 &amp;&amp; 1 / value &lt; 0 ? (value = -value, \&quot;-\&quot;) : sign === \&quot;-\&quot; ? \&quot;\&quot; : sign;\n        if (scale &lt; 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\&quot;.\&quot;), before, after;\n        if (i &lt; 0) {\n          var j = exponent ? value.lastIndexOf(\&quot;e\&quot;) : -1;\n          if (j &lt; 0) before = value, after = \&quot;\&quot;; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill &amp;&amp; comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length &lt; width ? new Array(length = width - length + 1).join(fill) : \&quot;\&quot;;\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \&quot;&lt;\&quot; ? negative + value + padding : align === \&quot;&gt;\&quot; ? padding + negative + value : align === \&quot;^\&quot; ? padding.substring(0, length &gt;&gt;= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([&lt;&gt;=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \&quot;\&quot;;\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length &gt; 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 &lt; d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt &gt; 1) {\n        while (time &lt; t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time &lt; t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \&quot;sunday\&quot;, \&quot;monday\&quot;, \&quot;tuesday\&quot;, \&quot;wednesday\&quot;, \&quot;thursday\&quot;, \&quot;friday\&quot;, \&quot;saturday\&quot; ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \&quot;s\&quot;] = interval.range;\n    d3_time[day + \&quot;s\&quot;].utc = interval.utc.range;\n    d3_time[day + \&quot;OfYear\&quot;] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i &lt; n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \&quot;e\&quot; ? \&quot; \&quot; : \&quot;0\&quot; : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\&quot;\&quot;);\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\&quot;p\&quot; in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null &amp;&amp; d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\&quot;j\&quot; in d) date.setFullYear(d.y, 0, d.j); else if (\&quot;w\&quot; in d &amp;&amp; (\&quot;W\&quot; in d || \&quot;U\&quot; in d)) {\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \&quot;W\&quot; in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i &lt; n) {\n        if (j &gt;= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) &lt; 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date &amp;&amp; date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() &gt;= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \&quot;%\&quot;: function() {\n        return \&quot;%\&quot;;\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \&quot;%\&quot;: d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \&quot;-\&quot;: \&quot;\&quot;,\n    _: \&quot; \&quot;,\n    \&quot;0\&quot;: \&quot;0\&quot;\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value &lt; 0 ? \&quot;-\&quot; : \&quot;\&quot;, string = (sign ? -value : value) + \&quot;\&quot;, length = string.length;\n    return sign + (length &lt; width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\&quot;^(?:\&quot; + names.map(d3.requote).join(\&quot;|\&quot;) + \&quot;)\&quot;, \&quot;i\&quot;);\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i &lt; n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d &gt; 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z &gt; 0 ? \&quot;-\&quot; : \&quot;+\&quot;, zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \&quot;0\&quot;, 2) + d3_time_formatPad(zm, \&quot;0\&quot;, 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i &lt; n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \&quot;.\&quot;,\n    thousands: \&quot;,\&quot;,\n    grouping: [ 3 ],\n    currency: [ \&quot;$\&quot;, \&quot;\&quot; ],\n    dateTime: \&quot;%a %b %e %X %Y\&quot;,\n    date: \&quot;%m/%d/%Y\&quot;,\n    time: \&quot;%H:%M:%S\&quot;,\n    periods: [ \&quot;AM\&quot;, \&quot;PM\&quot; ],\n    days: [ \&quot;Sunday\&quot;, \&quot;Monday\&quot;, \&quot;Tuesday\&quot;, \&quot;Wednesday\&quot;, \&quot;Thursday\&quot;, \&quot;Friday\&quot;, \&quot;Saturday\&quot; ],\n    shortDays: [ \&quot;Sun\&quot;, \&quot;Mon\&quot;, \&quot;Tue\&quot;, \&quot;Wed\&quot;, \&quot;Thu\&quot;, \&quot;Fri\&quot;, \&quot;Sat\&quot; ],\n    months: [ \&quot;January\&quot;, \&quot;February\&quot;, \&quot;March\&quot;, \&quot;April\&quot;, \&quot;May\&quot;, \&quot;June\&quot;, \&quot;July\&quot;, \&quot;August\&quot;, \&quot;September\&quot;, \&quot;October\&quot;, \&quot;November\&quot;, \&quot;December\&quot; ],\n    shortMonths: [ \&quot;Jan\&quot;, \&quot;Feb\&quot;, \&quot;Mar\&quot;, \&quot;Apr\&quot;, \&quot;May\&quot;, \&quot;Jun\&quot;, \&quot;Jul\&quot;, \&quot;Aug\&quot;, \&quot;Sep\&quot;, \&quot;Oct\&quot;, \&quot;Nov\&quot;, \&quot;Dec\&quot; ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object &amp;&amp; d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry &amp;&amp; d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i &lt; n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i &lt; n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i &lt; n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i &lt; n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i &lt; n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i &lt; n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i &lt; n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area &lt; 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ &gt;= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) &lt; ε &amp;&amp; abs(a[1] - b[1]) &lt; ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum &lt; 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum &gt; ε) φ1 = 90; else if (dλSum &lt; -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ &lt; φ0) φ0 = φ;\n      if (φ &gt; φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ &gt; 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) &gt; 180;\n        if (antimeridian ^ (s * λ_ &lt; λi &amp;&amp; λi &lt; s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi &gt; φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ &lt; λi &amp;&amp; λi &lt; s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi &lt; φ0) φ0 = φi;\n        } else {\n          if (φ &lt; φ0) φ0 = φ;\n          if (φ &gt; φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ &lt; λ_) {\n            if (angle(λ0, λ) &gt; angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) &gt; angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 &gt;= λ0) {\n            if (λ &lt; λ0) λ0 = λ;\n            if (λ &gt; λ1) λ1 = λ;\n          } else {\n            if (λ &gt; λ_) {\n              if (angle(λ0, λ) &gt; angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) &gt; angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) &gt; 180 ? dλ + (dλ &gt; 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) &gt; ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) &lt; 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] &lt;= range[1] ? range[0] &lt;= x &amp;&amp; x &lt;= range[1] : x &lt; range[0] || range[1] &lt; x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i &lt; n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) &gt; angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) &gt; angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i &lt;= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) &gt; best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m &lt; ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 &lt; ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m &lt; ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m &amp;&amp; -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert &amp;&amp; b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x &amp;&amp; a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) &lt;= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i &lt; n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i &lt; n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i &lt; n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i &gt;= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i &lt; n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean &amp; 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n &gt; 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i &lt; n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n &gt; 1 &amp;&amp; clean &amp; 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length &gt; 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length &gt; 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] &lt; 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] &lt; 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 &gt; 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) &lt; ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 &gt; 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 &amp;&amp; dλ &gt;= π) {\n          if (abs(λ0 - sλ0) &lt; ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) &lt; ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) &gt; ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) &gt; ε) {\n      var s = from[0] &lt; to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i &lt; n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ &gt;= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ &gt; π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 &gt;= meridian ^ λ &gt;= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ &gt;= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel &gt; φarc || parallel === φarc &amp;&amp; (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ &gt;= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle &lt; -ε || polarAngle &lt; ε &amp;&amp; d3_geo_areaRingSum &lt; 0) ^ winding &amp; 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr &gt; 0, notHemisphere = abs(cr) &gt; ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) &gt; cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ &lt; 0 ? π : -π), φ) : 0;\n          if (!point0 &amp;&amp; (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere &amp;&amp; point0 &amp;&amp; smallRadius ^ v) {\n            var t;\n            if (!(c &amp; c0) &amp;&amp; (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v &amp;&amp; (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 &amp;&amp; v0) &lt;&lt; 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two &amp;&amp; a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 &lt; 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 &lt; λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) &lt; ε, meridian = polar || δλ &lt; ε;\n      if (!polar &amp;&amp; φ1 &lt; φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 &gt; 0 ^ q[1] &lt; (abs(q[0] - λ0) &lt; ε ? φ0 : φ1) : φ0 &lt;= q[1] &amp;&amp; q[1] &lt;= φ1 : δλ &gt; π ^ (λ0 &lt;= q[0] &amp;&amp; q[0] &lt;= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ &lt; -r) code |= 1; else if (λ &gt; r) code |= 2;\n      if (φ &lt; -r) code |= 4; else if (φ &gt; r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx &amp;&amp; r &gt; 0) return;\n      r /= dx;\n      if (dx &lt; 0) {\n        if (r &lt; t0) return;\n        if (r &lt; t1) t1 = r;\n      } else if (dx &gt; 0) {\n        if (r &gt; t1) return;\n        if (r &gt; t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx &amp;&amp; r &lt; 0) return;\n      r /= dx;\n      if (dx &lt; 0) {\n        if (r &gt; t1) return;\n        if (r &gt; t0) t0 = r;\n      } else if (dx &gt; 0) {\n        if (r &lt; t0) return;\n        if (r &lt; t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy &amp;&amp; r &gt; 0) return;\n      r /= dy;\n      if (dy &lt; 0) {\n        if (r &lt; t0) return;\n        if (r &lt; t1) t1 = r;\n      } else if (dy &gt; 0) {\n        if (r &gt; t1) return;\n        if (r &gt; t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy &amp;&amp; r &lt; 0) return;\n      r /= dy;\n      if (dy &lt; 0) {\n        if (r &gt; t1) return;\n        if (r &gt; t0) t0 = r;\n      } else if (dy &gt; 0) {\n        if (r &lt; t0) return;\n        if (r &lt; t1) t1 = r;\n      }\n      if (t0 &gt; 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 &lt; 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean &amp;&amp; clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i &lt; n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j &lt; m; ++j) {\n            b = v[j];\n            if (a[1] &lt;= y) {\n              if (b[1] &gt; y &amp;&amp; d3_cross2d(a, b, p) &gt; 0) ++wn;\n            } else {\n              if (b[1] &lt;= y &amp;&amp; d3_cross2d(a, b, p) &lt; 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) &lt; 0 ^ direction &gt; 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a &gt; 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 &lt;= x &amp;&amp; x &lt;= x1 &amp;&amp; y0 &lt;= y &amp;&amp; y &lt;= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ &amp;&amp; v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v &amp;&amp; v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) &lt; ε ? direction &gt; 0 ? 0 : 3 : abs(p[0] - x1) &lt; ε ? direction &gt; 0 ? 2 : 1 : abs(p[1] - y0) &lt; ε ? direction &gt; 0 ? 1 : 0 : direction &gt; 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y &gt;= .12 &amp;&amp; y &lt; .234 &amp;&amp; x &gt;= -.425 &amp;&amp; x &lt; -.214 ? alaska : y &gt;= .166 &amp;&amp; y &lt; .234 &amp;&amp; x &gt;= -.214 &amp;&amp; x &lt; -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x &lt; d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x &gt; d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y &lt; d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y &gt; d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\&quot;\&quot;);\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\&quot;M\&quot;, x, \&quot;,\&quot;, y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\&quot;M\&quot;, x, \&quot;,\&quot;, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\&quot;L\&quot;, x, \&quot;,\&quot;, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\&quot;Z\&quot;);\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \&quot;m0,\&quot; + radius + \&quot;a\&quot; + radius + \&quot;,\&quot; + radius + \&quot; 0 1,1 0,\&quot; + -2 * radius + \&quot;a\&quot; + radius + \&quot;,\&quot; + radius + \&quot; 0 1,1 0,\&quot; + 2 * radius + \&quot;z\&quot;;\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 &gt; 4 * δ2 &amp;&amp; depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) &lt; ε || abs(λ0 - λ1) &lt; ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 &gt; δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) &gt; .3 || a0 * a1 + b0 * b1 + c0 * c1 &lt; cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) &gt; 0 &amp;&amp; 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \&quot;function\&quot;) contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \&quot;function\&quot;) contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \&quot;function\&quot; ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point &amp;&amp; [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length &gt; 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \&quot;precision\&quot;);\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert &amp;&amp; invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length &gt; 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ &gt; π ? λ - τ : λ &lt; -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ &gt; π ? λ - τ : λ &lt; -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \&quot;function\&quot; ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \&quot;Polygon\&quot;,\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction &gt; 0 ? from &lt; to : from &gt; to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction &gt; 0 ? t &gt; to : t &lt; to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] &lt; 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \&quot;MultiLineString\&quot;,\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) &gt; ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) &gt; ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \&quot;LineString\&quot;,\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \&quot;Polygon\&quot;,\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 &gt; X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 &gt; Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 &gt; x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 &gt; y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \&quot;LineString\&quot;,\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \&quot;function\&quot; ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \&quot;function\&quot; ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ &amp;&amp; y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c &amp;&amp; c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F &gt; 0) {\n        if (φ &lt; -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ &gt; halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) &lt; ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length &gt; 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length &lt; 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i &lt; n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i &lt; n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i &gt;= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i &lt; lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i &lt; n; i++) {\n      while (hs &gt; 1 &amp;&amp; d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) &lt;= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i &lt; n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i &lt; n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i &lt; n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j &lt; m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) &lt; (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle &amp;&amp; abs(x - lArc.circle.x) &lt; ε &amp;&amp; abs(y - lArc.circle.cy) &lt; ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle &amp;&amp; abs(x - rArc.circle.x) &lt; ε &amp;&amp; abs(y - rArc.circle.cy) &lt; ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc &lt; nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl &gt; ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr &gt; ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl &gt; -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr &gt; -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc &amp;&amp; !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge &lt; nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) &gt; ε || abs(y3 - y2) &gt; ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) &lt; ε &amp;&amp; y1 - y3 &gt; ε ? {\n            x: x0,\n            y: abs(x2 - x0) &lt; ε ? y2 : y1\n          } : abs(y3 - y1) &lt; ε &amp;&amp; x1 - x3 &gt; ε ? {\n            x: abs(y2 - y1) &lt; ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) &lt; ε &amp;&amp; y3 - y0 &gt; ε ? {\n            x: x1,\n            y: abs(x2 - x1) &lt; ε ? y2 : y0\n          } : abs(y3 - y0) &lt; ε &amp;&amp; x3 - x0 &gt; ε ? {\n            x: abs(y2 - y0) &lt; ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d &gt;= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y &lt; node.y || circle.y === node.y &amp;&amp; circle.x &lt;= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) &lt; ε &amp;&amp; abs(e.a.y - e.b.y) &lt; ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx &lt; x0 || fx &gt;= x1) return;\n      if (lx &gt; rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y &gt;= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y &lt; y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm &lt; -1 || fm &gt; 1) {\n        if (lx &gt; rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y &gt;= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y &lt; y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly &lt; ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x &gt;= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x &lt; x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a &amp;&amp; !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent &amp;&amp; parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle &amp;&amp; uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle &amp;&amp; uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left &amp;&amp; right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node &amp;&amp; node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L &amp;&amp; sibling.L.C || sibling.R &amp;&amp; sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L &amp;&amp; sibling.L.C || sibling.R &amp;&amp; sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site &amp;&amp; (!circle || site.y &lt; circle.y || site.y === circle.y &amp;&amp; site.x &lt; circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x &gt;= x0 &amp;&amp; site.x &lt;= x1 &amp;&amp; site.y &gt;= y0 &amp;&amp; site.y &lt;= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l &amp;&amp; edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j &lt; m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i &lt; s0.i &amp;&amp; i &lt; s1.i &amp;&amp; d3_geom_voronoiTriangleArea(site, s0, s1) &lt; 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent &amp;&amp; clipExtent[1];\n      return voronoi.clipExtent(_ &amp;&amp; [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i &lt; n; ++i) {\n          d = data[i];\n          if (d.x &lt; x1_) x1_ = d.x;\n          if (d.y &lt; y1_) y1_ = d.y;\n          if (d.x &gt; x2_) x2_ = d.x;\n          if (d.y &gt; y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i &lt; n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ &lt; x1_) x1_ = x_;\n          if (y_ &lt; y1_) y1_ = y_;\n          if (x_ &gt; x2_) x2_ = x_;\n          if (y_ &gt; y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx &gt; dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) &lt; .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x &gt;= xm, below = y &gt;= ym, i = below &lt;&lt; 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i &lt; n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 &gt; x3 || y1 &gt; y3 || x2 &lt; x0 || y2 &lt; y0) return;\n      if (point = node.point) {\n        var point, dx = x - point[0], dy = y - point[1], distance2 = dx * dx + dy * dy;\n        if (distance2 &lt; minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x &gt;= xm, below = y &gt;= ym;\n      for (var i = below &lt;&lt; 1 | right, j = i + 4; i &lt; j; ++i) {\n        if (node = children[i &amp; 3]) switch (i &amp; 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \&quot;#\&quot; + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \&quot;\&quot;, b = b + \&quot;\&quot;;\n    while ((am = d3_interpolate_numberA.exec(a)) &amp;&amp; (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) &gt; bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi &lt; b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length &lt; 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \&quot;\&quot;;\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i &lt; b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\&quot;\&quot;);\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \&quot;g\&quot;);\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i &gt;= 0 &amp;&amp; !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \&quot;string\&quot; ? d3_rgb_names.has(b) || /^(#|rgb\\(|hsl\\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \&quot;object\&quot; &amp;&amp; isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i &lt; n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i &lt; na; ++i) c[i] = a[i];\n    for (;i &lt; nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i &lt; n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \&quot;in\&quot;: d3_identity,\n    out: d3_ease_reverse,\n    \&quot;in-out\&quot;: d3_ease_reflect,\n    \&quot;out-in\&quot;: function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\&quot;-\&quot;), t = i &gt;= 0 ? name.slice(0, i) : name, m = i &gt;= 0 ? name.slice(i + 1) : \&quot;in\&quot;;\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t &lt;= 0 ? 0 : t &gt;= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t &lt; .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t &lt;= 0) return 0;\n    if (t &gt;= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t &lt; .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length &lt; 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t &lt; 1 / 2.75 ? 7.5625 * t * t : t &lt; 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t &lt; 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh &gt; 180) bh -= 360; else if (bh &lt; -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \&quot;\&quot;;\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh &gt; 180) bh -= 360; else if (bh &lt; -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \&quot;\&quot;;\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \&quot;\&quot;;\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \&quot;g\&quot;);\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\&quot;transform\&quot;, string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] &lt; r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \&quot;translate(\&quot; + this.translate + \&quot;)rotate(\&quot; + this.rotate + \&quot;)skewX(\&quot; + this.skew + \&quot;)scale(\&quot; + this.scale + \&quot;)\&quot;;\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;\n    if (ta[0] != tb[0] || ta[1] != tb[1]) {\n      s.push(\&quot;translate(\&quot;, null, \&quot;,\&quot;, null, \&quot;)\&quot;);\n      q.push({\n        i: 1,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: 3,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\&quot;translate(\&quot; + tb + \&quot;)\&quot;);\n    } else {\n      s.push(\&quot;\&quot;);\n    }\n    if (ra != rb) {\n      if (ra - rb &gt; 180) rb += 360; else if (rb - ra &gt; 180) ra += 360;\n      q.push({\n        i: s.push(s.pop() + \&quot;rotate(\&quot;, null, \&quot;)\&quot;) - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(s.pop() + \&quot;rotate(\&quot; + rb + \&quot;)\&quot;);\n    }\n    if (wa != wb) {\n      q.push({\n        i: s.push(s.pop() + \&quot;skewX(\&quot;, null, \&quot;)\&quot;) - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(s.pop() + \&quot;skewX(\&quot; + wb + \&quot;)\&quot;);\n    }\n    if (ka[0] != kb[0] || ka[1] != kb[1]) {\n      n = s.push(s.pop() + \&quot;scale(\&quot;, null, \&quot;,\&quot;, null, \&quot;)\&quot;);\n      q.push({\n        i: n - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: n - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] != 1 || kb[1] != 1) {\n      s.push(s.pop() + \&quot;scale(\&quot; + kb + \&quot;)\&quot;);\n    }\n    n = q.length;\n    return function(t) {\n      var i = -1, o;\n      while (++i &lt; n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\&quot;\&quot;);\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i &lt; n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i &lt; n) {\n        x = 0, j = -1;\n        while (++j &lt; n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i &lt; n) {\n        x0 = x, j = -1;\n        while (++j &lt; n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \&quot;-\&quot; + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: (x - x0) / k\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i &lt; n) {\n        j = i - 1;\n        while (++j &lt; n) {\n          var source = subgroups[i + \&quot;-\&quot; + j], target = subgroups[j + \&quot;-\&quot; + i];\n          if (source.value || target.value) {\n            chords.push(source.value &lt; target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) &amp;&amp; matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\&quot;start\&quot;, \&quot;tick\&quot;, \&quot;end\&quot;), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 &lt; dn) {\n            if (dn &lt; chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point &amp;&amp; dn &amp;&amp; dn &lt; chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) &lt; .005) {\n        event.end({\n          type: \&quot;end\&quot;,\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i &lt; m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight / (t.weight + s.weight));\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i &lt; n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i &lt; n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i &lt; n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \&quot;tick\&quot;,\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \&quot;function\&quot; ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \&quot;function\&quot; ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \&quot;function\&quot; ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x &gt; 0) alpha = x; else alpha = 0;\n      } else if (x &gt; 0) {\n        event.start({\n          type: \&quot;start\&quot;,\n          alpha: alpha = x\n        });\n        d3.timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i &lt; n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i &lt; m; ++i) {\n        o = links[i];\n        if (typeof o.source == \&quot;number\&quot;) o.source = nodes[o.source];\n        if (typeof o.target == \&quot;number\&quot;) o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i &lt; n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\&quot;x\&quot;, w);\n        if (isNaN(o.y)) o.y = position(\&quot;y\&quot;, h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \&quot;function\&quot;) for (i = 0; i &lt; m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i &lt; m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \&quot;function\&quot;) for (i = 0; i &lt; m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i &lt; m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \&quot;function\&quot;) for (i = 0; i &lt; n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i &lt; n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j &lt; n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j &lt; m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, m = candidates.length, x;\n        while (++j &lt; m) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\&quot;dragstart.force\&quot;, d3_layout_forceDragstart).on(\&quot;drag.force\&quot;, dragmove).on(\&quot;dragend.force\&quot;, d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\&quot;mouseover.force\&quot;, d3_layout_forceMouseover).on(\&quot;mouseout.force\&quot;, d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \&quot;on\&quot;);\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &amp;= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &amp;= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i &lt; n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) &amp;&amp; (n = childs.length)) {\n          var n, childs, child;\n          while (--n &gt;= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort &amp;&amp; (childs = node.children)) childs.sort(sort);\n        if (value &amp;&amp; (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \&quot;sort\&quot;, \&quot;children\&quot;, \&quot;value\&quot;);\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) &amp;&amp; (n = children.length)) {\n        var n, children;\n        while (--n &gt;= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) &amp;&amp; (n = children.length)) {\n        var i = -1, n, children;\n        while (++i &lt; n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children &amp;&amp; (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i &lt; n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children &amp;&amp; (n = children.length)) {\n        var i = -1, n;\n        while (++i &lt; n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \&quot;function\&quot; ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \&quot;function\&quot; ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \&quot;function\&quot; ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da &lt; 0 ? -1 : 1), k = (da - n * pa) / d3.sum(values), index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j &lt; m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i &lt; n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \&quot;function\&quot; ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \&quot;function\&quot; ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \&quot;inside-out\&quot;: function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i &lt; n; ++i) {\n        j = index[i];\n        if (top &lt; bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \&quot;default\&quot;: d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j &lt; m; ++j) {\n        for (i = 0, o = 0; i &lt; n; i++) o += data[i][j][1];\n        if (o &gt; max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j &lt; m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j &lt; m; ++j) {\n        for (i = 0, s1 = 0; i &lt; n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i &lt; n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k &lt; i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o &lt; o0) o0 = o;\n      }\n      for (j = 0; j &lt; m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j &lt; m; ++j) {\n        for (i = 0, o = 0; i &lt; n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i &lt; n; i++) data[i][j][1] /= o; else for (i = 0; i &lt; n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j &lt; m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j &lt; m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i &lt; n; ++i) {\n      if ((k = array[i][1]) &gt; v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i &lt; m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m &gt; 0) {\n        i = -1;\n        while (++i &lt; n) {\n          x = values[i];\n          if (x &gt;= range[0] &amp;&amp; x &lt;= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \&quot;number\&quot; ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x &lt;= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \&quot;function\&quot; ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \&quot;function\&quot; ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr &gt; dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n &gt; 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n &gt; 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i &lt; n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 &lt; s2 || s1 == s2 &amp;&amp; b.r &lt; a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i &lt; n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i &lt; n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db &amp;&amp; (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x &lt; left.x) left = node;\n          if (node.x &gt; right.x) right = node;\n          if (node.depth &gt; bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i &lt; n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) &amp;&amp; child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim &amp;&amp; vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift &gt; 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim &amp;&amp; !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip &amp;&amp; !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i &gt;= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children &amp;&amp; children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children &amp;&amp; children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children &amp;&amp; (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \&quot;squarify\&quot;, ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i &lt; n) {\n        area = (child = children[i]).value * (k &lt; 0 ? 0 : k);\n        child.area = isNaN(area) || area &lt;= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children &amp;&amp; children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \&quot;slice\&quot; ? rect.dx : mode === \&quot;dice\&quot; ? rect.dy : mode === \&quot;slice-dice\&quot; ? node.depth &amp; 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) &gt; 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \&quot;squarify\&quot; || (score = worst(row, u)) &lt;= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children &amp;&amp; children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i &lt; n) {\n        if (!(r = row[i].area)) continue;\n        if (r &lt; rmin) rmin = r;\n        if (r &gt; rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v &gt; rect.dy) v = rect.dy;\n        while (++i &lt; n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v &gt; rect.dx) v = rect.dx;\n        while (++i &lt; n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = 0;\n      root.y = 0;\n      root.dx = size[0];\n      root.dy = size[1];\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \&quot;number\&quot; ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \&quot;function\&quot; ? padFunction : type === \&quot;number\&quot; ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \&quot;\&quot;;\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx &lt; 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy &lt; 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n &lt; 2) σ = 1;\n      if (n &lt; 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r &gt; 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j &lt; m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start &lt; stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 &lt; x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] &lt; domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j &lt;= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) &gt; 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \&quot;range\&quot;, \&quot;rangeRound\&quot;, \&quot;interpolate\&quot;, \&quot;clamp\&quot;);\n  }\n  function d3_scale_linearNice(domain, m) {\n    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err &lt;= .15) step *= 10; else if (err &lt;= .35) step *= 5; else if (err &lt;= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \&quot;s\&quot;) {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \&quot;.\&quot; + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \&quot;f\&quot;;\n        format = d3.format(match.join(\&quot;\&quot;));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \&quot;.\&quot; + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\&quot;\&quot;);\n    } else {\n      format = \&quot;,.\&quot; + d3_scale_linearPrecision(range[2]) + \&quot;f\&quot;;\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \&quot;e\&quot;) : p - (type === \&quot;%\&quot;) * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x &lt; 0 ? 0 : x) : -Math.log(x &gt; 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] &gt;= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i &lt; j; i++) for (var k = 1; k &lt; n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ &lt; j; ) for (var k = n - 1; k &gt; 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] &lt; u; i++) {}\n        for (j = ticks.length; ticks[j - 1] &gt; v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length &lt; 2) format = d3_scale_logFormat; else if (typeof format !== \&quot;function\&quot;) format = d3.format(format);\n      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, \n      Math.floor), e;\n      return function(d) {\n        return d / pow(f(log(d) + e)) &lt;= k ? format(d) : \&quot;\&quot;;\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\&quot;.0e\&quot;), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x &lt; 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \&quot;range\&quot;,\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \&quot;range\&quot; ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i &lt; n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \&quot;range\&quot;,\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length &lt; 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length &lt; 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \&quot;rangePoints\&quot;,\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length &lt; 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length &lt; 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \&quot;rangeRoundPoints\&quot;,\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length &lt; 2) padding = 0;\n      if (arguments.length &lt; 3) outerPadding = padding;\n      var reverse = x[1] &lt; x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \&quot;rangeBands\&quot;,\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length &lt; 2) padding = 0;\n      if (arguments.length &lt; 3) outerPadding = padding;\n      var reverse = x[1] &lt; x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \&quot;rangeRoundBands\&quot;,\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k &lt; q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y &lt; 0 ? [ NaN, NaN ] : [ y &gt; 0 ? thresholds[y - 1] : domain[0], y &lt; thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y &lt; 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x &lt;= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 &gt; a1 ? 0 : 1;\n      if (r1 &lt; r0) rc = r1, r1 = r0, r0 = rc;\n      if (da &gt;= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \&quot;\&quot;) + \&quot;Z\&quot;;\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) &lt;= π ? 0 : 1;\n        if (p1 &amp;&amp; d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) &lt;= π ? 0 : 1;\n        if (p0 &amp;&amp; d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if ((rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) &gt; .001) {\n        cr = r0 &lt; r1 ^ cw ? 0 : 1;\n        var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n        if (x1 != null) {\n          var rc1 = Math.min(rc, (r1 - lc) / (kc + 1)), t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\&quot;M\&quot;, t30[0], \&quot;A\&quot;, rc1, \&quot;,\&quot;, rc1, \&quot; 0 0,\&quot;, cr, \&quot; \&quot;, t30[1], \&quot;A\&quot;, r1, \&quot;,\&quot;, r1, \&quot; 0 \&quot;, 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \&quot;,\&quot;, cw, \&quot; \&quot;, t12[1], \&quot;A\&quot;, rc1, \&quot;,\&quot;, rc1, \&quot; 0 0,\&quot;, cr, \&quot; \&quot;, t12[0]);\n          } else {\n            path.push(\&quot;M\&quot;, t30[0], \&quot;A\&quot;, rc1, \&quot;,\&quot;, rc1, \&quot; 0 1,\&quot;, cr, \&quot; \&quot;, t12[0]);\n          }\n        } else {\n          path.push(\&quot;M\&quot;, x0, \&quot;,\&quot;, y0);\n        }\n        if (x3 != null) {\n          var rc0 = Math.min(rc, (r0 - lc) / (kc - 1)), t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\&quot;L\&quot;, t21[0], \&quot;A\&quot;, rc0, \&quot;,\&quot;, rc0, \&quot; 0 0,\&quot;, cr, \&quot; \&quot;, t21[1], \&quot;A\&quot;, r0, \&quot;,\&quot;, r0, \&quot; 0 \&quot;, cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \&quot;,\&quot;, 1 - cw, \&quot; \&quot;, t03[1], \&quot;A\&quot;, rc0, \&quot;,\&quot;, rc0, \&quot; 0 0,\&quot;, cr, \&quot; \&quot;, t03[0]);\n          } else {\n            path.push(\&quot;L\&quot;, t21[0], \&quot;A\&quot;, rc0, \&quot;,\&quot;, rc0, \&quot; 0 0,\&quot;, cr, \&quot; \&quot;, t03[0]);\n          }\n        } else {\n          path.push(\&quot;L\&quot;, x2, \&quot;,\&quot;, y2);\n        }\n      } else {\n        path.push(\&quot;M\&quot;, x0, \&quot;,\&quot;, y0);\n        if (x1 != null) path.push(\&quot;A\&quot;, r1, \&quot;,\&quot;, r1, \&quot; 0 \&quot;, l1, \&quot;,\&quot;, cw, \&quot; \&quot;, x1, \&quot;,\&quot;, y1);\n        path.push(\&quot;L\&quot;, x2, \&quot;,\&quot;, y2);\n        if (x3 != null) path.push(\&quot;A\&quot;, r0, \&quot;,\&quot;, r0, \&quot; 0 \&quot;, l0, \&quot;,\&quot;, 1 - cw, \&quot; \&quot;, x3, \&quot;,\&quot;, y3);\n      }\n      path.push(\&quot;Z\&quot;);\n      return path.join(\&quot;\&quot;);\n    }\n    function circleSegment(r1, cw) {\n      return \&quot;M0,\&quot; + r1 + \&quot;A\&quot; + r1 + \&quot;,\&quot; + r1 + \&quot; 0 1,\&quot; + cw + \&quot; 0,\&quot; + -r1 + \&quot;A\&quot; + r1 + \&quot;,\&quot; + r1 + \&quot; 0 1,\&quot; + cw + \&quot; 0,\&quot; + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \&quot;auto\&quot;;\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d &amp;&amp; d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 &gt; 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy &lt; 0 ? -1 : 1) * Math.sqrt(r * r * d2 - D * D), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 &gt; dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\&quot;M\&quot;, interpolate(projection(points), tension));\n      }\n      while (++i &lt; n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\&quot;\&quot;) : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \&quot;function\&quot;) interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \&quot;linear-closed\&quot;: d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \&quot;step-before\&quot;: d3_svg_lineStepBefore,\n    \&quot;step-after\&quot;: d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \&quot;basis-open\&quot;: d3_svg_lineBasisOpen,\n    \&quot;basis-closed\&quot;: d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \&quot;cardinal-open\&quot;: d3_svg_lineCardinalOpen,\n    \&quot;cardinal-closed\&quot;: d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.join(\&quot;L\&quot;);\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return d3_svg_lineLinear(points) + \&quot;Z\&quot;;\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \&quot;,\&quot;, p[1] ];\n    while (++i &lt; n) path.push(\&quot;H\&quot;, (p[0] + (p = points[i])[0]) / 2, \&quot;V\&quot;, p[1]);\n    if (n &gt; 1) path.push(\&quot;H\&quot;, p[0]);\n    return path.join(\&quot;\&quot;);\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \&quot;,\&quot;, p[1] ];\n    while (++i &lt; n) path.push(\&quot;V\&quot;, (p = points[i])[1], \&quot;H\&quot;, p[0]);\n    return path.join(\&quot;\&quot;);\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \&quot;,\&quot;, p[1] ];\n    while (++i &lt; n) path.push(\&quot;H\&quot;, (p = points[i])[0], \&quot;V\&quot;, p[1]);\n    return path.join(\&quot;\&quot;);\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length &lt; 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length &lt; 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length &lt; 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length &lt; 1 || points.length != tangents.length &amp;&amp; points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \&quot;\&quot;, p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \&quot;Q\&quot; + (p[0] - t0[0] * 2 / 3) + \&quot;,\&quot; + (p[1] - t0[1] * 2 / 3) + \&quot;,\&quot; + p[0] + \&quot;,\&quot; + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length &gt; 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \&quot;C\&quot; + (p0[0] + t0[0]) + \&quot;,\&quot; + (p0[1] + t0[1]) + \&quot;,\&quot; + (p[0] - t[0]) + \&quot;,\&quot; + (p[1] - t[1]) + \&quot;,\&quot; + p[0] + \&quot;,\&quot; + p[1];\n      for (var i = 2; i &lt; tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \&quot;S\&quot; + (p[0] - t[0]) + \&quot;,\&quot; + (p[1] - t[1]) + \&quot;,\&quot; + p[0] + \&quot;,\&quot; + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \&quot;Q\&quot; + (p[0] + t[0] * 2 / 3) + \&quot;,\&quot; + (p[1] + t[1] * 2 / 3) + \&quot;,\&quot; + lp[0] + \&quot;,\&quot; + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i &lt; n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length &lt; 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \&quot;,\&quot;, y0, \&quot;L\&quot;, d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \&quot;,\&quot;, d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i &lt;= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\&quot;L\&quot;, pi);\n    return path.join(\&quot;\&quot;);\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length &lt; 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i &lt; 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \&quot;,\&quot; + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i &lt; n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\&quot;\&quot;);\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i &lt; 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \&quot;,\&quot;, d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i &lt; m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\&quot;\&quot;);\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i &lt;= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\&quot;C\&quot;, d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \&quot;,\&quot;, d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \&quot;,\&quot;, d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \&quot;,\&quot;, d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \&quot;,\&quot;, d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \&quot;,\&quot;, d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i &lt; j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i &lt; j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) &lt; ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s &gt; 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i &lt;= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length &lt; 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i &lt; n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \&quot;L\&quot;, tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\&quot;M\&quot;, interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \&quot;Z\&quot;);\n      }\n      while (++i &lt; n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\&quot;\&quot;) : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \&quot;function\&quot;) interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \&quot;M\&quot; : \&quot;L\&quot;;\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \&quot;M\&quot; + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \&quot;Z\&quot;;\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 &amp;&amp; a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \&quot;A\&quot; + r + \&quot;,\&quot; + r + \&quot; 0 \&quot; + +(a &gt; π) + \&quot;,1 \&quot; + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \&quot;Q 0,0 \&quot; + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \&quot;M\&quot; + p[0] + \&quot;C\&quot; + p[1] + \&quot; \&quot; + p[2] + \&quot; \&quot; + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \&quot;circle\&quot;;\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \&quot;M0,\&quot; + r + \&quot;A\&quot; + r + \&quot;,\&quot; + r + \&quot; 0 1,1 0,\&quot; + -r + \&quot;A\&quot; + r + \&quot;,\&quot; + r + \&quot; 0 1,1 0,\&quot; + r + \&quot;Z\&quot;;\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \&quot;M\&quot; + -3 * r + \&quot;,\&quot; + -r + \&quot;H\&quot; + -r + \&quot;V\&quot; + -3 * r + \&quot;H\&quot; + r + \&quot;V\&quot; + -r + \&quot;H\&quot; + 3 * r + \&quot;V\&quot; + r + \&quot;H\&quot; + r + \&quot;V\&quot; + 3 * r + \&quot;H\&quot; + -r + \&quot;V\&quot; + r + \&quot;H\&quot; + -3 * r + \&quot;Z\&quot;;\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \&quot;M0,\&quot; + -ry + \&quot;L\&quot; + rx + \&quot;,0\&quot; + \&quot; 0,\&quot; + ry + \&quot; \&quot; + -rx + \&quot;,0\&quot; + \&quot;Z\&quot;;\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \&quot;M\&quot; + -r + \&quot;,\&quot; + -r + \&quot;L\&quot; + r + \&quot;,\&quot; + -r + \&quot; \&quot; + r + \&quot;,\&quot; + r + \&quot; \&quot; + -r + \&quot;,\&quot; + r + \&quot;Z\&quot;;\n    },\n    \&quot;triangle-down\&quot;: function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \&quot;M0,\&quot; + ry + \&quot;L\&quot; + rx + \&quot;,\&quot; + -ry + \&quot; \&quot; + -rx + \&quot;,\&quot; + -ry + \&quot;Z\&quot;;\n    },\n    \&quot;triangle-up\&quot;: function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \&quot;M0,\&quot; + -ry + \&quot;L\&quot; + rx + \&quot;,\&quot; + ry + \&quot; \&quot; + -rx + \&quot;,\&quot; + ry + \&quot;Z\&quot;;\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j &lt; m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i &lt; n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, active;\n      if ((lock = this[ns]) &amp;&amp; (active = lock[lock.active])) {\n        if (--lock.count) {\n          delete lock[lock.active];\n          lock.active += .5;\n        } else {\n          delete this[ns];\n        }\n        active.event &amp;&amp; active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection &amp;&amp; selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3_selectionRoot.transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j &lt; m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i &lt; n; ) {\n        if ((node = group[i]) &amp;&amp; (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\&quot;__data__\&quot; in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j &lt; m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i &lt; n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k &lt; o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \&quot;function\&quot;) filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j &lt; m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i &lt; n; i++) {\n        if ((node = group[i]) &amp;&amp; filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length &lt; 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \&quot;function\&quot; ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length &lt; 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \&quot;transform\&quot; ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \&quot;\&quot;, function() {\n        var a = this.getAttribute(name), i;\n        return a !== b &amp;&amp; (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \&quot;\&quot;, function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b &amp;&amp; (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \&quot;attr.\&quot; + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f &amp;&amp; function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f &amp;&amp; function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\&quot;attr.\&quot; + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n &lt; 3) {\n      if (typeof name !== \&quot;string\&quot;) {\n        if (n &lt; 2) value = \&quot;\&quot;;\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \&quot;\&quot;;\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \&quot;\&quot;, function() {\n        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b &amp;&amp; (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \&quot;style.\&quot; + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length &lt; 3) priority = \&quot;\&quot;;\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));\n      return f &amp;&amp; function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\&quot;style.\&quot; + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \&quot;text\&quot;, value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \&quot;\&quot;;\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\&quot;end.transition\&quot;, function() {\n      var p;\n      if (this[ns].count &lt; 2 &amp;&amp; (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length &lt; 1) return this.node()[ns][id].ease;\n    if (typeof value !== \&quot;function\&quot;) value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length &lt; 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \&quot;function\&quot; ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length &lt; 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \&quot;function\&quot; ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length &lt; 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\&quot;start\&quot;, \&quot;end\&quot;, \&quot;interrupt\&quot;))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j &lt; m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i &lt; n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \&quot;__transition__\&quot; : \&quot;__transition_\&quot; + name + \&quot;__\&quot;;\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id];\n    if (!transition) {\n      var time = inherit.time;\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n      d3.timer(function(elapsed) {\n        var delay = transition.delay, duration, ease, timer = d3_timer_active, tweened = [];\n        timer.t = delay + time;\n        if (delay &lt;= elapsed) return start(elapsed - delay);\n        timer.c = start;\n        function start(elapsed) {\n          if (lock.active &gt; id) return stop();\n          var active = lock[lock.active];\n          if (active) {\n            --lock.count;\n            delete lock[lock.active];\n            active.event &amp;&amp; active.event.interrupt.call(node, node.__data__, active.index);\n          }\n          lock.active = id;\n          transition.event &amp;&amp; transition.event.start.call(node, node.__data__, i);\n          transition.tween.forEach(function(key, value) {\n            if (value = value.call(node, node.__data__, i)) {\n              tweened.push(value);\n            }\n          });\n          ease = transition.ease;\n          duration = transition.duration;\n          d3.timer(function() {\n            timer.c = tick(elapsed || 1) ? d3_true : tick;\n            return 1;\n          }, 0, time);\n        }\n        function tick(elapsed) {\n          if (lock.active !== id) return 1;\n          var t = elapsed / duration, e = ease(t), n = tweened.length;\n          while (n &gt; 0) {\n            tweened[--n].call(node, e);\n          }\n          if (t &gt;= 1) {\n            transition.event &amp;&amp; transition.event.end.call(node, node.__data__, i);\n            return stop();\n          }\n        }\n        function stop() {\n          if (--lock.count) delete lock[id]; else delete node[ns];\n          return 1;\n        }\n      }, 0, time);\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\&quot;.tick\&quot;).data(ticks, scale1), tickEnter = tick.enter().insert(\&quot;g\&quot;, \&quot;.domain\&quot;).attr(\&quot;class\&quot;, \&quot;tick\&quot;).style(\&quot;opacity\&quot;, ε), tickExit = d3.transition(tick.exit()).style(\&quot;opacity\&quot;, ε).remove(), tickUpdate = d3.transition(tick.order()).style(\&quot;opacity\&quot;, 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\&quot;.domain\&quot;).data([ 0 ]), pathUpdate = (path.enter().append(\&quot;path\&quot;).attr(\&quot;class\&quot;, \&quot;domain\&quot;), \n        d3.transition(path));\n        tickEnter.append(\&quot;line\&quot;);\n        tickEnter.append(\&quot;text\&quot;);\n        var lineEnter = tickEnter.select(\&quot;line\&quot;), lineUpdate = tickUpdate.select(\&quot;line\&quot;), text = tick.select(\&quot;text\&quot;).text(tickFormat), textEnter = tickEnter.select(\&quot;text\&quot;), textUpdate = tickUpdate.select(\&quot;text\&quot;), sign = orient === \&quot;top\&quot; || orient === \&quot;left\&quot; ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \&quot;bottom\&quot; || orient === \&quot;top\&quot;) {\n          tickTransform = d3_svg_axisX, x1 = \&quot;x\&quot;, y1 = \&quot;y\&quot;, x2 = \&quot;x2\&quot;, y2 = \&quot;y2\&quot;;\n          text.attr(\&quot;dy\&quot;, sign &lt; 0 ? \&quot;0em\&quot; : \&quot;.71em\&quot;).style(\&quot;text-anchor\&quot;, \&quot;middle\&quot;);\n          pathUpdate.attr(\&quot;d\&quot;, \&quot;M\&quot; + range[0] + \&quot;,\&quot; + sign * outerTickSize + \&quot;V0H\&quot; + range[1] + \&quot;V\&quot; + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \&quot;y\&quot;, y1 = \&quot;x\&quot;, x2 = \&quot;y2\&quot;, y2 = \&quot;x2\&quot;;\n          text.attr(\&quot;dy\&quot;, \&quot;.32em\&quot;).style(\&quot;text-anchor\&quot;, sign &lt; 0 ? \&quot;end\&quot; : \&quot;start\&quot;);\n          pathUpdate.attr(\&quot;d\&quot;, \&quot;M\&quot; + sign * outerTickSize + \&quot;,\&quot; + range[0] + \&quot;H0V\&quot; + range[1] + \&quot;H\&quot; + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \&quot;\&quot; : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = arguments;\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length &amp;&amp; axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \&quot;bottom\&quot;, d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\&quot;transform\&quot;, function(d) {\n      var v0 = x0(d);\n      return \&quot;translate(\&quot; + (isFinite(v0) ? v0 : x1(d)) + \&quot;,0)\&quot;;\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\&quot;transform\&quot;, function(d) {\n      var v0 = y0(d);\n      return \&quot;translate(0,\&quot; + (isFinite(v0) ? v0 : y1(d)) + \&quot;)\&quot;;\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \&quot;brushstart\&quot;, \&quot;brush\&quot;, \&quot;brushend\&quot;), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\&quot;pointer-events\&quot;, \&quot;all\&quot;).style(\&quot;-webkit-tap-highlight-color\&quot;, \&quot;rgba(0,0,0,0)\&quot;).on(\&quot;mousedown.brush\&quot;, brushstart).on(\&quot;touchstart.brush\&quot;, brushstart);\n        var background = g.selectAll(\&quot;.background\&quot;).data([ 0 ]);\n        background.enter().append(\&quot;rect\&quot;).attr(\&quot;class\&quot;, \&quot;background\&quot;).style(\&quot;visibility\&quot;, \&quot;hidden\&quot;).style(\&quot;cursor\&quot;, \&quot;crosshair\&quot;);\n        g.selectAll(\&quot;.extent\&quot;).data([ 0 ]).enter().append(\&quot;rect\&quot;).attr(\&quot;class\&quot;, \&quot;extent\&quot;).style(\&quot;cursor\&quot;, \&quot;move\&quot;);\n        var resize = g.selectAll(\&quot;.resize\&quot;).data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\&quot;g\&quot;).attr(\&quot;class\&quot;, function(d) {\n          return \&quot;resize \&quot; + d;\n        }).style(\&quot;cursor\&quot;, function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\&quot;rect\&quot;).attr(\&quot;x\&quot;, function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\&quot;y\&quot;, function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\&quot;width\&quot;, 6).attr(\&quot;height\&quot;, 6).style(\&quot;visibility\&quot;, \&quot;hidden\&quot;);\n        resize.style(\&quot;display\&quot;, brush.empty() ? \&quot;none\&quot; : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\&quot;x\&quot;, range[0]).attr(\&quot;width\&quot;, range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\&quot;y\&quot;, range[0]).attr(\&quot;height\&quot;, range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\&quot;start.brush\&quot;, function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \&quot;brushstart\&quot;\n            });\n          }).tween(\&quot;brush:brush\&quot;, function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \&quot;brush\&quot;,\n                mode: \&quot;resize\&quot;\n              });\n            };\n          }).each(\&quot;end.brush\&quot;, function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \&quot;brush\&quot;,\n              mode: \&quot;resize\&quot;\n            });\n            event_({\n              type: \&quot;brushend\&quot;\n            });\n          });\n        } else {\n          event_({\n            type: \&quot;brushstart\&quot;\n          });\n          event_({\n            type: \&quot;brush\&quot;,\n            mode: \&quot;resize\&quot;\n          });\n          event_({\n            type: \&quot;brushend\&quot;\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\&quot;.resize\&quot;).attr(\&quot;transform\&quot;, function(d) {\n        return \&quot;translate(\&quot; + xExtent[+/e$/.test(d)] + \&quot;,\&quot; + yExtent[+/^s/.test(d)] + \&quot;)\&quot;;\n      });\n    }\n    function redrawX(g) {\n      g.select(\&quot;.extent\&quot;).attr(\&quot;x\&quot;, xExtent[0]);\n      g.selectAll(\&quot;.extent,.n&gt;rect,.s&gt;rect\&quot;).attr(\&quot;width\&quot;, xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\&quot;.extent\&quot;).attr(\&quot;y\&quot;, yExtent[0]);\n      g.selectAll(\&quot;.extent,.e&gt;rect,.w&gt;rect\&quot;).attr(\&quot;height\&quot;, yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) &amp;&amp; x, resizingY = !/^(e|w)$/.test(resizing) &amp;&amp; y, dragging = eventTarget.classed(\&quot;extent\&quot;), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window).on(\&quot;keydown.brush\&quot;, keydown).on(\&quot;keyup.brush\&quot;, keyup);\n      if (d3.event.changedTouches) {\n        w.on(\&quot;touchmove.brush\&quot;, brushmove).on(\&quot;touchend.brush\&quot;, brushend);\n      } else {\n        w.on(\&quot;mousemove.brush\&quot;, brushmove).on(\&quot;mouseup.brush\&quot;, brushend);\n      }\n      g.interrupt().selectAll(\&quot;*\&quot;).interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\&quot;pointer-events\&quot;, \&quot;none\&quot;).selectAll(\&quot;.resize\&quot;).style(\&quot;display\&quot;, null);\n      d3.select(\&quot;body\&quot;).style(\&quot;cursor\&quot;, eventTarget.style(\&quot;cursor\&quot;));\n      event_({\n        type: \&quot;brushstart\&quot;\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 &amp;&amp; dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] &lt; center[0])];\n            origin[1] = yExtent[+(point[1] &lt; center[1])];\n          } else center = null;\n        }\n        if (resizingX &amp;&amp; move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY &amp;&amp; move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \&quot;brush\&quot;,\n            mode: dragging ? \&quot;move\&quot; : \&quot;resize\&quot;\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position &lt; min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\&quot;pointer-events\&quot;, \&quot;all\&quot;).selectAll(\&quot;.resize\&quot;).style(\&quot;display\&quot;, brush.empty() ? \&quot;none\&quot; : null);\n        d3.select(\&quot;body\&quot;).style(\&quot;cursor\&quot;, null);\n        w.on(\&quot;mousemove.brush\&quot;, null).on(\&quot;mouseup.brush\&quot;, null).on(\&quot;touchmove.brush\&quot;, null).on(\&quot;touchend.brush\&quot;, null).on(\&quot;keydown.brush\&quot;, null).on(\&quot;keyup.brush\&quot;, null);\n        dragRestore();\n        event_({\n          type: \&quot;brushend\&quot;\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x &lt;&lt; 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x &lt;&lt; 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x &amp;&amp; y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x &amp;&amp; y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 &lt; x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 &lt; y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x &amp;&amp; y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y &amp;&amp; [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 &lt; x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 &lt; y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x &amp;&amp; xExtent[0] == xExtent[1] || !!y &amp;&amp; yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \&quot;on\&quot;);\n  };\n  var d3_svg_brushCursor = {\n    n: \&quot;ns-resize\&quot;,\n    e: \&quot;ew-resize\&quot;,\n    s: \&quot;ns-resize\&quot;,\n    w: \&quot;ew-resize\&quot;,\n    nw: \&quot;nwse-resize\&quot;,\n    ne: \&quot;nesw-resize\&quot;,\n    se: \&quot;nwse-resize\&quot;,\n    sw: \&quot;nesw-resize\&quot;\n  };\n  var d3_svg_brushResizes = [ [ \&quot;n\&quot;, \&quot;e\&quot;, \&quot;s\&quot;, \&quot;w\&quot;, \&quot;nw\&quot;, \&quot;ne\&quot;, \&quot;se\&quot;, \&quot;sw\&quot; ], [ \&quot;e\&quot;, \&quot;w\&quot; ], [ \&quot;n\&quot;, \&quot;s\&quot; ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\&quot;%Y-%m-%dT%H:%M:%S.%LZ\&quot;);\n  d3_time_format.iso = Date.prototype.toISOString &amp;&amp; +new Date(\&quot;2000-01-01T00:00:00.000Z\&quot;) ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] &lt; d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \&quot;number\&quot; &amp;&amp; tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) &amp;&amp; !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip &gt; 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \&quot;number\&quot; ? tickMethod(extent, interval) : !interval.range &amp;&amp; [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip &lt; 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \&quot;.%L\&quot;, function(d) {\n    return d.getMilliseconds();\n  } ], [ \&quot;:%S\&quot;, function(d) {\n    return d.getSeconds();\n  } ], [ \&quot;%I:%M\&quot;, function(d) {\n    return d.getMinutes();\n  } ], [ \&quot;%I %p\&quot;, function(d) {\n    return d.getHours();\n  } ], [ \&quot;%a %d\&quot;, function(d) {\n    return d.getDay() &amp;&amp; d.getDate() != 1;\n  } ], [ \&quot;%b %d\&quot;, function(d) {\n    return d.getDate() != 1;\n  } ], [ \&quot;%B\&quot;, function(d) {\n    return d.getMonth();\n  } ], [ \&quot;%Y\&quot;, d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \&quot;.%L\&quot;, function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \&quot;:%S\&quot;, function(d) {\n    return d.getUTCSeconds();\n  } ], [ \&quot;%I:%M\&quot;, function(d) {\n    return d.getUTCMinutes();\n  } ], [ \&quot;%I %p\&quot;, function(d) {\n    return d.getUTCHours();\n  } ], [ \&quot;%a %d\&quot;, function(d) {\n    return d.getUTCDay() &amp;&amp; d.getUTCDate() != 1;\n  } ], [ \&quot;%b %d\&quot;, function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \&quot;%B\&quot;, function(d) {\n    return d.getUTCMonth();\n  } ], [ \&quot;%Y\&quot;, d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \&quot;application/json\&quot;, d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \&quot;text/html\&quot;, d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (typeof define === \&quot;function\&quot; &amp;&amp; define.amd) define(d3); else if (typeof module === \&quot;object\&quot; &amp;&amp; module.exports) module.exports = d3;\n  this.d3 = d3;\n}();&quot;,&quot;module.exports = extend\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i &lt; arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n&quot;]}</td>
      </tr>
</table>

  </div>

  </div>
</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <form accept-charset="UTF-8" class="js-jump-to-line-form">
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" autofocus>
    <button type="submit" class="button">Go</button>
  </form>
</div>

        </div>

      </div><!-- /.repo-container -->
      <div class="modal-backdrop"></div>
    </div><!-- /.container -->
  </div><!-- /.site -->


    </div><!-- /.wrapper -->

      <div class="container">
  <div class="site-footer" role="contentinfo">
    <ul class="site-footer-links right">
      <li><a href="https://status.github.com/">Status</a></li>
      <li><a href="https://developer.github.com">API</a></li>
      <li><a href="http://training.github.com">Training</a></li>
      <li><a href="http://shop.github.com">Shop</a></li>
      <li><a href="/blog">Blog</a></li>
      <li><a href="/about">About</a></li>

    </ul>

    <a href="/" aria-label="Homepage">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
    </a>

    <ul class="site-footer-links">
      <li>&copy; 2015 <span title="0.05153s from github-fe138-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="/site/terms">Terms</a></li>
        <li><a href="/site/privacy">Privacy</a></li>
        <li><a href="/security">Security</a></li>
        <li><a href="/contact">Contact</a></li>
    </ul>
  </div><!-- /.site-footer -->
</div><!-- /.container -->


    <div class="fullscreen-overlay js-fullscreen-overlay" id="fullscreen_overlay">
  <div class="fullscreen-container js-suggester-container">
    <div class="textarea-wrap">
      <textarea name="fullscreen-contents" id="fullscreen-contents" class="fullscreen-contents js-fullscreen-contents" placeholder=""></textarea>
      <div class="suggester-container">
        <div class="suggester fullscreen-suggester js-suggester js-navigation-container"></div>
      </div>
    </div>
  </div>
  <div class="fullscreen-sidebar">
    <a href="#" class="exit-fullscreen js-exit-fullscreen tooltipped tooltipped-w" aria-label="Exit Zen Mode">
      <span class="mega-octicon octicon-screen-normal"></span>
    </a>
    <a href="#" class="theme-switcher js-theme-switcher tooltipped tooltipped-w"
      aria-label="Switch themes">
      <span class="octicon octicon-color-mode"></span>
    </a>
  </div>
</div>



    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <a href="#" class="octicon octicon-x flash-close js-ajax-error-dismiss" aria-label="Dismiss error"></a>
      Something went wrong with that request. Please try again.
    </div>


      <script crossorigin="anonymous" src="https://assets-cdn.github.com/assets/frameworks-2badd09f690fc93e95552ba0ecf64200a0019057d5f5c329827f78f98ea76a1c.js" type="text/javascript"></script>
      <script async="async" crossorigin="anonymous" src="https://assets-cdn.github.com/assets/github-13bba24e79c4d7b0c13fba399d17d39ae14c6fd536a93339819ceb490e78424b.js" type="text/javascript"></script>
      
      
  </body>
</html>

